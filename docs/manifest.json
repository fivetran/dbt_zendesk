{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.2", "generated_at": "2025-07-08T15:56:36.884182Z", "invocation_id": "61f2282f-04e2-4c17-a821-0421bb5cf864", "invocation_started_at": "2025-07-08T15:54:52.731967+00:00", "env": {}, "project_name": "zendesk_integration_tests", "project_id": "b8a12ac1bacdf035438fc7646299ce11", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "bigquery", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}}, "nodes": {"seed.zendesk_integration_tests.organization_tag_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "organization_tag_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "organization_tag_data.csv", "original_file_path": "seeds/organization_tag_data.csv", "unique_id": "seed.zendesk_integration_tests.organization_tag_data", "fqn": ["zendesk_integration_tests", "organization_tag_data"], "alias": "organization_tag_data", "checksum": {"name": "sha256", "checksum": "adebcb3827e908ab449435adc556aadf587cfad4103cab2c840d3d9fddc16e20"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "organization_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"organization_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp"}, "enabled": "{{ true if target.type != 'snowflake' else false }}"}, "created_at": 1751990096.416874, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`organization_tag_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_comment_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_comment_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_comment_data.csv", "original_file_path": "seeds/ticket_comment_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_comment_data", "fqn": ["zendesk_integration_tests", "ticket_comment_data"], "alias": "ticket_comment_data", "checksum": {"name": "sha256", "checksum": "033e18229b848b4809699f04f39605771faf437e583a1aefe1af5625f0ac7de5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "user_id": "int64", "created": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created": "timestamp"}}, "created_at": 1751990096.418914, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_comment_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.brand_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "brand_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "brand_data.csv", "original_file_path": "seeds/brand_data.csv", "unique_id": "seed.zendesk_integration_tests.brand_data", "fqn": ["zendesk_integration_tests", "brand_data"], "alias": "brand_data", "checksum": {"name": "sha256", "checksum": "203980ef5845715ee0758982a85b96a30c8e4b06fbda7f104705bd4cdd586aa9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp"}, "enabled": "{{ true if target.type != 'postgres' else false }}"}, "created_at": 1751990096.420189, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`brand_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.schedule_holiday_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "schedule_holiday_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "schedule_holiday_data.csv", "original_file_path": "seeds/schedule_holiday_data.csv", "unique_id": "seed.zendesk_integration_tests.schedule_holiday_data", "fqn": ["zendesk_integration_tests", "schedule_holiday_data"], "alias": "schedule_holiday_data", "checksum": {"name": "sha256", "checksum": "f907dea5e2dc21649bf4eae0392add96a884f19f900dc0f2d568141038ba5d28"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "schedule_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "schedule_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1751990096.421441, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`schedule_holiday_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_chat_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_chat_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_chat_data.csv", "original_file_path": "seeds/ticket_chat_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_chat_data", "fqn": ["zendesk_integration_tests", "ticket_chat_data"], "alias": "ticket_chat_data", "checksum": {"name": "sha256", "checksum": "878f9f7c9fcc8729a2a07fbfd03555e0f059b016fb38db52dcf5a8ae8301d0ed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "user_id": "int64", "ticket_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "ticket_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1751990096.424007, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_chat_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.domain_name_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "domain_name_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "domain_name_data.csv", "original_file_path": "seeds/domain_name_data.csv", "unique_id": "seed.zendesk_integration_tests.domain_name_data", "fqn": ["zendesk_integration_tests", "domain_name_data"], "alias": "domain_name_data", "checksum": {"name": "sha256", "checksum": "3bf711417f9269957353aa9e1ddd28ada8bd74e03128a4b8c94e694a560a09cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "organization_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"organization_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp"}}, "created_at": 1751990096.425302, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`domain_name_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_field_history_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_field_history_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_field_history_data.csv", "original_file_path": "seeds/ticket_field_history_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_field_history_data", "fqn": ["zendesk_integration_tests", "ticket_field_history_data"], "alias": "ticket_field_history_data", "checksum": {"name": "sha256", "checksum": "47c9244103b9a8dc25c5ce75693b8389df92258dde23dae71a09f021cf1b7ab7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "ticket_id": "int64", "user_id": "int64", "updated": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ticket_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "updated": "timestamp"}}, "created_at": 1751990096.4277499, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_field_history_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.audit_log_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "audit_log_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "audit_log_data.csv", "original_file_path": "seeds/audit_log_data.csv", "unique_id": "seed.zendesk_integration_tests.audit_log_data", "fqn": ["zendesk_integration_tests", "audit_log_data"], "alias": "audit_log_data", "checksum": {"name": "sha256", "checksum": "d5f2c698256eae66ae703be4c4410c3708dd913f211cdd207f38b133c86ebb0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1751990096.428942, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`audit_log_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_data.csv", "original_file_path": "seeds/ticket_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_data", "fqn": ["zendesk_integration_tests", "ticket_data"], "alias": "ticket_data", "checksum": {"name": "sha256", "checksum": "effe2837ec0ff3ec59fddc7fce0a5f4a6ff0a69daef5ae904244dcbf34425dae"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "created_at": "timestamp", "due_at": "timestamp", "updated_at": "timestamp", "assignee_id": "int64", "brand_id": "int64", "external_id": "int64", "forum_topic_id": "int64", "group_id": "int64", "organization_id": "int64", "problem_id": "int64", "requester_id": "int64", "submitter_id": "int64", "ticket_form_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "due_at": "timestamp", "updated_at": "timestamp", "assignee_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "brand_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "external_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "forum_topic_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "group_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "organization_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "problem_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "requester_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "submitter_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "ticket_form_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1751990096.430261, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_chat_event_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_chat_event_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_chat_event_data.csv", "original_file_path": "seeds/ticket_chat_event_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_chat_event_data", "fqn": ["zendesk_integration_tests", "ticket_chat_event_data"], "alias": "ticket_chat_event_data", "checksum": {"name": "sha256", "checksum": "4886e83fc809867631740e0fca706292cd272040273a6aac367db8c41f3c9b14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp", "status_updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"created_at": "timestamp", "status_updated_at": "timestamp"}}, "created_at": 1751990096.4329312, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_chat_event_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.time_zone_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "time_zone_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "time_zone_data.csv", "original_file_path": "seeds/time_zone_data.csv", "unique_id": "seed.zendesk_integration_tests.time_zone_data", "fqn": ["zendesk_integration_tests", "time_zone_data"], "alias": "time_zone_data", "checksum": {"name": "sha256", "checksum": "b02df4f14e54c7deb0b15c40b35196968de4374ceb1cc5ad95986620a506adb2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1751990096.434171, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`time_zone_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_schedule_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_schedule_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_schedule_data.csv", "original_file_path": "seeds/ticket_schedule_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_schedule_data", "fqn": ["zendesk_integration_tests", "ticket_schedule_data"], "alias": "ticket_schedule_data", "checksum": {"name": "sha256", "checksum": "dc4892d18f3730242f5319bb24498d77a4c32a666b6b4d5c0eec0d4dafd7224b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "ticket_id": "int64", "schedule_id": "int64", "created_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ticket_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "schedule_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp"}}, "created_at": 1751990096.435392, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_schedule_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.daylight_time_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "daylight_time_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "daylight_time_data.csv", "original_file_path": "seeds/daylight_time_data.csv", "unique_id": "seed.zendesk_integration_tests.daylight_time_data", "fqn": ["zendesk_integration_tests", "daylight_time_data"], "alias": "daylight_time_data", "checksum": {"name": "sha256", "checksum": "17642d90548c6367ab328762a47066a905e3ba2da8831cd86ef37ac659a38fc9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1751990096.436646, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`daylight_time_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.user_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "user_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "user_data.csv", "original_file_path": "seeds/user_data.csv", "unique_id": "seed.zendesk_integration_tests.user_data", "fqn": ["zendesk_integration_tests", "user_data"], "alias": "user_data", "checksum": {"name": "sha256", "checksum": "9f600c24b84ed0183e88c5aaa4e7e02bd2228115bebc85217f04c97bd5b6dbc9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "external_id": "int64", "locale_id": "int64", "organization_id": "int64", "created_at": "timestamp", "last_login_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "external_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "locale_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "organization_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "last_login_at": "timestamp", "updated_at": "timestamp"}, "enabled": "{{ true if target.type != 'snowflake' else false }}"}, "created_at": 1751990096.437906, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`user_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.schedule_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "schedule_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "schedule_data.csv", "original_file_path": "seeds/schedule_data.csv", "unique_id": "seed.zendesk_integration_tests.schedule_data", "fqn": ["zendesk_integration_tests", "schedule_data"], "alias": "schedule_data", "checksum": {"name": "sha256", "checksum": "e2596e44df02b53d13b850f9742084141b7b75755baae603c8d3db6b8354107a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "end_time": "int64", "start_time": "int64", "end_time_utc": "int64", "start_time_utc": "int64", "created_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "end_time": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "start_time": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "end_time_utc": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "start_time_utc": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp"}}, "created_at": 1751990096.439211, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`schedule_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_tag_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_tag_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_tag_data.csv", "original_file_path": "seeds/ticket_tag_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_tag_data", "fqn": ["zendesk_integration_tests", "ticket_tag_data"], "alias": "ticket_tag_data", "checksum": {"name": "sha256", "checksum": "020b25c3247e21387702778ce0af4e5a5b8b3aee62daaa05f48c643489b57ea0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1751990096.4404218, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_tag_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.organization_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "organization_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "organization_data.csv", "original_file_path": "seeds/organization_data.csv", "unique_id": "seed.zendesk_integration_tests.organization_data", "fqn": ["zendesk_integration_tests", "organization_data"], "alias": "organization_data", "checksum": {"name": "sha256", "checksum": "b3e00faed1ea214f73182b110c5f55653a5b43f2bc082dcb87f6c63dea5303c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1751990096.4416718, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`organization_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.ticket_form_history_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_form_history_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "ticket_form_history_data.csv", "original_file_path": "seeds/ticket_form_history_data.csv", "unique_id": "seed.zendesk_integration_tests.ticket_form_history_data", "fqn": ["zendesk_integration_tests", "ticket_form_history_data"], "alias": "ticket_form_history_data", "checksum": {"name": "sha256", "checksum": "a5b4edef05a0baa9acac87db3eea1ac0ba55865809db778ff458e20b7352c665"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp"}}, "created_at": 1751990096.442935, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_form_history_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.group_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "group_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "group_data.csv", "original_file_path": "seeds/group_data.csv", "unique_id": "seed.zendesk_integration_tests.group_data", "fqn": ["zendesk_integration_tests", "group_data"], "alias": "group_data", "checksum": {"name": "sha256", "checksum": "ded51f1b267e9785ca862ca30656faa2485b5814d834ea35de6892702c3dbd1a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1751990096.444171, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`group_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "seed.zendesk_integration_tests.user_tag_data": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "user_tag_data", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "user_tag_data.csv", "original_file_path": "seeds/user_tag_data.csv", "unique_id": "seed.zendesk_integration_tests.user_tag_data", "fqn": ["zendesk_integration_tests", "user_tag_data"], "alias": "user_tag_data", "checksum": {"name": "sha256", "checksum": "fde0d85263495e783fd6fb342940a4dcd67c39581d55bfc9b28935d24367a096"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "user_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp"}, "enabled": "{{ true if target.type != 'snowflake' else false }}"}, "created_at": 1751990096.44541, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`user_tag_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}, "model.zendesk.zendesk__ticket_enriched": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk__ticket_enriched", "resource_type": "model", "package_name": "zendesk", "path": "zendesk__ticket_enriched.sql", "original_file_path": "models/zendesk__ticket_enriched.sql", "unique_id": "model.zendesk.zendesk__ticket_enriched", "fqn": ["zendesk", "zendesk__ticket_enriched"], "alias": "zendesk__ticket_enriched", "checksum": {"name": "sha256", "checksum": "0ef7ffc3151ea8e85bf6903f6a8f49bcf0e5fe0be5662e327d5046aa78e9aab1"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a Zendesk ticket, enriched with data about it's tags, assignees, requester, submitter, organization and group.", "columns": {"ticket_id": {"name": "ticket_id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_role": {"name": "assignee_role", "description": "The role of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_email": {"name": "assignee_email", "description": "The email of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_name": {"name": "assignee_name", "description": "The name of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_role": {"name": "requester_role", "description": "The role of the user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_email": {"name": "requester_email", "description": "The email of the user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_name": {"name": "requester_name", "description": "The name of the user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_role": {"name": "submitter_role", "description": "The role of the user who submitted the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_email": {"name": "submitter_email", "description": "The email of the user who submitted the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_name": {"name": "submitter_name", "description": "The name of the user who submitted the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_name": {"name": "organization_name", "description": "The name of the organization of the requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "The external id of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_name": {"name": "group_name", "description": "The name of the group this ticket is assigned to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_channel": {"name": "created_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_from_id": {"name": "source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_from_title": {"name": "source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_rel": {"name": "source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_to_address": {"name": "source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_to_name": {"name": "source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_tags": {"name": "ticket_tags", "description": "A list of all tags assigned to this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "problem_id": {"name": "problem_id", "description": "The reference to the problem if the ticket is listed as a problem", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_incident": {"name": "is_incident", "description": "Boolean indicating whether the ticket is listed as an incident", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_brand_name": {"name": "ticket_brand_name", "description": "The brand name of with the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_form_name": {"name": "ticket_form_name", "description": "The form name of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_satisfaction_comment": {"name": "ticket_satisfaction_comment", "description": "The ticket satisfaction comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_satisfaction_reason": {"name": "ticket_satisfaction_reason", "description": "The ticket satisfaction reason", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_organization_domain_names": {"name": "ticket_organization_domain_names", "description": "The organization associated with the ticket domain names", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_domain_names": {"name": "requester_organization_domain_names", "description": "The ticket requesters organization domain names", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_external_id": {"name": "requester_external_id", "description": "The ticket requester external id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_created_at": {"name": "requester_created_at", "description": "The date the ticket requester was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_updated_at": {"name": "requester_updated_at", "description": "The date the ticket requester was last updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_requester_active": {"name": "is_requester_active", "description": "Boolean indicating whether the requester is currently active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_locale": {"name": "requester_locale", "description": "The locale of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_time_zone": {"name": "requester_time_zone", "description": "The timezone of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_ticket_update_count": {"name": "requester_ticket_update_count", "description": "The number of times the requester has updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_ticket_last_update_at": {"name": "requester_ticket_last_update_at", "description": "The last date the requester updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_last_login_at": {"name": "requester_last_login_at", "description": "The last login of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_id": {"name": "requester_organization_id", "description": "The organization id of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_name": {"name": "requester_organization_name", "description": "The organization name of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_tags": {"name": "requester_organization_tags", "description": "The organization tags of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_external_id": {"name": "requester_organization_external_id", "description": "The organization external id of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_created_at": {"name": "requester_organization_created_at", "description": "The date the ticket requesters organization was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_updated_at": {"name": "requester_organization_updated_at", "description": "The date the ticket requesters organization was last updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_external_id": {"name": "submitter_external_id", "description": "The ticket submitter external id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_agent_submitted": {"name": "is_agent_submitted", "description": "Boolean indicating if the submitter has an agent role", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_submitter_active": {"name": "is_submitter_active", "description": "Boolean indicating if the ticket submitter is active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_locale": {"name": "submitter_locale", "description": "The locale of the ticket submitter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_time_zone": {"name": "submitter_time_zone", "description": "The time zone of the ticket submitter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_external_id": {"name": "assignee_external_id", "description": "The external id of the ticket assignee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_assignee_active": {"name": "is_assignee_active", "description": "Boolean indicating if the ticket assignee is active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_locale": {"name": "assignee_locale", "description": "The locale of the ticket assignee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_time_zone": {"name": "assignee_time_zone", "description": "The time zone of the ticket assignee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_ticket_update_count": {"name": "assignee_ticket_update_count", "description": "The number of times the ticket assignee has updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_ticket_last_update_at": {"name": "assignee_ticket_last_update_at", "description": "The last date the ticket assignee updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_last_login_at": {"name": "assignee_last_login_at", "description": "The date the ticket assignee last logged in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_tag": {"name": "requester_tag", "description": "The tags associated with the ticket requester.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_tag": {"name": "submitter_tag", "description": "The tags associated with the ticket submitter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_tag": {"name": "assignee_tag", "description": "The tags associated with the ticket assignee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_total_satisfaction_scores": {"name": "ticket_total_satisfaction_scores", "description": "The total number of satisfaction scores the ticket received.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_first_satisfaction_score": {"name": "ticket_first_satisfaction_score", "description": "The first satisfaction score the ticket received.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_satisfaction_score": {"name": "ticket_satisfaction_score", "description": "The latest satisfaction score the ticket received.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_good_to_bad_satisfaction_score": {"name": "is_good_to_bad_satisfaction_score", "description": "Boolean indicating if the ticket had a satisfaction score went from good to bad.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_bad_to_good_satisfaction_score": {"name": "is_bad_to_good_satisfaction_score", "description": "Boolean indicating if the ticket had a satisfaction score went from bad to good.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the ticket has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk://models/zendesk.yml", "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.456511, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_enriched`", "raw_code": "-- this model enriches the ticket table with ticket-related dimensions.  This table will not include any metrics.\n-- for metrics, see ticket_metrics!\n\nwith ticket as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_aggregates') }}\n\n--If you use using_ticket_form_history this will be included, if not it will be ignored.\n{% if var('using_ticket_form_history', True) %}\n), latest_ticket_form as (\n\n    select *\n    from {{ ref('int_zendesk__latest_ticket_form') }}\n{% endif %}\n\n), latest_satisfaction_ratings as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_historical_satisfaction') }}\n\n), users as (\n\n    select *\n    from {{ ref('int_zendesk__user_aggregates') }}\n\n{% set using_user_role_histories = var('using_user_role_histories', True) and var('using_audit_log', False) %}\n{% if using_user_role_histories %}\n), user_role_history as (\n\n    select *\n    from {{ ref('int_zendesk__user_role_history') }}\n{% endif %}\n\n), requester_updates as (\n\n    select *\n    from {{ ref('int_zendesk__requester_updates') }}\n\n), assignee_updates as (\n\n    select *\n    from {{ ref('int_zendesk__assignee_updates') }}\n\n), ticket_group as (\n    \n    select *\n    from {{ ref('stg_zendesk__group') }}\n\n--If using organizations, this will be included, if not it will be ignored.\n{% if var('using_organizations', True) %}\n), organization as (\n\n    select *\n    from {{ ref('int_zendesk__organization_aggregates') }}\n{% endif %}\n\n), joined as (\n\n    select \n\n        ticket.*,\n\n        --If you use using_ticket_form_history this will be included, if not it will be ignored.\n        {% if var('using_ticket_form_history', True) %}\n        latest_ticket_form.name as ticket_form_name,\n        {% endif %}\n\n        latest_satisfaction_ratings.count_satisfaction_scores as ticket_total_satisfaction_scores,\n        latest_satisfaction_ratings.first_satisfaction_score as ticket_first_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_score as ticket_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_comment as ticket_satisfaction_comment,\n        latest_satisfaction_ratings.latest_satisfaction_reason as ticket_satisfaction_reason,\n        latest_satisfaction_ratings.is_good_to_bad_satisfaction_score,\n        latest_satisfaction_ratings.is_bad_to_good_satisfaction_score,\n\n        --If you use using_domain_names tags, this will be included, if not it will be ignored.\n        {% if var('using_domain_names', True) and var('using_organizations', True) %}\n        organization.domain_names as ticket_organization_domain_names, \n        requester_org.domain_names as requester_organization_domain_names,\n        {% endif %}\n\n        requester.external_id as requester_external_id,\n        requester.created_at as requester_created_at,\n        requester.updated_at as requester_updated_at,\n        requester.email as requester_email,\n        requester.name as requester_name,\n        requester.is_active as is_requester_active,\n        requester.locale as requester_locale,\n        requester.time_zone as requester_time_zone,\n        coalesce(requester_updates.total_updates, 0) as requester_ticket_update_count,\n        requester_updates.last_updated as requester_ticket_last_update_at,\n        requester.last_login_at as requester_last_login_at,\n        requester.organization_id as requester_organization_id,\n        {% if var('using_organizations', True) %}\n        requester_org.name as requester_organization_name,\n        {% endif %}\n\n        --If you use organization tags this will be included, if not it will be ignored.\n        {% if var('using_organization_tags', True) and var('using_organizations', True) %}\n        requester_org.organization_tags as requester_organization_tags,\n        {% endif %}\n        --If you use organizations this will be included, if not it will be ignored.\n        {% if var('using_organizations', True) %}\n        requester_org.external_id as requester_organization_external_id,\n        requester_org.created_at as requester_organization_created_at,\n        requester_org.updated_at as requester_organization_updated_at,\n        {% endif %}\n\n        {% if using_user_role_histories %}\n        requester_role_history.role as requester_role,\n        submitter_role_history.role as submitter_role,\n        submitter_role_history.is_internal_role as is_agent_submitted,\n        assignee_role_history.role as assignee_role,\n        {% else %}\n        requester.role as requester_role,\n        submitter.role as submitter_role,\n        submitter.role in ('agent','admin') as is_agent_submitted,\n        assignee.role as assignee_role,\n        {% endif %}\n    \n        submitter.external_id as submitter_external_id,\n        submitter.email as submitter_email,\n        submitter.name as submitter_name,\n        submitter.is_active as is_submitter_active,\n        submitter.locale as submitter_locale,\n        submitter.time_zone as submitter_time_zone,\n        assignee.external_id as assignee_external_id,\n        assignee.email as assignee_email,\n        assignee.name as assignee_name,\n        assignee.is_active as is_assignee_active,\n        assignee.locale as assignee_locale,\n        assignee.time_zone as assignee_time_zone,\n        coalesce(assignee_updates.total_updates, 0) as assignee_ticket_update_count,\n        assignee_updates.last_updated as assignee_ticket_last_update_at,\n        assignee.last_login_at as assignee_last_login_at,\n        ticket_group.name as group_name\n        --If you use organizations this will be included, if not it will be ignored.\n        {% if var('using_organizations', True) %}\n        ,organization.name as organization_name\n        {% endif %}\n        --If you use using_user_tags this will be included, if not it will be ignored.\n        {% if var('using_user_tags', True) %}\n        ,requester.user_tags as requester_tag,\n        submitter.user_tags as submitter_tag,\n        assignee.user_tags as assignee_tag\n        {% endif %}\n\n    \n    from ticket\n\n    --Requester Joins\n    join users as requester\n        on requester.user_id = ticket.requester_id\n        and requester.source_relation = ticket.source_relation\n    \n    {% if var('using_organizations', True) %}\n    left join organization as requester_org\n        on requester_org.organization_id = requester.organization_id\n        and requester_org.source_relation = requester.source_relation\n    {% endif %}\n\n    left join requester_updates\n        on requester_updates.ticket_id = ticket.ticket_id\n            and requester_updates.requester_id = ticket.requester_id\n            and requester_updates.source_relation = ticket.source_relation\n    \n    --Submitter Joins\n    join users as submitter\n        on submitter.user_id = ticket.submitter_id\n        and submitter.source_relation = ticket.source_relation\n\n    --Assignee Joins\n    left join users as assignee\n        on assignee.user_id = ticket.assignee_id\n        and assignee.source_relation = ticket.source_relation\n\n    left join assignee_updates\n        on assignee_updates.ticket_id = ticket.ticket_id\n        and assignee_updates.assignee_id = ticket.assignee_id\n        and assignee_updates.source_relation = ticket.source_relation\n\n    -- User Role History Joins\n    {% if using_user_role_histories %}\n    left join user_role_history as requester_role_history\n        on requester_role_history.user_id = requester.user_id\n        and requester_role_history.source_relation = requester.source_relation\n        and ticket.created_at >= requester_role_history.valid_starting_at\n        and ticket.created_at < requester_role_history.valid_ending_at\n\n    left join user_role_history as submitter_role_history\n        on submitter_role_history.user_id = submitter.user_id\n        and submitter_role_history.source_relation = submitter.source_relation\n        and ticket.created_at >= submitter_role_history.valid_starting_at\n        and ticket.created_at < submitter_role_history.valid_ending_at\n\n    left join user_role_history as assignee_role_history\n        on assignee_role_history.user_id = assignee.user_id\n        and assignee_role_history.source_relation = assignee.source_relation\n        and ticket.created_at >= assignee_role_history.valid_starting_at\n        and ticket.created_at < assignee_role_history.valid_ending_at\n\n    {% endif %}\n\n    --Ticket, Org, and Brand Joins\n    left join ticket_group\n        on ticket_group.group_id = ticket.group_id\n        and ticket_group.source_relation = ticket.source_relation\n\n    --If you use using_ticket_form_history this will be included, if not it will be ignored.\n    {% if var('using_ticket_form_history', True) %}\n    left join latest_ticket_form\n        on latest_ticket_form.ticket_form_id = ticket.ticket_form_id\n        and latest_ticket_form.source_relation = ticket.source_relation\n    {% endif %}\n\n    {% if var('using_organizations', True) %}\n    left join organization\n        on organization.organization_id = ticket.organization_id\n        and organization.source_relation = ticket.source_relation\n    {% endif %}\n\n    left join latest_satisfaction_ratings\n        on latest_satisfaction_ratings.ticket_id = ticket.ticket_id\n        and latest_satisfaction_ratings.source_relation = ticket.source_relation\n)\n\nselect *\nfrom joined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_aggregates", "package": null, "version": null}, {"name": "int_zendesk__latest_ticket_form", "package": null, "version": null}, {"name": "int_zendesk__ticket_historical_satisfaction", "package": null, "version": null}, {"name": "int_zendesk__user_aggregates", "package": null, "version": null}, {"name": "int_zendesk__user_role_history", "package": null, "version": null}, {"name": "int_zendesk__requester_updates", "package": null, "version": null}, {"name": "int_zendesk__assignee_updates", "package": null, "version": null}, {"name": "stg_zendesk__group", "package": null, "version": null}, {"name": "int_zendesk__organization_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__ticket_aggregates", "model.zendesk.int_zendesk__latest_ticket_form", "model.zendesk.int_zendesk__ticket_historical_satisfaction", "model.zendesk.int_zendesk__user_aggregates", "model.zendesk.int_zendesk__user_role_history", "model.zendesk.int_zendesk__requester_updates", "model.zendesk.int_zendesk__assignee_updates", "model.zendesk_source.stg_zendesk__group", "model.zendesk.int_zendesk__organization_aggregates"]}, "compiled_path": "target/compiled/zendesk/models/zendesk__ticket_enriched.sql", "compiled": true, "compiled_code": "-- this model enriches the ticket table with ticket-related dimensions.  This table will not include any metrics.\n-- for metrics, see ticket_metrics!\n\nwith ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_aggregates`\n\n--If you use using_ticket_form_history this will be included, if not it will be ignored.\n\n), latest_ticket_form as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__latest_ticket_form`\n\n\n), latest_satisfaction_ratings as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_satisfaction`\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_aggregates`\n\n\n\n), user_role_history as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n\n), requester_updates as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_updates`\n\n), assignee_updates as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__assignee_updates`\n\n), ticket_group as (\n    \n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__group`\n\n--If using organizations, this will be included, if not it will be ignored.\n\n), organization as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__organization_aggregates`\n\n\n), joined as (\n\n    select \n\n        ticket.*,\n\n        --If you use using_ticket_form_history this will be included, if not it will be ignored.\n        \n        latest_ticket_form.name as ticket_form_name,\n        \n\n        latest_satisfaction_ratings.count_satisfaction_scores as ticket_total_satisfaction_scores,\n        latest_satisfaction_ratings.first_satisfaction_score as ticket_first_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_score as ticket_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_comment as ticket_satisfaction_comment,\n        latest_satisfaction_ratings.latest_satisfaction_reason as ticket_satisfaction_reason,\n        latest_satisfaction_ratings.is_good_to_bad_satisfaction_score,\n        latest_satisfaction_ratings.is_bad_to_good_satisfaction_score,\n\n        --If you use using_domain_names tags, this will be included, if not it will be ignored.\n        \n        organization.domain_names as ticket_organization_domain_names, \n        requester_org.domain_names as requester_organization_domain_names,\n        \n\n        requester.external_id as requester_external_id,\n        requester.created_at as requester_created_at,\n        requester.updated_at as requester_updated_at,\n        requester.email as requester_email,\n        requester.name as requester_name,\n        requester.is_active as is_requester_active,\n        requester.locale as requester_locale,\n        requester.time_zone as requester_time_zone,\n        coalesce(requester_updates.total_updates, 0) as requester_ticket_update_count,\n        requester_updates.last_updated as requester_ticket_last_update_at,\n        requester.last_login_at as requester_last_login_at,\n        requester.organization_id as requester_organization_id,\n        \n        requester_org.name as requester_organization_name,\n        \n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n        requester_org.organization_tags as requester_organization_tags,\n        \n        --If you use organizations this will be included, if not it will be ignored.\n        \n        requester_org.external_id as requester_organization_external_id,\n        requester_org.created_at as requester_organization_created_at,\n        requester_org.updated_at as requester_organization_updated_at,\n        \n\n        \n        requester_role_history.role as requester_role,\n        submitter_role_history.role as submitter_role,\n        submitter_role_history.is_internal_role as is_agent_submitted,\n        assignee_role_history.role as assignee_role,\n        \n    \n        submitter.external_id as submitter_external_id,\n        submitter.email as submitter_email,\n        submitter.name as submitter_name,\n        submitter.is_active as is_submitter_active,\n        submitter.locale as submitter_locale,\n        submitter.time_zone as submitter_time_zone,\n        assignee.external_id as assignee_external_id,\n        assignee.email as assignee_email,\n        assignee.name as assignee_name,\n        assignee.is_active as is_assignee_active,\n        assignee.locale as assignee_locale,\n        assignee.time_zone as assignee_time_zone,\n        coalesce(assignee_updates.total_updates, 0) as assignee_ticket_update_count,\n        assignee_updates.last_updated as assignee_ticket_last_update_at,\n        assignee.last_login_at as assignee_last_login_at,\n        ticket_group.name as group_name\n        --If you use organizations this will be included, if not it will be ignored.\n        \n        ,organization.name as organization_name\n        \n        --If you use using_user_tags this will be included, if not it will be ignored.\n        \n        ,requester.user_tags as requester_tag,\n        submitter.user_tags as submitter_tag,\n        assignee.user_tags as assignee_tag\n        \n\n    \n    from ticket\n\n    --Requester Joins\n    join users as requester\n        on requester.user_id = ticket.requester_id\n        and requester.source_relation = ticket.source_relation\n    \n    \n    left join organization as requester_org\n        on requester_org.organization_id = requester.organization_id\n        and requester_org.source_relation = requester.source_relation\n    \n\n    left join requester_updates\n        on requester_updates.ticket_id = ticket.ticket_id\n            and requester_updates.requester_id = ticket.requester_id\n            and requester_updates.source_relation = ticket.source_relation\n    \n    --Submitter Joins\n    join users as submitter\n        on submitter.user_id = ticket.submitter_id\n        and submitter.source_relation = ticket.source_relation\n\n    --Assignee Joins\n    left join users as assignee\n        on assignee.user_id = ticket.assignee_id\n        and assignee.source_relation = ticket.source_relation\n\n    left join assignee_updates\n        on assignee_updates.ticket_id = ticket.ticket_id\n        and assignee_updates.assignee_id = ticket.assignee_id\n        and assignee_updates.source_relation = ticket.source_relation\n\n    -- User Role History Joins\n    \n    left join user_role_history as requester_role_history\n        on requester_role_history.user_id = requester.user_id\n        and requester_role_history.source_relation = requester.source_relation\n        and ticket.created_at >= requester_role_history.valid_starting_at\n        and ticket.created_at < requester_role_history.valid_ending_at\n\n    left join user_role_history as submitter_role_history\n        on submitter_role_history.user_id = submitter.user_id\n        and submitter_role_history.source_relation = submitter.source_relation\n        and ticket.created_at >= submitter_role_history.valid_starting_at\n        and ticket.created_at < submitter_role_history.valid_ending_at\n\n    left join user_role_history as assignee_role_history\n        on assignee_role_history.user_id = assignee.user_id\n        and assignee_role_history.source_relation = assignee.source_relation\n        and ticket.created_at >= assignee_role_history.valid_starting_at\n        and ticket.created_at < assignee_role_history.valid_ending_at\n\n    \n\n    --Ticket, Org, and Brand Joins\n    left join ticket_group\n        on ticket_group.group_id = ticket.group_id\n        and ticket_group.source_relation = ticket.source_relation\n\n    --If you use using_ticket_form_history this will be included, if not it will be ignored.\n    \n    left join latest_ticket_form\n        on latest_ticket_form.ticket_form_id = ticket.ticket_form_id\n        and latest_ticket_form.source_relation = ticket.source_relation\n    \n\n    \n    left join organization\n        on organization.organization_id = ticket.organization_id\n        and organization.source_relation = ticket.source_relation\n    \n\n    left join latest_satisfaction_ratings\n        on latest_satisfaction_ratings.ticket_id = ticket.ticket_id\n        and latest_satisfaction_ratings.source_relation = ticket.source_relation\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ticket_id"], "time_spine": null}, "model.zendesk.zendesk__ticket_metrics": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk__ticket_metrics", "resource_type": "model", "package_name": "zendesk", "path": "zendesk__ticket_metrics.sql", "original_file_path": "models/zendesk__ticket_metrics.sql", "unique_id": "model.zendesk.zendesk__ticket_metrics", "fqn": ["zendesk", "zendesk__ticket_metrics"], "alias": "zendesk__ticket_metrics", "checksum": {"name": "sha256", "checksum": "a0b6d7780e26705cb90c08e6177d923e195acdfff6dc39c143ae60eee5bf8fdf"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a Zendesk Support ticket, enriched with metrics about reply times, resolution times and work times.  Calendar and business hours are supported", "columns": {"first_reply_time_calendar_minutes": {"name": "first_reply_time_calendar_minutes", "description": "The number of calendar minutes between when the ticket was created and when the first public agent response occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_reply_time_business_minutes": {"name": "first_reply_time_business_minutes", "description": "The number of business minutes between when the ticket was created and when the first public agent response occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_reply_time_calendar_minutes": {"name": "total_reply_time_calendar_minutes", "description": "The combined calendar time between all end-user comments and the next public agent response", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_solved_at": {"name": "first_solved_at", "description": "The time the ticket was first in 'solved' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_solved_at": {"name": "last_solved_at", "description": "The time the ticket was last in 'solved' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_resolution_calendar_minutes": {"name": "first_resolution_calendar_minutes", "description": "The number of calendar minutes between the ticket created time and the time the ticket was first set to solved status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "final_resolution_calendar_minutes": {"name": "final_resolution_calendar_minutes", "description": "The number of calendar minutes between the ticket created time and the time the ticket was last set to solved status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_one_touch_resolution": {"name": "is_one_touch_resolution", "description": "A boolean field indicating that the ticket has one public agent response and is in solved status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_resolution_business_minutes": {"name": "first_resolution_business_minutes", "description": "The number of business minutes between the ticket created time and the time the ticket was first set to solved status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "full_resolution_business_minutes": {"name": "full_resolution_business_minutes", "description": "The number of business minutes between the ticket created time and the time the ticket was last set to solved status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "agent_wait_time_in_business_minutes": {"name": "agent_wait_time_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'pending' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_wait_time_in_business_minutes": {"name": "requester_wait_time_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'new', 'open', or 'hold' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "solve_time_in_business_minutes": {"name": "solve_time_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'new', 'open', 'hold', or 'pending' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "agent_work_time_in_business_minutes": {"name": "agent_work_time_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'new' or 'open' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "on_hold_time_in_business_minutes": {"name": "on_hold_time_in_business_minutes", "description": "The combined number of business minutes the ticket was on 'hold' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "new_status_duration_in_business_minutes": {"name": "new_status_duration_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'new' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "open_status_duration_in_business_minutes": {"name": "open_status_duration_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'open' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "agent_wait_time_in_calendar_minutes": {"name": "agent_wait_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was in 'pending' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_wait_time_in_calendar_minutes": {"name": "requester_wait_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was in 'new', 'open', or 'hold' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "solve_time_in_calendar_minutes": {"name": "solve_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was in 'new', 'open', 'hold', or 'pending' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "agent_work_time_in_calendar_minutes": {"name": "agent_work_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was in 'new' or 'open' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "on_hold_time_in_calendar_minutes": {"name": "on_hold_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was on 'hold' status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_role": {"name": "assignee_role", "description": "The role of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_email": {"name": "assignee_email", "description": "The email of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_name": {"name": "assignee_name", "description": "The name of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_role": {"name": "requester_role", "description": "The role of the user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_email": {"name": "requester_email", "description": "The email of the user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_name": {"name": "requester_name", "description": "The name of the user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_role": {"name": "submitter_role", "description": "The role of the user who submitted the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_email": {"name": "submitter_email", "description": "The email of the user who submitted the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_name": {"name": "submitter_name", "description": "The name of the user who submitted the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_name": {"name": "organization_name", "description": "The name of the organization of the requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "The external id of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_name": {"name": "group_name", "description": "The name of the group this ticket is assigned to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_channel": {"name": "created_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_from_id": {"name": "source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_from_title": {"name": "source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_rel": {"name": "source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_to_address": {"name": "source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_to_name": {"name": "source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_tags": {"name": "ticket_tags", "description": "A list of all tags assigned to this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "problem_id": {"name": "problem_id", "description": "The reference to the problem if the ticket is listed as a problem", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_incident": {"name": "is_incident", "description": "Boolean indicating whether the ticket is listed as an incident", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_brand_name": {"name": "ticket_brand_name", "description": "The brand name of with the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_form_name": {"name": "ticket_form_name", "description": "The form name of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_satisfaction_comment": {"name": "ticket_satisfaction_comment", "description": "The ticket satisfaction comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_satisfaction_reason": {"name": "ticket_satisfaction_reason", "description": "The ticket satisfaction reason", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_organization_domain_names": {"name": "ticket_organization_domain_names", "description": "The organization associated with the ticket domain names", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_domain_names": {"name": "requester_organization_domain_names", "description": "The ticket requesters organization domain names", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_external_id": {"name": "requester_external_id", "description": "The ticket requester external id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_created_at": {"name": "requester_created_at", "description": "The date the ticket requester was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_updated_at": {"name": "requester_updated_at", "description": "The date the ticket requester was last updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_requester_active": {"name": "is_requester_active", "description": "Boolean indicating whether the requester is currently active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_locale": {"name": "requester_locale", "description": "The locale of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_time_zone": {"name": "requester_time_zone", "description": "The timezone of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_ticket_update_count": {"name": "requester_ticket_update_count", "description": "The number of times the requester has updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_ticket_last_update_at": {"name": "requester_ticket_last_update_at", "description": "The last date the requester updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_last_login_at": {"name": "requester_last_login_at", "description": "The last login of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_id": {"name": "requester_organization_id", "description": "The organization id of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_name": {"name": "requester_organization_name", "description": "The organization name of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_tags": {"name": "requester_organization_tags", "description": "The organization tags of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_external_id": {"name": "requester_organization_external_id", "description": "The organization external id of the ticket requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_created_at": {"name": "requester_organization_created_at", "description": "The date the ticket requesters organization was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_organization_updated_at": {"name": "requester_organization_updated_at", "description": "The date the ticket requesters organization was last updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_external_id": {"name": "submitter_external_id", "description": "The ticket submitter external id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_agent_submitted": {"name": "is_agent_submitted", "description": "Boolean indicating if the submitter has an agent role", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_submitter_active": {"name": "is_submitter_active", "description": "Boolean indicating if the ticket submitter is active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_locale": {"name": "submitter_locale", "description": "The locale of the ticket submitter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_time_zone": {"name": "submitter_time_zone", "description": "The time zone of the ticket submitter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_external_id": {"name": "assignee_external_id", "description": "The external id of the ticket assignee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_assignee_active": {"name": "is_assignee_active", "description": "Boolean indicating if the ticket assignee is active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_locale": {"name": "assignee_locale", "description": "The locale of the ticket assignee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_time_zone": {"name": "assignee_time_zone", "description": "The time zone of the ticket assignee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_ticket_update_count": {"name": "assignee_ticket_update_count", "description": "The number of times the ticket assignee has updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_ticket_last_update_at": {"name": "assignee_ticket_last_update_at", "description": "The last date the ticket assignee updated the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_last_login_at": {"name": "assignee_last_login_at", "description": "The date the ticket assignee last logged in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_tag": {"name": "requester_tag", "description": "The tags associated with the ticket requester.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_tag": {"name": "submitter_tag", "description": "The tags associated with the ticket submitter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_tag": {"name": "assignee_tag", "description": "The tags associated with the ticket assignee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_total_satisfaction_scores": {"name": "ticket_total_satisfaction_scores", "description": "The total number of satisfaction scores the ticket received.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_first_satisfaction_score": {"name": "ticket_first_satisfaction_score", "description": "The first satisfaction score the ticket received.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_satisfaction_score": {"name": "ticket_satisfaction_score", "description": "The latest satisfaction score the ticket received.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_good_to_bad_satisfaction_score": {"name": "is_good_to_bad_satisfaction_score", "description": "Boolean indicating if the ticket had a satisfaction score went from good to bad.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_bad_to_good_satisfaction_score": {"name": "is_bad_to_good_satisfaction_score", "description": "Boolean indicating if the ticket had a satisfaction score went from bad to good.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_agent_comments": {"name": "count_agent_comments", "description": "Count of agent comments within the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_public_agent_comments": {"name": "count_public_agent_comments", "description": "Count of public agent comments within the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_end_user_comments": {"name": "count_end_user_comments", "description": "Count of end user comments within the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_internal_comments": {"name": "count_internal_comments", "description": "Count of internal comments within the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_public_comments": {"name": "count_public_comments", "description": "Count of public comments within the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_comments": {"name": "total_comments", "description": "Total count of all comments within the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_ticket_handoffs": {"name": "count_ticket_handoffs", "description": "Count of distinct internal users who have touched/commented on the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unique_assignee_count": {"name": "unique_assignee_count", "description": "The count of unique assignees that were assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_stations_count": {"name": "assignee_stations_count", "description": "The total number of assignees that were assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_stations_count": {"name": "group_stations_count", "description": "The total count of group stations within the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_assignee_id": {"name": "first_assignee_id", "description": "Assignee id of the first agent assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_assignee_id": {"name": "last_assignee_id", "description": "Assignee id of the last agent assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_agent_assignment_date": {"name": "first_agent_assignment_date", "description": "The date the first agent was assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_agent_assignment_date": {"name": "last_agent_assignment_date", "description": "The date the last agent was assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_assignment_to_resolution_calendar_minutes": {"name": "first_assignment_to_resolution_calendar_minutes", "description": "The time in calendar minutes between the first assignment and resolution of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_assignment_to_resolution_calendar_minutes": {"name": "last_assignment_to_resolution_calendar_minutes", "description": "The time in calendar minutes between the last assignment and resolution of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_resolutions": {"name": "count_resolutions", "description": "The count of ticket resolutions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "count_reopens": {"name": "count_reopens", "description": "The count of ticket reopen events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "new_status_duration_in_calendar_minutes": {"name": "new_status_duration_in_calendar_minutes", "description": "The duration in calendar minutes the ticket was in the \"new\" status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "open_status_duration_in_calendar_minutes": {"name": "open_status_duration_in_calendar_minutes", "description": "The duration in calendar minutes the ticket was in the \"open\" status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_agent_replies": {"name": "total_agent_replies", "description": "The total number of agent replies within the ticket, excluding comments where an agent created the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_last_login_age_minutes": {"name": "requester_last_login_age_minutes", "description": "The time in minutes since the ticket requester was last logged in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_last_login_age_minutes": {"name": "assignee_last_login_age_minutes", "description": "The time in minutes since the ticket assignee was last logged in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unsolved_ticket_age_minutes": {"name": "unsolved_ticket_age_minutes", "description": "The time in minutes the ticket has been in an unsolved state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unsolved_ticket_age_since_update_minutes": {"name": "unsolved_ticket_age_since_update_minutes", "description": "The time in minutes the ticket has been unsolved since the last update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_two_touch_resolution": {"name": "is_two_touch_resolution", "description": "Boolean indicating if the ticket was resolved in two public comments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_multi_touch_resolution": {"name": "is_multi_touch_resolution", "description": "Boolean indicating if the ticket was resolved in two or more public comments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_last_comment_date": {"name": "ticket_last_comment_date", "description": "The time the last comment was applied to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_unassigned_duration_calendar_minutes": {"name": "ticket_unassigned_duration_calendar_minutes", "description": "The time in minutes the ticket was in an unassigned state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_status_assignment_date": {"name": "last_status_assignment_date", "description": "The time the status was last changed on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the ticket has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_deleted_count": {"name": "ticket_deleted_count", "description": "The count of ticket deletion events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_ticket_recoveries": {"name": "total_ticket_recoveries", "description": "The count of ticket recovery (deletion reversal) events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk://models/zendesk.yml", "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.47046, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_metrics`", "raw_code": "with ticket_enriched as (\n\n  select *\n  from {{ ref('zendesk__ticket_enriched') }}\n\n), ticket_resolution_times_calendar as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_resolution_times_calendar') }}\n\n), ticket_reply_times_calendar as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_reply_times_calendar') }}\n\n), ticket_comments as (\n\n  select *\n  from {{ ref('int_zendesk__comment_metrics') }}\n\n), ticket_work_time_calendar as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_work_time_calendar') }}\n\n-- business hour CTEs\n{% if var('using_schedules', True) %}\n\n), ticket_first_resolution_time_business as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_first_resolution_time_business') }}\n\n), ticket_full_resolution_time_business as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_full_resolution_time_business') }}\n\n), ticket_work_time_business as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_work_time_business') }}\n\n), ticket_first_reply_time_business as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_first_reply_time_business') }}\n\n{% endif %}\n-- end business hour CTEs\n\n), calendar_hour_metrics as (\n\nselect\n  ticket_enriched.*,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else round(ticket_reply_times_calendar.first_reply_time_calendar_minutes, 4)\n      end as first_reply_time_calendar_minutes,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else round(ticket_reply_times_calendar.total_reply_time_calendar_minutes, 4)\n      end as total_reply_time_calendar_minutes,\n  coalesce(ticket_comments.count_agent_comments, 0) as count_agent_comments,\n  coalesce(ticket_comments.count_public_agent_comments, 0) as count_public_agent_comments,\n  coalesce(ticket_comments.count_end_user_comments, 0) as count_end_user_comments,\n  coalesce(ticket_comments.count_public_comments, 0) as count_public_comments,\n  coalesce(ticket_comments.count_internal_comments, 0) as count_internal_comments,\n  coalesce(ticket_comments.total_comments, 0) as total_comments,\n  coalesce(ticket_comments.count_ticket_handoffs, 0) as count_ticket_handoffs, -- the number of distinct internal users who commented on the ticket\n  ticket_comments.last_comment_added_at as ticket_last_comment_date,\n  ticket_resolution_times_calendar.unique_assignee_count,\n  ticket_resolution_times_calendar.assignee_stations_count,\n  ticket_resolution_times_calendar.group_stations_count,\n  ticket_resolution_times_calendar.first_assignee_id,\n  ticket_resolution_times_calendar.last_assignee_id,\n  ticket_resolution_times_calendar.first_agent_assignment_date,\n  ticket_resolution_times_calendar.last_agent_assignment_date,\n  ticket_resolution_times_calendar.first_solved_at,\n  ticket_resolution_times_calendar.last_solved_at,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.first_assignment_to_resolution_calendar_minutes\n    else null\n      end as first_assignment_to_resolution_calendar_minutes,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.last_assignment_to_resolution_calendar_minutes\n    else null\n      end as last_assignment_to_resolution_calendar_minutes,\n  round(ticket_resolution_times_calendar.ticket_unassigned_duration_calendar_minutes, 4) as ticket_unassigned_duration_calendar_minutes,\n  ticket_resolution_times_calendar.first_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.final_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.total_resolutions as count_resolutions,\n  ticket_resolution_times_calendar.count_reopens,\n  ticket_work_time_calendar.ticket_deleted_count,\n  ticket_work_time_calendar.total_ticket_recoveries,\n  ticket_work_time_calendar.last_status_assignment_date,\n  ticket_work_time_calendar.new_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.open_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.agent_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.requester_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.solve_time_in_calendar_minutes,\n  ticket_work_time_calendar.agent_work_time_in_calendar_minutes,\n  ticket_work_time_calendar.on_hold_time_in_calendar_minutes,\n  coalesce(ticket_comments.count_agent_replies, 0) as total_agent_replies,\n  \n  case when ticket_enriched.is_requester_active = true and ticket_enriched.requester_last_login_at is not null\n    then round(({{ dbt.datediff(\"ticket_enriched.requester_last_login_at\", dbt.current_timestamp(), 'second') }} /60), 4)\n      end as requester_last_login_age_minutes,\n  case when ticket_enriched.is_assignee_active = true and ticket_enriched.assignee_last_login_at is not null\n    then round(({{ dbt.datediff(\"ticket_enriched.assignee_last_login_at\", dbt.current_timestamp(), 'second') }} /60), 4)\n      end as assignee_last_login_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then round(({{ dbt.datediff(\"ticket_enriched.created_at\", dbt.current_timestamp(), 'second') }} /60), 4)\n      end as unsolved_ticket_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then round(({{ dbt.datediff(\"ticket_enriched.updated_at\", dbt.current_timestamp(), 'second') }} /60), 4)\n      end as unsolved_ticket_age_since_update_minutes,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_one_touch_resolution \n    then true\n    else false\n      end as is_one_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_two_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and not ticket_comments.is_one_touch_resolution\n      and not ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_multi_touch_resolution\n\n\nfrom ticket_enriched\n\nleft join ticket_reply_times_calendar\n  on ticket_enriched.ticket_id = ticket_reply_times_calendar.ticket_id \n  and ticket_enriched.source_relation = ticket_reply_times_calendar.source_relation\n\nleft join ticket_resolution_times_calendar\n  on ticket_enriched.ticket_id = ticket_resolution_times_calendar.ticket_id \n  and ticket_enriched.source_relation = ticket_resolution_times_calendar.source_relation\n\nleft join ticket_work_time_calendar\n  on ticket_enriched.ticket_id = ticket_work_time_calendar.ticket_id \n  and ticket_enriched.source_relation = ticket_work_time_calendar.source_relation\n\nleft join ticket_comments\n  on ticket_enriched.ticket_id = ticket_comments.ticket_id \n  and ticket_enriched.source_relation = ticket_comments.source_relation\n\n{% if var('using_schedules', True) %}\n\n), business_hour_metrics as (\n\n  select \n    ticket_enriched.source_relation,\n    ticket_enriched.ticket_id,\n    round(ticket_first_resolution_time_business.first_resolution_business_minutes, 4) as first_resolution_business_minutes,\n    round(ticket_full_resolution_time_business.full_resolution_business_minutes, 4) as full_resolution_business_minutes,\n    round(ticket_first_reply_time_business.first_reply_time_business_minutes, 4) as first_reply_time_business_minutes,\n    round(ticket_work_time_business.agent_wait_time_in_business_minutes, 4) as agent_wait_time_in_business_minutes,\n    round(ticket_work_time_business.requester_wait_time_in_business_minutes, 4) as requester_wait_time_in_business_minutes,\n    round(ticket_work_time_business.solve_time_in_business_minutes, 4) as solve_time_in_business_minutes,\n    round(ticket_work_time_business.agent_work_time_in_business_minutes, 4) as agent_work_time_in_business_minutes,\n    round(ticket_work_time_business.on_hold_time_in_business_minutes, 4) as on_hold_time_in_business_minutes,\n    round(ticket_work_time_business.new_status_duration_in_business_minutes, 4) as new_status_duration_in_business_minutes,\n    round(ticket_work_time_business.open_status_duration_in_business_minutes, 4) as open_status_duration_in_business_minutes\n\n  from ticket_enriched\n\n  left join ticket_first_resolution_time_business\n    on ticket_enriched.ticket_id = ticket_first_resolution_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_first_resolution_time_business.source_relation\n\n  left join ticket_full_resolution_time_business\n    on ticket_enriched.ticket_id = ticket_full_resolution_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_full_resolution_time_business.source_relation\n  \n  left join ticket_first_reply_time_business\n    on ticket_enriched.ticket_id = ticket_first_reply_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_first_reply_time_business.source_relation\n  \n  left join ticket_work_time_business\n    on ticket_enriched.ticket_id = ticket_work_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_work_time_business.source_relation\n\n)\n\nselect\n  calendar_hour_metrics.*,\n  case when calendar_hour_metrics.status in ('solved', 'closed')\n    then coalesce(business_hour_metrics.first_resolution_business_minutes,0)\n    else null\n      end as first_resolution_business_minutes,\n  case when calendar_hour_metrics.status in ('solved', 'closed')\n    then coalesce(business_hour_metrics.full_resolution_business_minutes,0)\n    else null\n      end as full_resolution_business_minutes,\n  case when coalesce(calendar_hour_metrics.count_public_agent_comments, 0) = 0\n    then null\n    else coalesce(business_hour_metrics.first_reply_time_business_minutes,0)\n      end as first_reply_time_business_minutes,\n  coalesce(business_hour_metrics.agent_wait_time_in_business_minutes,0) as agent_wait_time_in_business_minutes,\n  coalesce(business_hour_metrics.requester_wait_time_in_business_minutes,0) as requester_wait_time_in_business_minutes,\n  coalesce(business_hour_metrics.solve_time_in_business_minutes,0) as solve_time_in_business_minutes,\n  coalesce(business_hour_metrics.agent_work_time_in_business_minutes,0) as agent_work_time_in_business_minutes,\n  coalesce(business_hour_metrics.on_hold_time_in_business_minutes,0) as on_hold_time_in_business_minutes,\n  coalesce(business_hour_metrics.new_status_duration_in_business_minutes,0) as new_status_duration_in_business_minutes,\n  coalesce(business_hour_metrics.open_status_duration_in_business_minutes,0) as open_status_duration_in_business_minutes\n\nfrom calendar_hour_metrics\n\nleft join business_hour_metrics \n  on calendar_hour_metrics.ticket_id = business_hour_metrics.ticket_id\n  and calendar_hour_metrics.source_relation = business_hour_metrics.source_relation\n\n{% else %}\n\n) \n\nselect *\nfrom calendar_hour_metrics\n\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_enriched", "package": null, "version": null}, {"name": "int_zendesk__ticket_resolution_times_calendar", "package": null, "version": null}, {"name": "int_zendesk__ticket_reply_times_calendar", "package": null, "version": null}, {"name": "int_zendesk__comment_metrics", "package": null, "version": null}, {"name": "int_zendesk__ticket_work_time_calendar", "package": null, "version": null}, {"name": "int_zendesk__ticket_first_resolution_time_business", "package": null, "version": null}, {"name": "int_zendesk__ticket_full_resolution_time_business", "package": null, "version": null}, {"name": "int_zendesk__ticket_work_time_business", "package": null, "version": null}, {"name": "int_zendesk__ticket_first_reply_time_business", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.datediff"], "nodes": ["model.zendesk.zendesk__ticket_enriched", "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_reply_times_calendar", "model.zendesk.int_zendesk__comment_metrics", "model.zendesk.int_zendesk__ticket_work_time_calendar", "model.zendesk.int_zendesk__ticket_first_resolution_time_business", "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "model.zendesk.int_zendesk__ticket_work_time_business", "model.zendesk.int_zendesk__ticket_first_reply_time_business"]}, "compiled_path": "target/compiled/zendesk/models/zendesk__ticket_metrics.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_zendesk__ticket_resolution_times_calendar as (\nwith historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation\n),  __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n),  __dbt__cte__int_zendesk__ticket_reply_times as (\nwith ticket_public_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  group by 1,2,3,4\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2\n),  __dbt__cte__int_zendesk__ticket_reply_times_calendar as (\nwith ticket as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_reply_times as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_reply_times\n\n)\n\nselect\n  ticket.source_relation,\n  ticket.ticket_id,\n  sum(case when is_first_comment then reply_time_calendar_minutes\n    else null end) as first_reply_time_calendar_minutes,\n  sum(reply_time_calendar_minutes) as total_reply_time_calendar_minutes --total combined time the customer waits for internal response\n  \nfrom ticket\nleft join ticket_reply_times\n  on ticket.ticket_id = ticket_reply_times.ticket_id\n  and ticket.source_relation = ticket_reply_times.source_relation\n\ngroup by 1, 2\n),  __dbt__cte__int_zendesk__ticket_work_time_calendar as (\nwith ticket_historical_status as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n\n), calendar_minutes as (\n  \n    select \n        source_relation,\n        ticket_id,\n        status,\n        case when status in ('pending') then status_duration_calendar_minutes\n            else 0 end as agent_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold') then status_duration_calendar_minutes\n            else 0 end as requester_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold', 'pending') then status_duration_calendar_minutes \n            else 0 end as solve_time_in_minutes, \n        case when status in ('new', 'open') then status_duration_calendar_minutes\n            else 0 end as agent_work_time_in_minutes,\n        case when status in ('hold') then status_duration_calendar_minutes\n            else 0 end as on_hold_time_in_minutes,\n        case when status = 'new' then status_duration_calendar_minutes\n            else 0 end as new_status_duration_minutes,\n        case when status = 'open' then status_duration_calendar_minutes\n            else 0 end as open_status_duration_minutes,\n        case when status = 'deleted' then 1\n            else 0 end as ticket_deleted,\n        first_value(valid_starting_at) over (partition by ticket_id, source_relation order by valid_starting_at desc, ticket_id, source_relation rows unbounded preceding) as last_status_assignment_date,\n        case when lag(status) over (partition by ticket_id, source_relation order by valid_starting_at) = 'deleted' and status != 'deleted'\n            then 1\n            else 0\n                end as ticket_recoveries\n\n    from ticket_historical_status\n\n)\n\nselect \n  source_relation,\n  ticket_id,\n  last_status_assignment_date,\n  sum(ticket_deleted) as ticket_deleted_count,\n  sum(agent_wait_time_in_minutes) as agent_wait_time_in_calendar_minutes,\n  sum(requester_wait_time_in_minutes) as requester_wait_time_in_calendar_minutes,\n  sum(solve_time_in_minutes) as solve_time_in_calendar_minutes,\n  sum(agent_work_time_in_minutes) as agent_work_time_in_calendar_minutes,\n  sum(on_hold_time_in_minutes) as on_hold_time_in_calendar_minutes,\n  sum(new_status_duration_minutes) as new_status_duration_in_calendar_minutes,\n  sum(open_status_duration_minutes) as open_status_duration_in_calendar_minutes,\n  sum(ticket_recoveries) as total_ticket_recoveries\nfrom calendar_minutes\ngroup by 1, 2, 3\n),  __dbt__cte__int_zendesk__ticket_first_resolution_time_business as (\n\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_first_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.first_solved_at) as first_solved_at,\n\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.first_solved_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_resolution_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_first_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n\n), weekly_periods as (\n  \n    select \n\n      weeks_cross_ticket_first_resolution_time.*,\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_first_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule\n    on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n\n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as first_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2\n),  __dbt__cte__int_zendesk__ticket_full_resolution_time_business as (\n\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_full_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.last_solved_at) as last_solved_at,\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.last_solved_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_full_resolution_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_full_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n\n    weeks_cross_ticket_full_resolution_time.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n  \n  from weeks_cross_ticket_full_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n  \n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as full_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2\n),  __dbt__cte__int_zendesk__ticket_work_time_business as (\n\n\nwith ticket_historical_status as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      ticket_historical_status.source_relation,\n      ticket_historical_status.ticket_id,\n      ticket_historical_status.status as ticket_status,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as status_schedule_start,\n      least(valid_ending_at, schedule_invalidated_at) as status_schedule_end,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      ticket_historical_status.valid_starting_at as status_valid_starting_at,\n      ticket_historical_status.valid_ending_at as status_valid_ending_at\n\n    from ticket_historical_status\n    left join ticket_schedules\n      on ticket_historical_status.ticket_id = ticket_schedules.ticket_id\n      and ticket_historical_status.source_relation = ticket_schedules.source_relation\n      -- making sure there is indeed real overlap\n      where \n\n    datetime_diff(\n        cast(least(valid_ending_at, schedule_invalidated_at) as datetime),\n        cast(greatest(valid_starting_at, schedule_created_at) as datetime),\n        second\n    )\n\n   > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      schedule_id,\n      status_schedule_start,\n      status_schedule_end,\n      status_valid_starting_at,\n      status_valid_ending_at,\n    (\n\n    datetime_diff(\n        cast(cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n      (\n\n    datetime_diff(\n        cast(ticket_status_crossed_with_schedule.status_schedule_end as datetime),\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as datetime),\n        second\n    )\n\n   /60\n            ) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp),\n        week\n    ) as date) as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7,8\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_periods as (\n\n    select\n\n      weeks_cross_ticket_full_solved_time.*,\n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods as (\n  \n    select \n      weekly_periods.source_relation,\n      weekly_periods.ticket_id,\n      weekly_periods.week_number,\n      weekly_periods.schedule_id,\n      weekly_periods.ticket_status,\n      weekly_periods.ticket_week_start_time,\n      weekly_periods.ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(weekly_periods.ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n    from weekly_periods\n    join schedule\n      on ticket_week_start_time <= schedule.end_time_utc \n      and ticket_week_end_time >= schedule.start_time_utc\n      and weekly_periods.schedule_id = schedule.schedule_id\n      and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n  \n), business_minutes as (\n  \n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      case when ticket_status in ('pending') then scheduled_minutes\n          else 0 end as agent_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold') then scheduled_minutes\n          else 0 end as requester_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold', 'pending') then scheduled_minutes\n          else 0 end as solve_time_in_minutes,\n      case when ticket_status in ('new', 'open') then scheduled_minutes\n          else 0 end as agent_work_time_in_minutes,\n      case when ticket_status in ('hold') then scheduled_minutes\n          else 0 end as on_hold_time_in_minutes,\n      case when ticket_status = 'new' then scheduled_minutes\n          else 0 end as new_status_duration_minutes,\n      case when ticket_status = 'open' then scheduled_minutes\n          else 0 end as open_status_duration_minutes\n    from intercepted_periods\n\n)\n  \n    select \n      source_relation,\n      ticket_id,\n      sum(agent_wait_time_in_minutes) as agent_wait_time_in_business_minutes,\n      sum(requester_wait_time_in_minutes) as requester_wait_time_in_business_minutes,\n      sum(solve_time_in_minutes) as solve_time_in_business_minutes,\n      sum(agent_work_time_in_minutes) as agent_work_time_in_business_minutes,\n      sum(on_hold_time_in_minutes) as on_hold_time_in_business_minutes,\n      sum(new_status_duration_minutes) as new_status_duration_in_business_minutes,\n      sum(open_status_duration_minutes) as open_status_duration_in_business_minutes\n    from business_minutes\n    group by 1,2\n),  __dbt__cte__int_zendesk__ticket_first_reply_time_business as (\n\n\nwith ticket_reply_times as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_reply_times\n\n), ticket_schedules as (\n\n    select \n      *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), first_reply_time as (\n\n    select\n      source_relation,\n      ticket_id,\n      end_user_comment_created_at,\n      agent_responded_at\n\n    from ticket_reply_times\n    where is_first_comment\n\n), ticket_first_reply_time as (\n\n  select \n    first_reply_time.source_relation,\n    first_reply_time.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(first_reply_time.agent_responded_at) as agent_responded_at,\n\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(first_reply_time.agent_responded_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n  \n  from first_reply_time\n  join ticket_schedules \n    on first_reply_time.ticket_id = ticket_schedules.ticket_id\n    and first_reply_time.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_reply as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_reply_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_first_reply_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n    select \n      weeks_cross_ticket_first_reply.*, \n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    from weeks_cross_ticket_first_reply\n\n), intercepted_periods as (\n\n  select \n      weekly_periods.source_relation,\n      ticket_id,\n      week_number,\n      weekly_periods.schedule_id,\n      ticket_week_start_time,\n      ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n      \n)\n\n  select \n    ticket_id, \n    source_relation,\n    sum(scheduled_minutes) as first_reply_time_business_minutes\n  from intercepted_periods\n  group by 1, 2\n), ticket_enriched as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_enriched`\n\n), ticket_resolution_times_calendar as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_reply_times_calendar as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_reply_times_calendar\n\n), ticket_comments as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__comment_metrics`\n\n), ticket_work_time_calendar as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_work_time_calendar\n\n-- business hour CTEs\n\n\n), ticket_first_resolution_time_business as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_first_resolution_time_business\n\n), ticket_full_resolution_time_business as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_full_resolution_time_business\n\n), ticket_work_time_business as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_work_time_business\n\n), ticket_first_reply_time_business as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_first_reply_time_business\n\n\n-- end business hour CTEs\n\n), calendar_hour_metrics as (\n\nselect\n  ticket_enriched.*,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else round(ticket_reply_times_calendar.first_reply_time_calendar_minutes, 4)\n      end as first_reply_time_calendar_minutes,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else round(ticket_reply_times_calendar.total_reply_time_calendar_minutes, 4)\n      end as total_reply_time_calendar_minutes,\n  coalesce(ticket_comments.count_agent_comments, 0) as count_agent_comments,\n  coalesce(ticket_comments.count_public_agent_comments, 0) as count_public_agent_comments,\n  coalesce(ticket_comments.count_end_user_comments, 0) as count_end_user_comments,\n  coalesce(ticket_comments.count_public_comments, 0) as count_public_comments,\n  coalesce(ticket_comments.count_internal_comments, 0) as count_internal_comments,\n  coalesce(ticket_comments.total_comments, 0) as total_comments,\n  coalesce(ticket_comments.count_ticket_handoffs, 0) as count_ticket_handoffs, -- the number of distinct internal users who commented on the ticket\n  ticket_comments.last_comment_added_at as ticket_last_comment_date,\n  ticket_resolution_times_calendar.unique_assignee_count,\n  ticket_resolution_times_calendar.assignee_stations_count,\n  ticket_resolution_times_calendar.group_stations_count,\n  ticket_resolution_times_calendar.first_assignee_id,\n  ticket_resolution_times_calendar.last_assignee_id,\n  ticket_resolution_times_calendar.first_agent_assignment_date,\n  ticket_resolution_times_calendar.last_agent_assignment_date,\n  ticket_resolution_times_calendar.first_solved_at,\n  ticket_resolution_times_calendar.last_solved_at,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.first_assignment_to_resolution_calendar_minutes\n    else null\n      end as first_assignment_to_resolution_calendar_minutes,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.last_assignment_to_resolution_calendar_minutes\n    else null\n      end as last_assignment_to_resolution_calendar_minutes,\n  round(ticket_resolution_times_calendar.ticket_unassigned_duration_calendar_minutes, 4) as ticket_unassigned_duration_calendar_minutes,\n  ticket_resolution_times_calendar.first_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.final_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.total_resolutions as count_resolutions,\n  ticket_resolution_times_calendar.count_reopens,\n  ticket_work_time_calendar.ticket_deleted_count,\n  ticket_work_time_calendar.total_ticket_recoveries,\n  ticket_work_time_calendar.last_status_assignment_date,\n  ticket_work_time_calendar.new_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.open_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.agent_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.requester_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.solve_time_in_calendar_minutes,\n  ticket_work_time_calendar.agent_work_time_in_calendar_minutes,\n  ticket_work_time_calendar.on_hold_time_in_calendar_minutes,\n  coalesce(ticket_comments.count_agent_replies, 0) as total_agent_replies,\n  \n  case when ticket_enriched.is_requester_active = true and ticket_enriched.requester_last_login_at is not null\n    then round((\n\n    datetime_diff(\n        cast(current_timestamp() as datetime),\n        cast(ticket_enriched.requester_last_login_at as datetime),\n        second\n    )\n\n   /60), 4)\n      end as requester_last_login_age_minutes,\n  case when ticket_enriched.is_assignee_active = true and ticket_enriched.assignee_last_login_at is not null\n    then round((\n\n    datetime_diff(\n        cast(current_timestamp() as datetime),\n        cast(ticket_enriched.assignee_last_login_at as datetime),\n        second\n    )\n\n   /60), 4)\n      end as assignee_last_login_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then round((\n\n    datetime_diff(\n        cast(current_timestamp() as datetime),\n        cast(ticket_enriched.created_at as datetime),\n        second\n    )\n\n   /60), 4)\n      end as unsolved_ticket_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then round((\n\n    datetime_diff(\n        cast(current_timestamp() as datetime),\n        cast(ticket_enriched.updated_at as datetime),\n        second\n    )\n\n   /60), 4)\n      end as unsolved_ticket_age_since_update_minutes,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_one_touch_resolution \n    then true\n    else false\n      end as is_one_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_two_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and not ticket_comments.is_one_touch_resolution\n      and not ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_multi_touch_resolution\n\n\nfrom ticket_enriched\n\nleft join ticket_reply_times_calendar\n  on ticket_enriched.ticket_id = ticket_reply_times_calendar.ticket_id \n  and ticket_enriched.source_relation = ticket_reply_times_calendar.source_relation\n\nleft join ticket_resolution_times_calendar\n  on ticket_enriched.ticket_id = ticket_resolution_times_calendar.ticket_id \n  and ticket_enriched.source_relation = ticket_resolution_times_calendar.source_relation\n\nleft join ticket_work_time_calendar\n  on ticket_enriched.ticket_id = ticket_work_time_calendar.ticket_id \n  and ticket_enriched.source_relation = ticket_work_time_calendar.source_relation\n\nleft join ticket_comments\n  on ticket_enriched.ticket_id = ticket_comments.ticket_id \n  and ticket_enriched.source_relation = ticket_comments.source_relation\n\n\n\n), business_hour_metrics as (\n\n  select \n    ticket_enriched.source_relation,\n    ticket_enriched.ticket_id,\n    round(ticket_first_resolution_time_business.first_resolution_business_minutes, 4) as first_resolution_business_minutes,\n    round(ticket_full_resolution_time_business.full_resolution_business_minutes, 4) as full_resolution_business_minutes,\n    round(ticket_first_reply_time_business.first_reply_time_business_minutes, 4) as first_reply_time_business_minutes,\n    round(ticket_work_time_business.agent_wait_time_in_business_minutes, 4) as agent_wait_time_in_business_minutes,\n    round(ticket_work_time_business.requester_wait_time_in_business_minutes, 4) as requester_wait_time_in_business_minutes,\n    round(ticket_work_time_business.solve_time_in_business_minutes, 4) as solve_time_in_business_minutes,\n    round(ticket_work_time_business.agent_work_time_in_business_minutes, 4) as agent_work_time_in_business_minutes,\n    round(ticket_work_time_business.on_hold_time_in_business_minutes, 4) as on_hold_time_in_business_minutes,\n    round(ticket_work_time_business.new_status_duration_in_business_minutes, 4) as new_status_duration_in_business_minutes,\n    round(ticket_work_time_business.open_status_duration_in_business_minutes, 4) as open_status_duration_in_business_minutes\n\n  from ticket_enriched\n\n  left join ticket_first_resolution_time_business\n    on ticket_enriched.ticket_id = ticket_first_resolution_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_first_resolution_time_business.source_relation\n\n  left join ticket_full_resolution_time_business\n    on ticket_enriched.ticket_id = ticket_full_resolution_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_full_resolution_time_business.source_relation\n  \n  left join ticket_first_reply_time_business\n    on ticket_enriched.ticket_id = ticket_first_reply_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_first_reply_time_business.source_relation\n  \n  left join ticket_work_time_business\n    on ticket_enriched.ticket_id = ticket_work_time_business.ticket_id \n    and ticket_enriched.source_relation = ticket_work_time_business.source_relation\n\n)\n\nselect\n  calendar_hour_metrics.*,\n  case when calendar_hour_metrics.status in ('solved', 'closed')\n    then coalesce(business_hour_metrics.first_resolution_business_minutes,0)\n    else null\n      end as first_resolution_business_minutes,\n  case when calendar_hour_metrics.status in ('solved', 'closed')\n    then coalesce(business_hour_metrics.full_resolution_business_minutes,0)\n    else null\n      end as full_resolution_business_minutes,\n  case when coalesce(calendar_hour_metrics.count_public_agent_comments, 0) = 0\n    then null\n    else coalesce(business_hour_metrics.first_reply_time_business_minutes,0)\n      end as first_reply_time_business_minutes,\n  coalesce(business_hour_metrics.agent_wait_time_in_business_minutes,0) as agent_wait_time_in_business_minutes,\n  coalesce(business_hour_metrics.requester_wait_time_in_business_minutes,0) as requester_wait_time_in_business_minutes,\n  coalesce(business_hour_metrics.solve_time_in_business_minutes,0) as solve_time_in_business_minutes,\n  coalesce(business_hour_metrics.agent_work_time_in_business_minutes,0) as agent_work_time_in_business_minutes,\n  coalesce(business_hour_metrics.on_hold_time_in_business_minutes,0) as on_hold_time_in_business_minutes,\n  coalesce(business_hour_metrics.new_status_duration_in_business_minutes,0) as new_status_duration_in_business_minutes,\n  coalesce(business_hour_metrics.open_status_duration_in_business_minutes,0) as open_status_duration_in_business_minutes\n\nfrom calendar_hour_metrics\n\nleft join business_hour_metrics \n  on calendar_hour_metrics.ticket_id = business_hour_metrics.ticket_id\n  and calendar_hour_metrics.source_relation = business_hour_metrics.source_relation\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "sql": " __dbt__cte__int_zendesk__ticket_resolution_times_calendar as (\nwith historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation\n)"}, {"id": "model.zendesk.int_zendesk__comments_enriched", "sql": " __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n)"}, {"id": "model.zendesk.int_zendesk__ticket_reply_times", "sql": " __dbt__cte__int_zendesk__ticket_reply_times as (\nwith ticket_public_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  group by 1,2,3,4\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2\n)"}, {"id": "model.zendesk.int_zendesk__ticket_reply_times_calendar", "sql": " __dbt__cte__int_zendesk__ticket_reply_times_calendar as (\nwith ticket as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_reply_times as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_reply_times\n\n)\n\nselect\n  ticket.source_relation,\n  ticket.ticket_id,\n  sum(case when is_first_comment then reply_time_calendar_minutes\n    else null end) as first_reply_time_calendar_minutes,\n  sum(reply_time_calendar_minutes) as total_reply_time_calendar_minutes --total combined time the customer waits for internal response\n  \nfrom ticket\nleft join ticket_reply_times\n  on ticket.ticket_id = ticket_reply_times.ticket_id\n  and ticket.source_relation = ticket_reply_times.source_relation\n\ngroup by 1, 2\n)"}, {"id": "model.zendesk.int_zendesk__ticket_work_time_calendar", "sql": " __dbt__cte__int_zendesk__ticket_work_time_calendar as (\nwith ticket_historical_status as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n\n), calendar_minutes as (\n  \n    select \n        source_relation,\n        ticket_id,\n        status,\n        case when status in ('pending') then status_duration_calendar_minutes\n            else 0 end as agent_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold') then status_duration_calendar_minutes\n            else 0 end as requester_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold', 'pending') then status_duration_calendar_minutes \n            else 0 end as solve_time_in_minutes, \n        case when status in ('new', 'open') then status_duration_calendar_minutes\n            else 0 end as agent_work_time_in_minutes,\n        case when status in ('hold') then status_duration_calendar_minutes\n            else 0 end as on_hold_time_in_minutes,\n        case when status = 'new' then status_duration_calendar_minutes\n            else 0 end as new_status_duration_minutes,\n        case when status = 'open' then status_duration_calendar_minutes\n            else 0 end as open_status_duration_minutes,\n        case when status = 'deleted' then 1\n            else 0 end as ticket_deleted,\n        first_value(valid_starting_at) over (partition by ticket_id, source_relation order by valid_starting_at desc, ticket_id, source_relation rows unbounded preceding) as last_status_assignment_date,\n        case when lag(status) over (partition by ticket_id, source_relation order by valid_starting_at) = 'deleted' and status != 'deleted'\n            then 1\n            else 0\n                end as ticket_recoveries\n\n    from ticket_historical_status\n\n)\n\nselect \n  source_relation,\n  ticket_id,\n  last_status_assignment_date,\n  sum(ticket_deleted) as ticket_deleted_count,\n  sum(agent_wait_time_in_minutes) as agent_wait_time_in_calendar_minutes,\n  sum(requester_wait_time_in_minutes) as requester_wait_time_in_calendar_minutes,\n  sum(solve_time_in_minutes) as solve_time_in_calendar_minutes,\n  sum(agent_work_time_in_minutes) as agent_work_time_in_calendar_minutes,\n  sum(on_hold_time_in_minutes) as on_hold_time_in_calendar_minutes,\n  sum(new_status_duration_minutes) as new_status_duration_in_calendar_minutes,\n  sum(open_status_duration_minutes) as open_status_duration_in_calendar_minutes,\n  sum(ticket_recoveries) as total_ticket_recoveries\nfrom calendar_minutes\ngroup by 1, 2, 3\n)"}, {"id": "model.zendesk.int_zendesk__ticket_first_resolution_time_business", "sql": " __dbt__cte__int_zendesk__ticket_first_resolution_time_business as (\n\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_first_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.first_solved_at) as first_solved_at,\n\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.first_solved_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_resolution_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_first_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n\n), weekly_periods as (\n  \n    select \n\n      weeks_cross_ticket_first_resolution_time.*,\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_first_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule\n    on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n\n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as first_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2\n)"}, {"id": "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "sql": " __dbt__cte__int_zendesk__ticket_full_resolution_time_business as (\n\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_full_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.last_solved_at) as last_solved_at,\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.last_solved_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_full_resolution_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_full_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n\n    weeks_cross_ticket_full_resolution_time.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n  \n  from weeks_cross_ticket_full_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n  \n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as full_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2\n)"}, {"id": "model.zendesk.int_zendesk__ticket_work_time_business", "sql": " __dbt__cte__int_zendesk__ticket_work_time_business as (\n\n\nwith ticket_historical_status as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      ticket_historical_status.source_relation,\n      ticket_historical_status.ticket_id,\n      ticket_historical_status.status as ticket_status,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as status_schedule_start,\n      least(valid_ending_at, schedule_invalidated_at) as status_schedule_end,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      ticket_historical_status.valid_starting_at as status_valid_starting_at,\n      ticket_historical_status.valid_ending_at as status_valid_ending_at\n\n    from ticket_historical_status\n    left join ticket_schedules\n      on ticket_historical_status.ticket_id = ticket_schedules.ticket_id\n      and ticket_historical_status.source_relation = ticket_schedules.source_relation\n      -- making sure there is indeed real overlap\n      where \n\n    datetime_diff(\n        cast(least(valid_ending_at, schedule_invalidated_at) as datetime),\n        cast(greatest(valid_starting_at, schedule_created_at) as datetime),\n        second\n    )\n\n   > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      schedule_id,\n      status_schedule_start,\n      status_schedule_end,\n      status_valid_starting_at,\n      status_valid_ending_at,\n    (\n\n    datetime_diff(\n        cast(cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n      (\n\n    datetime_diff(\n        cast(ticket_status_crossed_with_schedule.status_schedule_end as datetime),\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as datetime),\n        second\n    )\n\n   /60\n            ) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp),\n        week\n    ) as date) as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7,8\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_periods as (\n\n    select\n\n      weeks_cross_ticket_full_solved_time.*,\n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods as (\n  \n    select \n      weekly_periods.source_relation,\n      weekly_periods.ticket_id,\n      weekly_periods.week_number,\n      weekly_periods.schedule_id,\n      weekly_periods.ticket_status,\n      weekly_periods.ticket_week_start_time,\n      weekly_periods.ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(weekly_periods.ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n    from weekly_periods\n    join schedule\n      on ticket_week_start_time <= schedule.end_time_utc \n      and ticket_week_end_time >= schedule.start_time_utc\n      and weekly_periods.schedule_id = schedule.schedule_id\n      and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n  \n), business_minutes as (\n  \n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      case when ticket_status in ('pending') then scheduled_minutes\n          else 0 end as agent_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold') then scheduled_minutes\n          else 0 end as requester_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold', 'pending') then scheduled_minutes\n          else 0 end as solve_time_in_minutes,\n      case when ticket_status in ('new', 'open') then scheduled_minutes\n          else 0 end as agent_work_time_in_minutes,\n      case when ticket_status in ('hold') then scheduled_minutes\n          else 0 end as on_hold_time_in_minutes,\n      case when ticket_status = 'new' then scheduled_minutes\n          else 0 end as new_status_duration_minutes,\n      case when ticket_status = 'open' then scheduled_minutes\n          else 0 end as open_status_duration_minutes\n    from intercepted_periods\n\n)\n  \n    select \n      source_relation,\n      ticket_id,\n      sum(agent_wait_time_in_minutes) as agent_wait_time_in_business_minutes,\n      sum(requester_wait_time_in_minutes) as requester_wait_time_in_business_minutes,\n      sum(solve_time_in_minutes) as solve_time_in_business_minutes,\n      sum(agent_work_time_in_minutes) as agent_work_time_in_business_minutes,\n      sum(on_hold_time_in_minutes) as on_hold_time_in_business_minutes,\n      sum(new_status_duration_minutes) as new_status_duration_in_business_minutes,\n      sum(open_status_duration_minutes) as open_status_duration_in_business_minutes\n    from business_minutes\n    group by 1,2\n)"}, {"id": "model.zendesk.int_zendesk__ticket_first_reply_time_business", "sql": " __dbt__cte__int_zendesk__ticket_first_reply_time_business as (\n\n\nwith ticket_reply_times as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_reply_times\n\n), ticket_schedules as (\n\n    select \n      *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), first_reply_time as (\n\n    select\n      source_relation,\n      ticket_id,\n      end_user_comment_created_at,\n      agent_responded_at\n\n    from ticket_reply_times\n    where is_first_comment\n\n), ticket_first_reply_time as (\n\n  select \n    first_reply_time.source_relation,\n    first_reply_time.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(first_reply_time.agent_responded_at) as agent_responded_at,\n\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(first_reply_time.agent_responded_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n  \n  from first_reply_time\n  join ticket_schedules \n    on first_reply_time.ticket_id = ticket_schedules.ticket_id\n    and first_reply_time.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_reply as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_reply_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_first_reply_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n    select \n      weeks_cross_ticket_first_reply.*, \n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    from weeks_cross_ticket_first_reply\n\n), intercepted_periods as (\n\n  select \n      weekly_periods.source_relation,\n      ticket_id,\n      week_number,\n      weekly_periods.schedule_id,\n      ticket_week_start_time,\n      ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n      \n)\n\n  select \n    ticket_id, \n    source_relation,\n    sum(scheduled_minutes) as first_reply_time_business_minutes\n  from intercepted_periods\n  group by 1, 2\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ticket_id"], "time_spine": null}, "model.zendesk.zendesk__ticket_summary": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk__ticket_summary", "resource_type": "model", "package_name": "zendesk", "path": "zendesk__ticket_summary.sql", "original_file_path": "models/zendesk__ticket_summary.sql", "unique_id": "model.zendesk.zendesk__ticket_summary", "fqn": ["zendesk", "zendesk__ticket_summary"], "alias": "zendesk__ticket_summary", "checksum": {"name": "sha256", "checksum": "e25f18f22836f7b504442e493a70a1a1123ad2d56deca970f70b244ba7221228"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "A single record table containing Zendesk ticket and user summary metrics. These metrics are updated for the current day the model is run.", "columns": {"user_count": {"name": "user_count", "description": "Total count of users created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "active_agent_count": {"name": "active_agent_count", "description": "Total count of agents", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted_user_count": {"name": "deleted_user_count", "description": "Total deleted user count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_user_count": {"name": "end_user_count", "description": "Total end user count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "suspended_user_count": {"name": "suspended_user_count", "description": "Total count of users in a suspended state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "new_ticket_count": {"name": "new_ticket_count", "description": "Total count of tickets in the \"new\" status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "on_hold_ticket_count": {"name": "on_hold_ticket_count", "description": "Total count of tickets in the \"hold\" status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "open_ticket_count": {"name": "open_ticket_count", "description": "Total count of tickets in the \"open\" status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pending_ticket_count": {"name": "pending_ticket_count", "description": "Total count of tickets in the \"pending\" status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "solved_ticket_count": {"name": "solved_ticket_count", "description": "Total count of solved tickets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "problem_ticket_count": {"name": "problem_ticket_count", "description": "Total count of tickets labeled as problems", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reassigned_ticket_count": {"name": "reassigned_ticket_count", "description": "Total count of tickets that have been reassigned", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reopened_ticket_count": {"name": "reopened_ticket_count", "description": "Total count of tickets that have been reopened", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "surveyed_satisfaction_ticket_count": {"name": "surveyed_satisfaction_ticket_count", "description": "Total count of tickets that have been surveyed for a satisfaction response", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unassigned_unsolved_ticket_count": {"name": "unassigned_unsolved_ticket_count", "description": "Total count of tickets that are unassigned and unsolved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unreplied_ticket_count": {"name": "unreplied_ticket_count", "description": "Total count of tickets that have not had a reply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unreplied_unsolved_ticket_count": {"name": "unreplied_unsolved_ticket_count", "description": "Total count of tickets that have not had a reply and are unsolved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unsolved_ticket_count": {"name": "unsolved_ticket_count", "description": "Total count of unsolved tickets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assigned_ticket_count": {"name": "assigned_ticket_count", "description": "Total count of assigned tickets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted_ticket_count": {"name": "deleted_ticket_count", "description": "Total count of deleted tickets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recovered_ticket_count": {"name": "recovered_ticket_count", "description": "Total count of tickets that were deleted then reopened", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk://models/zendesk.yml", "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.47414, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_summary`", "raw_code": "with ticket_metrics as (\n    select *\n    from {{ ref('zendesk__ticket_metrics') }}\n\n), user_table as (\n    select *\n    from {{ ref('stg_zendesk__user') }}\n\n), user_sum as (\n    select\n        source_relation,\n        cast(1 as {{ dbt.type_int() }}) as summary_helper,\n        sum(case when is_active = true\n            then 1\n            else 0\n                end) as user_count,\n        sum(case when lower(role) != 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as active_agent_count,\n        sum(case when is_active = false\n            then 1\n            else 0\n                end) as deleted_user_count,\n        sum(case when lower(role) = 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as end_user_count,\n        sum(case when is_suspended = true\n            then 1\n            else 0\n                end) as suspended_user_count\n    from user_table\n\n    group by 1,2\n\n), ticket_metric_sum as (\n    select \n        source_relation,\n        cast(1 as {{ dbt.type_int() }}) as summary_helper,\n        sum(case when lower(status) = 'new'\n            then 1\n            else 0\n                end) as new_ticket_count,\n        sum(case when lower(status) = 'hold'\n            then 1\n            else 0\n                end) as on_hold_ticket_count,\n        sum(case when lower(status) = 'open'\n            then 1\n            else 0\n                end) as open_ticket_count,\n        sum(case when lower(status) = 'pending'\n            then 1\n            else 0\n                end) as pending_ticket_count,\n        sum(case when lower(type) = 'problem'\n            then 1\n            else 0\n                end) as problem_ticket_count,\n        sum(case when first_assignee_id != last_assignee_id\n            then 1\n            else 0\n                end) as reassigned_ticket_count,\n        sum(case when count_reopens > 0\n            then 1\n            else 0\n                end) as reopened_ticket_count,\n\n        sum(case when lower(ticket_satisfaction_score) in ('offered', 'good', 'bad')\n            then 1\n            else 0\n                end) as surveyed_satisfaction_ticket_count,\n\n        sum(case when assignee_id is null and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unassigned_unsolved_ticket_count,\n        sum(case when total_agent_replies < 0\n            then 1\n            else 0\n                end) as unreplied_ticket_count,\n        sum(case when total_agent_replies < 0 and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unreplied_unsolved_ticket_count,\n        sum(case when lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unsolved_ticket_count,\n        sum(case when lower(status) in ('solved', 'closed')\n            then 1\n            else 0\n                end) as solved_ticket_count,\n        sum(case when lower(status) in ('deleted')\n            then 1\n            else 0\n                end) as deleted_ticket_count,\n        sum(case when total_ticket_recoveries > 0\n            then 1\n            else 0\n                end) as recovered_ticket_count,\n        sum(case when assignee_stations_count > 0\n            then 1\n            else 0\n                end) as assigned_ticket_count,\n        count(count_internal_comments) as total_internal_comments,\n        count(count_public_comments) as total_public_comments,\n        count(total_comments)\n    from ticket_metrics\n    \n    group by 1,2\n\n\n), final as (\n    select\n        user_sum.source_relation,\n        user_sum.user_count,\n        user_sum.active_agent_count,\n        user_sum.deleted_user_count,\n        user_sum.end_user_count,\n        user_sum.suspended_user_count,\n        ticket_metric_sum.new_ticket_count,\n        ticket_metric_sum.on_hold_ticket_count,\n        ticket_metric_sum.open_ticket_count,\n        ticket_metric_sum.pending_ticket_count,\n        ticket_metric_sum.solved_ticket_count,\n        ticket_metric_sum.problem_ticket_count,\n        ticket_metric_sum.assigned_ticket_count,\n        ticket_metric_sum.reassigned_ticket_count,\n        ticket_metric_sum.reopened_ticket_count,\n        ticket_metric_sum.surveyed_satisfaction_ticket_count,\n        ticket_metric_sum.unassigned_unsolved_ticket_count,\n        ticket_metric_sum.unreplied_ticket_count,\n        ticket_metric_sum.unreplied_unsolved_ticket_count,\n        ticket_metric_sum.unsolved_ticket_count,\n        ticket_metric_sum.recovered_ticket_count,\n        ticket_metric_sum.deleted_ticket_count\n    from user_sum\n\n    left join ticket_metric_sum\n        on user_sum.summary_helper = ticket_metric_sum.summary_helper\n        and user_sum.source_relation = ticket_metric_sum.source_relation\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_metrics", "package": null, "version": null}, {"name": "stg_zendesk__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_int"], "nodes": ["model.zendesk.zendesk__ticket_metrics", "model.zendesk_source.stg_zendesk__user"]}, "compiled_path": "target/compiled/zendesk/models/zendesk__ticket_summary.sql", "compiled": true, "compiled_code": "with ticket_metrics as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_metrics`\n\n), user_table as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`\n\n), user_sum as (\n    select\n        source_relation,\n        cast(1 as INT64) as summary_helper,\n        sum(case when is_active = true\n            then 1\n            else 0\n                end) as user_count,\n        sum(case when lower(role) != 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as active_agent_count,\n        sum(case when is_active = false\n            then 1\n            else 0\n                end) as deleted_user_count,\n        sum(case when lower(role) = 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as end_user_count,\n        sum(case when is_suspended = true\n            then 1\n            else 0\n                end) as suspended_user_count\n    from user_table\n\n    group by 1,2\n\n), ticket_metric_sum as (\n    select \n        source_relation,\n        cast(1 as INT64) as summary_helper,\n        sum(case when lower(status) = 'new'\n            then 1\n            else 0\n                end) as new_ticket_count,\n        sum(case when lower(status) = 'hold'\n            then 1\n            else 0\n                end) as on_hold_ticket_count,\n        sum(case when lower(status) = 'open'\n            then 1\n            else 0\n                end) as open_ticket_count,\n        sum(case when lower(status) = 'pending'\n            then 1\n            else 0\n                end) as pending_ticket_count,\n        sum(case when lower(type) = 'problem'\n            then 1\n            else 0\n                end) as problem_ticket_count,\n        sum(case when first_assignee_id != last_assignee_id\n            then 1\n            else 0\n                end) as reassigned_ticket_count,\n        sum(case when count_reopens > 0\n            then 1\n            else 0\n                end) as reopened_ticket_count,\n\n        sum(case when lower(ticket_satisfaction_score) in ('offered', 'good', 'bad')\n            then 1\n            else 0\n                end) as surveyed_satisfaction_ticket_count,\n\n        sum(case when assignee_id is null and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unassigned_unsolved_ticket_count,\n        sum(case when total_agent_replies < 0\n            then 1\n            else 0\n                end) as unreplied_ticket_count,\n        sum(case when total_agent_replies < 0 and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unreplied_unsolved_ticket_count,\n        sum(case when lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unsolved_ticket_count,\n        sum(case when lower(status) in ('solved', 'closed')\n            then 1\n            else 0\n                end) as solved_ticket_count,\n        sum(case when lower(status) in ('deleted')\n            then 1\n            else 0\n                end) as deleted_ticket_count,\n        sum(case when total_ticket_recoveries > 0\n            then 1\n            else 0\n                end) as recovered_ticket_count,\n        sum(case when assignee_stations_count > 0\n            then 1\n            else 0\n                end) as assigned_ticket_count,\n        count(count_internal_comments) as total_internal_comments,\n        count(count_public_comments) as total_public_comments,\n        count(total_comments)\n    from ticket_metrics\n    \n    group by 1,2\n\n\n), final as (\n    select\n        user_sum.source_relation,\n        user_sum.user_count,\n        user_sum.active_agent_count,\n        user_sum.deleted_user_count,\n        user_sum.end_user_count,\n        user_sum.suspended_user_count,\n        ticket_metric_sum.new_ticket_count,\n        ticket_metric_sum.on_hold_ticket_count,\n        ticket_metric_sum.open_ticket_count,\n        ticket_metric_sum.pending_ticket_count,\n        ticket_metric_sum.solved_ticket_count,\n        ticket_metric_sum.problem_ticket_count,\n        ticket_metric_sum.assigned_ticket_count,\n        ticket_metric_sum.reassigned_ticket_count,\n        ticket_metric_sum.reopened_ticket_count,\n        ticket_metric_sum.surveyed_satisfaction_ticket_count,\n        ticket_metric_sum.unassigned_unsolved_ticket_count,\n        ticket_metric_sum.unreplied_ticket_count,\n        ticket_metric_sum.unreplied_unsolved_ticket_count,\n        ticket_metric_sum.unsolved_ticket_count,\n        ticket_metric_sum.recovered_ticket_count,\n        ticket_metric_sum.deleted_ticket_count\n    from user_sum\n\n    left join ticket_metric_sum\n        on user_sum.summary_helper = ticket_metric_sum.summary_helper\n        and user_sum.source_relation = ticket_metric_sum.source_relation\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.zendesk__ticket_field_history": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk__ticket_field_history", "resource_type": "model", "package_name": "zendesk", "path": "zendesk__ticket_field_history.sql", "original_file_path": "models/zendesk__ticket_field_history.sql", "unique_id": "model.zendesk.zendesk__ticket_field_history", "fqn": ["zendesk", "zendesk__ticket_field_history"], "alias": "zendesk__ticket_field_history", "checksum": {"name": "sha256", "checksum": "b7adaa3016d14ecce13ea4bc799ba7855ec8d74fa074f893ed5c642203bb2329"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ticket_day_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "partition_by": {"field": "date_day", "data_type": "date", "granularity": "month"}, "file_format": "delta"}, "tags": [], "description": "A daily historical view of the ticket field values defined in the `ticket_field_history_columns` variable  and the corresponding updater fields defined in the `ticket_field_history_updater_columns` variable.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the day associated with the field values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "A ticket's unique identifier, it is automatically assigned when the ticket is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_day_id": {"name": "ticket_day_id", "description": "The unique key of the table, a surrogate key of `date_day`, `ticket_id`, and `source_relation`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_id": {"name": "assignee_id", "description": "The assignee id assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The status of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "priority": {"name": "priority", "description": "The tickets priority ranking", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk://models/zendesk.yml", "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "incremental", "partition_by": {"field": "date_day", "data_type": "date", "granularity": "month"}, "unique_key": "ticket_day_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1751990097.4592252, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_field_history`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date', 'granularity': 'month' } if target.type not in ['spark', 'databricks'] else ['date_day'],\n        unique_key='ticket_day_id',\n        incremental_strategy = 'merge' if target.type not in ('snowflake', 'postgres', 'redshift') else 'delete+insert',\n        file_format='delta'\n        ) \n}}\n\n{%- set change_data_columns = adapter.get_columns_in_relation(ref('int_zendesk__field_history_scd')) -%}\n\nwith change_data as (\n\n    select *\n    from {{ ref('int_zendesk__field_history_scd') }}\n  \n    {% if is_incremental() %}\n    where valid_from >= (select max(date_day) from {{ this }})\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n\n    select \n        *\n    from {{ this }}\n    where date_day = (select max(date_day) from {{ this }} )\n\n{% endif %}\n\n), calendar as (\n\n    select *\n    from {{ ref('int_zendesk__field_calendar_spine') }}\n    where date_day <= current_date\n    {% if is_incremental() %}\n    and date_day >= (select max(date_day) from {{ this }})\n    {% endif %}\n\n), joined as (\n\n    select \n        calendar.source_relation,\n        calendar.date_day,\n        calendar.ticket_id\n        {% if is_incremental() %}    \n            {% for col in change_data_columns if col.name|lower not in ['source_relation','ticket_id','valid_from','valid_to','ticket_day_id'] %} \n            , coalesce(change_data.{{ col.name }}, most_recent_data.{{ col.name }}) as {{ col.name }}\n            {% endfor %}\n        \n        {% else %}\n            {% for col in change_data_columns if col.name|lower not in ['source_relation','ticket_id','valid_from','valid_to','ticket_day_id'] %} \n            , {{ col.name }}\n            {% endfor %}\n        {% endif %}\n\n    from calendar\n    left join change_data\n        on calendar.ticket_id = change_data.ticket_id\n        and calendar.date_day = change_data.valid_from\n        and calendar.source_relation = change_data.source_relation\n    \n    {% if is_incremental() %}\n    left join most_recent_data\n        on calendar.ticket_id = most_recent_data.ticket_id\n        and calendar.date_day = most_recent_data.date_day\n        and calendar.source_relation = most_recent_data.source_relation\n    {% endif %}\n\n), set_values as (\n\n    select\n        source_relation,\n        date_day,\n        ticket_id\n\n        {% for col in change_data_columns if col.name|lower not in ['source_relation','ticket_id','valid_from','valid_to','ticket_day_id'] %}\n        , {{ col.name }}\n        -- create a batch/partition once a new value is provided\n        , sum( case when {{ col.name }} is null then 0 else 1 end) over ( partition by source_relation, ticket_id\n            order by date_day rows unbounded preceding) as {{ col.name }}_field_partition\n\n        {% endfor %}\n\n    from joined\n),\n\nfill_values as (\n\n    select  \n        source_relation,\n        date_day,\n        ticket_id\n\n        {% for col in change_data_columns if col.name|lower not in ['source_relation','ticket_id','valid_from','valid_to','ticket_day_id'] %}\n        -- grab the value that started this batch/partition\n        , first_value( {{ col.name }} ) over (\n            partition by source_relation, ticket_id, {{ col.name }}_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as {{ col.name }}\n        {% endfor %}\n\n    from set_values\n\n), fix_null_values as (\n\n    select  \n        source_relation, \n        date_day,\n        ticket_id\n        {% for col in change_data_columns if col.name|lower not in  ['source_relation','ticket_id','valid_from','valid_to','ticket_day_id'] %} \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( {{ col.name }} as {{ dbt.type_string() }} ) = 'is_null' then null else {{ col.name }} end as {{ col.name }}\n        {% endfor %}\n\n    from fill_values\n\n), surrogate_key as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['source_relation','date_day','ticket_id']) }} as ticket_day_id,\n        *\n\n    from fix_null_values\n)\n\nselect *\nfrom surrogate_key", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__field_history_scd", "package": null, "version": null}, {"name": "int_zendesk__field_history_scd", "package": null, "version": null}, {"name": "int_zendesk__field_calendar_spine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.type_string"], "nodes": ["model.zendesk.int_zendesk__field_history_scd", "model.zendesk.int_zendesk__field_calendar_spine"]}, "compiled_path": "target/compiled/zendesk/models/zendesk__ticket_field_history.sql", "compiled": true, "compiled_code": "with change_data as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_history_scd`\n  \n    \n    where valid_from >= (select max(date_day) from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_field_history`)\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n\n    select \n        *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_field_history`\n    where date_day = (select max(date_day) from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_field_history` )\n\n\n\n), calendar as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_calendar_spine`\n    where date_day <= current_date\n    \n    and date_day >= (select max(date_day) from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_field_history`)\n    \n\n), joined as (\n\n    select \n        calendar.source_relation,\n        calendar.date_day,\n        calendar.ticket_id\n            \n             \n            , coalesce(change_data.assignee_id, most_recent_data.assignee_id) as assignee_id\n             \n            , coalesce(change_data.status, most_recent_data.status) as status\n             \n            , coalesce(change_data.priority, most_recent_data.priority) as priority\n            \n        \n        \n\n    from calendar\n    left join change_data\n        on calendar.ticket_id = change_data.ticket_id\n        and calendar.date_day = change_data.valid_from\n        and calendar.source_relation = change_data.source_relation\n    \n    \n    left join most_recent_data\n        on calendar.ticket_id = most_recent_data.ticket_id\n        and calendar.date_day = most_recent_data.date_day\n        and calendar.source_relation = most_recent_data.source_relation\n    \n\n), set_values as (\n\n    select\n        source_relation,\n        date_day,\n        ticket_id\n\n        \n        , assignee_id\n        -- create a batch/partition once a new value is provided\n        , sum( case when assignee_id is null then 0 else 1 end) over ( partition by source_relation, ticket_id\n            order by date_day rows unbounded preceding) as assignee_id_field_partition\n\n        \n        , status\n        -- create a batch/partition once a new value is provided\n        , sum( case when status is null then 0 else 1 end) over ( partition by source_relation, ticket_id\n            order by date_day rows unbounded preceding) as status_field_partition\n\n        \n        , priority\n        -- create a batch/partition once a new value is provided\n        , sum( case when priority is null then 0 else 1 end) over ( partition by source_relation, ticket_id\n            order by date_day rows unbounded preceding) as priority_field_partition\n\n        \n\n    from joined\n),\n\nfill_values as (\n\n    select  \n        source_relation,\n        date_day,\n        ticket_id\n\n        \n        -- grab the value that started this batch/partition\n        , first_value( assignee_id ) over (\n            partition by source_relation, ticket_id, assignee_id_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as assignee_id\n        \n        -- grab the value that started this batch/partition\n        , first_value( status ) over (\n            partition by source_relation, ticket_id, status_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status\n        \n        -- grab the value that started this batch/partition\n        , first_value( priority ) over (\n            partition by source_relation, ticket_id, priority_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as priority\n        \n\n    from set_values\n\n), fix_null_values as (\n\n    select  \n        source_relation, \n        date_day,\n        ticket_id\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( assignee_id as string ) = 'is_null' then null else assignee_id end as assignee_id\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( status as string ) = 'is_null' then null else status end as status\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( priority as string ) = 'is_null' then null else priority end as priority\n        \n\n    from fill_values\n\n), surrogate_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') as string))) as ticket_day_id,\n        *\n\n    from fix_null_values\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.zendesk__sla_policies": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk__sla_policies", "resource_type": "model", "package_name": "zendesk", "path": "zendesk__sla_policies.sql", "original_file_path": "models/zendesk__sla_policies.sql", "unique_id": "model.zendesk.zendesk__sla_policies", "fqn": ["zendesk", "zendesk__sla_policies"], "alias": "zendesk__sla_policies", "checksum": {"name": "sha256", "checksum": "f4edee19e44328c5e34aed2214ed23617b8386202c13bca08aa5dcef192e3fe4"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents an SLA policy event and additional sla breach and achievement metrics. Calendar and business hour SLA breaches for `first_reply_time`, `next_reply_time`, `requester_wait_time`, and `agent_work_time` are supported. If there is a SLA you would like supported that is not included, please create a feature request.", "columns": {"sla_event_id": {"name": "sla_event_id", "description": "A surrogate key generated from the combination of `ticket_id`, `metric`, `sla_applied_at`, and `source_relation` fields", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "A ticket's unique identifier, it is automatically assigned when the ticket is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sla_policy_name": {"name": "sla_policy_name", "description": "The name of the SLA policy associated with the SLA metric", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "metric": {"name": "metric", "description": "The SLA metric, either agent_work_time, requester_wait_time, first_reply_time or next_reply_time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sla_applied_at": {"name": "sla_applied_at", "description": "When the SLA target was triggered. This is the starting time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target": {"name": "target", "description": "The SLA target, in minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "in_business_hours": {"name": "in_business_hours", "description": "Boolean field indicating if the SLA target is in business hours (true) or calendar hours (false)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sla_breach_at": {"name": "sla_breach_at", "description": "The time or expected time of the SLA breach or achieve event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sla_elapsed_time": {"name": "sla_elapsed_time", "description": "The total elapsed time to achieve the SLA metric whether breached or achieved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active_sla": {"name": "is_active_sla", "description": "Boolean field indicating that the SLA event is currently active and not breached (true) or past (false)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_sla_breach": {"name": "is_sla_breach", "description": "Boolean field indicating if the SLA has been breached (true) or was achieved (false)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk://models/zendesk.yml", "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.4585128, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__sla_policies`", "raw_code": "--final step where we union together all of the reply time, agent work time, and requester wait time sla's\n\nwith reply_time_sla as (\n\n  select * \n  from {{ ref('int_zendesk__reply_time_combined') }}\n\n), agent_work_calendar_sla as (\n\n  select *\n  from {{ ref('int_zendesk__agent_work_time_calendar_hours') }}\n\n), requester_wait_calendar_sla as (\n\n  select *\n  from {{ ref('int_zendesk__requester_wait_time_calendar_hours') }}\n\n{% if var('using_schedules', True) %}\n\n), agent_work_business_sla as (\n\n  select *\n  from {{ ref('int_zendesk__agent_work_time_business_hours') }}\n\n), requester_wait_business_sla as (\n  select *\n  from {{ ref('int_zendesk__requester_wait_time_business_hours') }}\n\n{% endif %}\n\n), all_slas_unioned as (\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    sla_applied_at,\n    target,\n    in_business_hours,\n    sla_update_at as sla_breach_at,\n    sla_elapsed_time,\n    is_sla_breached\n  from reply_time_sla\n\nunion all\n\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    {{ fivetran_utils.max_bool(\"is_breached_during_schedule\") }} as is_sla_breached\n  from agent_work_calendar_sla\n\n  {{ dbt_utils.group_by(n=7) }}\n\nunion all\n\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'requester_wait_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    {{ fivetran_utils.max_bool(\"is_breached_during_schedule\") }} as is_sla_breached\n  from requester_wait_calendar_sla\n\n  {{ dbt_utils.group_by(n=7) }}\n\n\n{% if var('using_schedules', True) %}\n\nunion all \n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    true as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_scheduled_minutes) as sla_elapsed_time,\n    {{ fivetran_utils.max_bool(\"is_breached_during_schedule\") }} as is_sla_breached\n  from agent_work_business_sla\n  \n  {{ dbt_utils.group_by(n=7) }}\n\nunion all \n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'requester_wait_time' as metric,\n    sla_applied_at,\n    target,\n    true as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_scheduled_minutes) as sla_elapsed_time,\n    {{ fivetran_utils.max_bool(\"is_breached_during_schedule\") }} as is_sla_breached\n    \n  from requester_wait_business_sla\n  \n  {{ dbt_utils.group_by(n=7) }}\n\n{% endif %}\n\n)\n\nselect \n  {{ dbt_utils.generate_surrogate_key(['source_relation', 'ticket_id', 'metric', 'sla_applied_at']) }} as sla_event_id,\n  source_relation,\n  ticket_id,\n  sla_policy_name,\n  metric,\n  sla_applied_at,\n  target,\n  in_business_hours,\n  sla_breach_at,\n  case when sla_elapsed_time is null\n    then round(({{ dbt.datediff(\"sla_applied_at\", dbt.current_timestamp(), 'second') }} / 60), 4)  --This will create an entry for active sla's\n    else round(sla_elapsed_time, 4)\n      end as sla_elapsed_time,\n  sla_breach_at > current_timestamp as is_active_sla,\n  case when (sla_breach_at > {{ dbt.current_timestamp() }})\n    then null\n    else is_sla_breached\n      end as is_sla_breach\nfrom all_slas_unioned", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__reply_time_combined", "package": null, "version": null}, {"name": "int_zendesk__agent_work_time_calendar_hours", "package": null, "version": null}, {"name": "int_zendesk__requester_wait_time_calendar_hours", "package": null, "version": null}, {"name": "int_zendesk__agent_work_time_business_hours", "package": null, "version": null}, {"name": "int_zendesk__requester_wait_time_business_hours", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.max_bool", "macro.dbt_utils.group_by", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.current_timestamp", "macro.dbt.datediff"], "nodes": ["model.zendesk.int_zendesk__reply_time_combined", "model.zendesk.int_zendesk__agent_work_time_calendar_hours", "model.zendesk.int_zendesk__requester_wait_time_calendar_hours", "model.zendesk.int_zendesk__agent_work_time_business_hours", "model.zendesk.int_zendesk__requester_wait_time_business_hours"]}, "compiled_path": "target/compiled/zendesk/models/zendesk__sla_policies.sql", "compiled": true, "compiled_code": "--final step where we union together all of the reply time, agent work time, and requester wait time sla's\n\nwith reply_time_sla as (\n\n  select * \n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__reply_time_combined`\n\n), agent_work_calendar_sla as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__agent_work_time_calendar_hours`\n\n), requester_wait_calendar_sla as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_wait_time_calendar_hours`\n\n\n\n), agent_work_business_sla as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__agent_work_time_business_hours`\n\n), requester_wait_business_sla as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_wait_time_business_hours`\n\n\n\n), all_slas_unioned as (\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    sla_applied_at,\n    target,\n    in_business_hours,\n    sla_update_at as sla_breach_at,\n    sla_elapsed_time,\n    is_sla_breached\n  from reply_time_sla\n\nunion all\n\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    \n\n    max( is_breached_during_schedule )\n\n as is_sla_breached\n  from agent_work_calendar_sla\n\n  group by 1,2,3,4,5,6,7\n\nunion all\n\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'requester_wait_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    \n\n    max( is_breached_during_schedule )\n\n as is_sla_breached\n  from requester_wait_calendar_sla\n\n  group by 1,2,3,4,5,6,7\n\n\n\n\nunion all \n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    true as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_scheduled_minutes) as sla_elapsed_time,\n    \n\n    max( is_breached_during_schedule )\n\n as is_sla_breached\n  from agent_work_business_sla\n  \n  group by 1,2,3,4,5,6,7\n\nunion all \n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    'requester_wait_time' as metric,\n    sla_applied_at,\n    target,\n    true as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_scheduled_minutes) as sla_elapsed_time,\n    \n\n    max( is_breached_during_schedule )\n\n as is_sla_breached\n    \n  from requester_wait_business_sla\n  \n  group by 1,2,3,4,5,6,7\n\n\n\n)\n\nselect \n  to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(metric as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sla_applied_at as string), '_dbt_utils_surrogate_key_null_') as string))) as sla_event_id,\n  source_relation,\n  ticket_id,\n  sla_policy_name,\n  metric,\n  sla_applied_at,\n  target,\n  in_business_hours,\n  sla_breach_at,\n  case when sla_elapsed_time is null\n    then round((\n\n    datetime_diff(\n        cast(current_timestamp() as datetime),\n        cast(sla_applied_at as datetime),\n        second\n    )\n\n   / 60), 4)  --This will create an entry for active sla's\n    else round(sla_elapsed_time, 4)\n      end as sla_elapsed_time,\n  sla_breach_at > current_timestamp as is_active_sla,\n  case when (sla_breach_at > current_timestamp())\n    then null\n    else is_sla_breached\n      end as is_sla_breach\nfrom all_slas_unioned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["sla_event_id", "source_relation"], "time_spine": null}, "model.zendesk.zendesk__ticket_backlog": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk__ticket_backlog", "resource_type": "model", "package_name": "zendesk", "path": "zendesk__ticket_backlog.sql", "original_file_path": "models/zendesk__ticket_backlog.sql", "unique_id": "model.zendesk.zendesk__ticket_backlog", "fqn": ["zendesk", "zendesk__ticket_backlog"], "alias": "zendesk__ticket_backlog", "checksum": {"name": "sha256", "checksum": "eb95708bf84ae5a42b28ac7707663c4f1c2b629f74db8c35576b21853a4b136f"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "A daily historical view of the ticket field values defined in the `ticket_field_history_columns` variable  for all backlog tickets. Backlog tickets being defined as any ticket not a 'closed', 'deleted', or 'solved' status.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the day associated with the field values", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "A ticket's unique identifier, it is automatically assigned when the ticket is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The status of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_channel": {"name": "created_channel", "description": "The channel where the ticket was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_name": {"name": "assignee_name", "description": "The assignee name assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "priority": {"name": "priority", "description": "The tickets priority ranking", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk://models/zendesk.yml", "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990097.474559, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_backlog`", "raw_code": "--This model will only run if 'status' is included within the `ticket_field_history_columns` variable.\n{{ config(enabled = 'status' in var('ticket_field_history_columns')) }}\n\nwith ticket_field_history as (\n    select *\n    from {{ ref('zendesk__ticket_field_history') }}\n\n), tickets as (\n    select *\n    from {{ ref('stg_zendesk__ticket') }}\n\n), group_names as (\n    select *\n    from {{ ref('stg_zendesk__group') }}\n\n), users as (\n    select *\n    from {{ ref('stg_zendesk__user') }}\n\n{% if var('using_brands', True) %}\n), brands as (\n    select *\n    from {{ ref('stg_zendesk__brand') }}\n{% endif %}\n\n--The below model is excluded if the user does not include ticket_form_id in the variable as a low percentage of accounts use ticket forms.\n{% if 'ticket_form_id' in var('ticket_field_history_columns') %}\n), ticket_forms as (\n    select *\n    from {{ ref('int_zendesk__latest_ticket_form') }}\n{% endif %}\n\n--If using organizations, this will be included, if not it will be ignored.\n{% if var('using_organizations', True) %}\n), organizations as (\n    select *\n    from {{ ref('stg_zendesk__organization') }}\n{% endif %}\n\n), backlog as (\n    select\n        ticket_field_history.source_relation,\n        ticket_field_history.date_day\n        ,ticket_field_history.ticket_id\n        ,ticket_field_history.status\n        ,tickets.created_channel\n        {% for col in var('ticket_field_history_columns') if col != 'status' %} --Looking at all history fields the users passed through in their dbt_project.yml file\n            {% if col in ['assignee_id'] %} --Standard ID field where the name can easily be joined from stg model.\n                ,assignee.name as assignee_name\n\n            {% elif col in ['requester_id'] %} --Standard ID field where the name can easily be joined from stg model.\n                ,requester.name as requester_name\n\n            {% elif col in ['ticket_form_id'] %} --Standard ID field where the name can easily be joined from stg model.\n                ,ticket_forms.name as ticket_form_name\n\n            {% elif var('using_organizations', True) and col in ['organization_id'] %} --Standard ID field where the name can easily be joined from stg model.\n                ,organizations.name as organization_name\n\n            {% elif var('using_brands', True) and col in ['brand_id'] %} --Standard ID field where the name can easily be joined from stg model.\n                ,brands.name as brand_name\n\n            {% elif col in ['group_id'] %} --Standard ID field where the name can easily be joined from stg model.\n                ,group_names.name as group_name\n\n            {% elif col in ['locale_id'] %} --Standard ID field where the name can easily be joined from stg model.\n                ,assignee.locale as local_name\n\n            {% else %} --All other fields are not ID's and can simply be included in the query.\n                ,ticket_field_history.{{ col }}\n            {% endif %}\n        {% endfor %}\n\n    from ticket_field_history\n\n    left join tickets\n        on tickets.ticket_id = ticket_field_history.ticket_id\n        and tickets.source_relation = ticket_field_history.source_relation\n\n    {% if 'ticket_form_id' in var('ticket_field_history_columns') %} --Join not needed if field is not located in variable, otherwise it is included.\n    left join ticket_forms\n        on ticket_forms.ticket_form_id = cast(ticket_field_history.ticket_form_id as {{ dbt.type_bigint() }})\n        and ticket_forms.source_relation = ticket_field_history.source_relation\n    {% endif %}\n\n    {% if 'group_id' in var('ticket_field_history_columns') %}--Join not needed if field is not located in variable, otherwise it is included.\n    left join group_names\n        on group_names.group_id = cast(ticket_field_history.group_id as {{ dbt.type_bigint() }})\n        and group_names.source_relation = ticket_field_history.source_relation\n    {% endif %}\n\n    {% if 'assignee_id' in var('ticket_field_history_columns') or 'requester_id' in var('ticket_field_history_columns') or 'locale_id' in var('ticket_field_history_columns')%} --Join not needed if fields is not located in variable, otherwise it is included.\n    left join users as assignee\n        on assignee.user_id = cast(ticket_field_history.assignee_id as {{ dbt.type_bigint() }})\n        and assignee.source_relation = ticket_field_history.source_relation\n    {% endif %}\n\n    {% if 'requester_id' in var('ticket_field_history_columns') %} --Join not needed if field is not located in variable, otherwise it is included.\n    left join users as requester\n        on requester.user_id = cast(ticket_field_history.requester_id as {{ dbt.type_bigint() }})\n        and requester.source_relation = ticket_field_history.source_relation\n    {% endif %}\n\n    {% if var('using_brands', True) and 'brand_id' in var('ticket_field_history_columns') %} --Join not needed if field is not located in variable, otherwise it is included.\n    left join brands\n        on brands.brand_id = cast(ticket_field_history.brand_id as {{ dbt.type_bigint() }})\n        and brands.source_relation = ticket_field_history.source_relation\n    {% endif %}\n\n    {% if var('using_organizations', True) and 'organization_id' in var('ticket_field_history_columns') %} --Join not needed if field is not located in variable, otherwise it is included.\n    left join organizations\n        on organizations.organization_id = cast(ticket_field_history.organization_id as {{ dbt.type_bigint() }})\n        and organizations.source_relation = ticket_field_history.source_relation\n    {% endif %}\n\n    where ticket_field_history.status not in ('closed', 'solved', 'deleted')\n)\n\nselect *\nfrom backlog", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_field_history", "package": null, "version": null}, {"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "stg_zendesk__group", "package": null, "version": null}, {"name": "stg_zendesk__user", "package": null, "version": null}, {"name": "stg_zendesk__brand", "package": null, "version": null}, {"name": "stg_zendesk__organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_bigint"], "nodes": ["model.zendesk.zendesk__ticket_field_history", "model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__group", "model.zendesk_source.stg_zendesk__user", "model.zendesk_source.stg_zendesk__brand", "model.zendesk_source.stg_zendesk__organization"]}, "compiled_path": "target/compiled/zendesk/models/zendesk__ticket_backlog.sql", "compiled": true, "compiled_code": "--This model will only run if 'status' is included within the `ticket_field_history_columns` variable.\n\n\nwith ticket_field_history as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_field_history`\n\n), tickets as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), group_names as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__group`\n\n), users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`\n\n\n), brands as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__brand`\n\n\n--The below model is excluded if the user does not include ticket_form_id in the variable as a low percentage of accounts use ticket forms.\n\n\n--If using organizations, this will be included, if not it will be ignored.\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization`\n\n\n), backlog as (\n    select\n        ticket_field_history.source_relation,\n        ticket_field_history.date_day\n        ,ticket_field_history.ticket_id\n        ,ticket_field_history.status\n        ,tickets.created_channel\n         --Looking at all history fields the users passed through in their dbt_project.yml file\n             --Standard ID field where the name can easily be joined from stg model.\n                ,assignee.name as assignee_name\n\n            \n         --Looking at all history fields the users passed through in their dbt_project.yml file\n             --All other fields are not ID's and can simply be included in the query.\n                ,ticket_field_history.priority\n            \n        \n\n    from ticket_field_history\n\n    left join tickets\n        on tickets.ticket_id = ticket_field_history.ticket_id\n        and tickets.source_relation = ticket_field_history.source_relation\n\n    \n\n    \n\n     --Join not needed if fields is not located in variable, otherwise it is included.\n    left join users as assignee\n        on assignee.user_id = cast(ticket_field_history.assignee_id as bigint)\n        and assignee.source_relation = ticket_field_history.source_relation\n    \n\n    \n\n    \n\n    \n\n    where ticket_field_history.status not in ('closed', 'solved', 'deleted')\n)\n\nselect *\nfrom backlog", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__sla_policy_applied": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__sla_policy_applied", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/int_zendesk__sla_policy_applied.sql", "original_file_path": "models/sla_policy/int_zendesk__sla_policy_applied.sql", "unique_id": "model.zendesk.int_zendesk__sla_policy_applied", "fqn": ["zendesk", "sla_policy", "int_zendesk__sla_policy_applied"], "alias": "int_zendesk__sla_policy_applied", "checksum": {"name": "sha256", "checksum": "64a61c06f4a280c7e302a0e692d042fc45374aec747fa7a70a468daa1384c89c"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.740278, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__sla_policy_applied`", "raw_code": "-- step 1, figure out when sla was applied to tickets\n\n-- more on SLA policies here: https://support.zendesk.com/hc/en-us/articles/204770038-Defining-and-using-SLA-policies-Professional-and-Enterprise-\n-- SLA policies are calculated for next_reply_time, first_reply_time, agent_work_time, requester_wait_time.  If you're company uses other SLA metrics, and would like this\n-- package to support those, please reach out to the Fivetran team on Slack.\n\nwith ticket_field_history as (\n\n  select *\n  from {{ ref('int_zendesk__updates') }}\n\n), sla_policy_name as (\n\n  select \n    *\n  from {{ ref('int_zendesk__updates') }}\n  where field_name = ('sla_policy')\n\n), ticket as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_aggregates') }}\n\n), sla_policy_applied as (\n\n  select\n    ticket_field_history.source_relation,\n    ticket_field_history.ticket_id,\n    ticket.created_at as ticket_created_at,\n    ticket_field_history.valid_starting_at,\n    ticket.status as ticket_current_status,\n    ticket_field_history.field_name as metric,\n    case when ticket_field_history.field_name = 'first_reply_time' then row_number() over (partition by ticket_field_history.source_relation, ticket_field_history.ticket_id, ticket_field_history.field_name order by ticket_field_history.valid_starting_at desc) else 1 end as latest_sla,\n    case when ticket_field_history.field_name = 'first_reply_time' then ticket.created_at else ticket_field_history.valid_starting_at end as sla_applied_at,\n    cast({{ fivetran_utils.json_parse('ticket_field_history.value', ['minutes']) }} as {{ dbt.type_int() }} ) as target,\n    {{ fivetran_utils.json_parse('ticket_field_history.value', ['in_business_hours']) }} = 'true' as in_business_hours\n  from ticket_field_history\n  join ticket\n    on ticket.ticket_id = ticket_field_history.ticket_id\n    and ticket.source_relation = ticket_field_history.source_relation\n  where ticket_field_history.value is not null\n    and ticket_field_history.field_name in ('next_reply_time', 'first_reply_time', 'agent_work_time', 'requester_wait_time')\n\n), final as (\n  select\n    sla_policy_applied.*,\n    sla_policy_name.value as sla_policy_name\n  from sla_policy_applied\n  left join sla_policy_name\n    on sla_policy_name.ticket_id = sla_policy_applied.ticket_id\n    and sla_policy_name.source_relation = sla_policy_applied.source_relation\n      and {{ dbt.date_trunc(\"second\", \"sla_policy_applied.valid_starting_at\") }} >= {{ dbt.date_trunc(\"second\", \"sla_policy_name.valid_starting_at\") }}\n      and {{ dbt.date_trunc(\"second\", \"sla_policy_applied.valid_starting_at\") }} < coalesce({{ dbt.date_trunc(\"second\", \"sla_policy_name.valid_ending_at\") }}, {{ dbt.current_timestamp() }})\n  where sla_policy_applied.latest_sla = 1\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}, {"name": "int_zendesk__updates", "package": null, "version": null}, {"name": "int_zendesk__ticket_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.json_parse", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt.current_timestamp"], "nodes": ["model.zendesk.int_zendesk__updates", "model.zendesk.int_zendesk__ticket_aggregates"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/int_zendesk__sla_policy_applied.sql", "compiled": true, "compiled_code": "-- step 1, figure out when sla was applied to tickets\n\n-- more on SLA policies here: https://support.zendesk.com/hc/en-us/articles/204770038-Defining-and-using-SLA-policies-Professional-and-Enterprise-\n-- SLA policies are calculated for next_reply_time, first_reply_time, agent_work_time, requester_wait_time.  If you're company uses other SLA metrics, and would like this\n-- package to support those, please reach out to the Fivetran team on Slack.\n\nwith ticket_field_history as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), sla_policy_name as (\n\n  select \n    *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n  where field_name = ('sla_policy')\n\n), ticket as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_aggregates`\n\n), sla_policy_applied as (\n\n  select\n    ticket_field_history.source_relation,\n    ticket_field_history.ticket_id,\n    ticket.created_at as ticket_created_at,\n    ticket_field_history.valid_starting_at,\n    ticket.status as ticket_current_status,\n    ticket_field_history.field_name as metric,\n    case when ticket_field_history.field_name = 'first_reply_time' then row_number() over (partition by ticket_field_history.source_relation, ticket_field_history.ticket_id, ticket_field_history.field_name order by ticket_field_history.valid_starting_at desc) else 1 end as latest_sla,\n    case when ticket_field_history.field_name = 'first_reply_time' then ticket.created_at else ticket_field_history.valid_starting_at end as sla_applied_at,\n    cast(\n\n \n  json_extract_scalar(ticket_field_history.value, '$.minutes')\n\n as INT64 ) as target,\n    \n\n \n  json_extract_scalar(ticket_field_history.value, '$.in_business_hours')\n\n = 'true' as in_business_hours\n  from ticket_field_history\n  join ticket\n    on ticket.ticket_id = ticket_field_history.ticket_id\n    and ticket.source_relation = ticket_field_history.source_relation\n  where ticket_field_history.value is not null\n    and ticket_field_history.field_name in ('next_reply_time', 'first_reply_time', 'agent_work_time', 'requester_wait_time')\n\n), final as (\n  select\n    sla_policy_applied.*,\n    sla_policy_name.value as sla_policy_name\n  from sla_policy_applied\n  left join sla_policy_name\n    on sla_policy_name.ticket_id = sla_policy_applied.ticket_id\n    and sla_policy_name.source_relation = sla_policy_applied.source_relation\n      and timestamp_trunc(\n        cast(sla_policy_applied.valid_starting_at as timestamp),\n        second\n    ) >= timestamp_trunc(\n        cast(sla_policy_name.valid_starting_at as timestamp),\n        second\n    )\n      and timestamp_trunc(\n        cast(sla_policy_applied.valid_starting_at as timestamp),\n        second\n    ) < coalesce(timestamp_trunc(\n        cast(sla_policy_name.valid_ending_at as timestamp),\n        second\n    ), current_timestamp())\n  where sla_policy_applied.latest_sla = 1\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__agent_work_time_business_hours": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__agent_work_time_business_hours", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/agent_work_time/int_zendesk__agent_work_time_business_hours.sql", "original_file_path": "models/sla_policy/agent_work_time/int_zendesk__agent_work_time_business_hours.sql", "unique_id": "model.zendesk.int_zendesk__agent_work_time_business_hours", "fqn": ["zendesk", "sla_policy", "agent_work_time", "int_zendesk__agent_work_time_business_hours"], "alias": "int_zendesk__agent_work_time_business_hours", "checksum": {"name": "sha256", "checksum": "c8cc7b363f623b4c353c53ecc17881a6aead323f3467ba22ffbbdb2f3dafddb3"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.747947, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__agent_work_time_business_hours`", "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\n-- AGENT WORK TIME\n-- This is complicated, as SLAs minutes are only counted while the ticket is in 'new' or 'open' status.\n\n-- Additionally, for business hours, only 'new' or 'open' status hours are counted if they are also during business hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from {{ ref('int_zendesk__agent_work_time_filtered_statuses') }}\n  where in_business_hours\n\n), schedule as (\n\n  select * \n  from {{ ref('int_zendesk__schedule_spine') }}\n\n), ticket_schedules as (\n\n  select * \n  from {{ ref('int_zendesk__ticket_schedules') }}\n  \n-- cross schedules with work time\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      agent_work_time_filtered_statuses.source_relation,\n      agent_work_time_filtered_statuses.ticket_id,\n      agent_work_time_filtered_statuses.sla_applied_at,\n      agent_work_time_filtered_statuses.target,    \n      agent_work_time_filtered_statuses.sla_policy_name,    \n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as valid_starting_at,\n      least(valid_ending_at, schedule_invalidated_at) as valid_ending_at,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      valid_starting_at as status_valid_starting_at,\n      valid_ending_at as status_valid_ending_at\n\n    from agent_work_time_filtered_statuses\n    left join ticket_schedules\n      on agent_work_time_filtered_statuses.ticket_id = ticket_schedules.ticket_id\n      and agent_work_time_filtered_statuses.source_relation = ticket_schedules.source_relation\n    where {{ dbt.datediff(\n              'greatest(valid_starting_at, schedule_created_at)', \n              'least(valid_ending_at, schedule_invalidated_at)', \n              'second') }} > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      target,    \n      sla_policy_name,    \n      schedule_id,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      ({{ dbt.datediff(\n              \"cast(\" ~ zendesk.fivetran_week_start('ticket_status_crossed_with_schedule.valid_starting_at') ~ \"as \" ~ dbt.type_timestamp() ~ \")\", \n              \"cast(ticket_status_crossed_with_schedule.valid_starting_at as \" ~ dbt.type_timestamp() ~ \")\",\n              'second') }} /60\n            ) as valid_starting_at_in_minutes_from_week,\n        ({{ dbt.datediff(\n                'ticket_status_crossed_with_schedule.valid_starting_at', \n                'ticket_status_crossed_with_schedule.valid_ending_at',\n                'second') }} /60\n              ) as raw_delta_in_minutes,\n    {{ zendesk.fivetran_week_start('ticket_status_crossed_with_schedule.valid_starting_at') }} as start_week_date\n              \n    from ticket_status_crossed_with_schedule\n    {{ dbt_utils.group_by(n=11) }}\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(52) }}\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as {{ dbt.type_int() }}) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((valid_starting_at_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_period_agent_work_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      target,\n      sla_policy_name,\n      valid_starting_at_in_minutes_from_week,\n      raw_delta_in_minutes,\n      week_number,\n      schedule_id,\n      start_week_date,\n      greatest(0, valid_starting_at_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time_minute,\n      least(valid_starting_at_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time_minute\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods_agent as (\n  \n    select \n      weekly_period_agent_work_time.source_relation,\n      weekly_period_agent_work_time.ticket_id,\n      weekly_period_agent_work_time.sla_applied_at,\n      weekly_period_agent_work_time.target,\n      weekly_period_agent_work_time.sla_policy_name,\n      weekly_period_agent_work_time.valid_starting_at,\n      weekly_period_agent_work_time.valid_ending_at,\n      weekly_period_agent_work_time.week_number,\n      weekly_period_agent_work_time.ticket_week_start_time_minute,\n      weekly_period_agent_work_time.ticket_week_end_time_minute,\n      coalesce(schedule.start_time_utc, 0) as schedule_start_time, -- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n      schedule.end_time_utc as schedule_end_time,\n      coalesce(\n        least(ticket_week_end_time_minute, schedule.end_time_utc)\n        - greatest(weekly_period_agent_work_time.ticket_week_start_time_minute, schedule.start_time_utc),\n        0) as scheduled_minutes -- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n    from weekly_period_agent_work_time\n    left join schedule -- using a left join to account for tickets started and completed entirely outside of a schedule, otherwise they are filtered out\n      on ticket_week_start_time_minute <= schedule.end_time_utc \n      and ticket_week_end_time_minute >= schedule.start_time_utc\n      and weekly_period_agent_work_time.schedule_id = schedule.schedule_id\n      and weekly_period_agent_work_time.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_end_time_minute as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) > cast(schedule.valid_from as date)\n      and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_start_time_minute as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) < cast(schedule.valid_until as date)\n\n), intercepted_periods_with_running_total as (\n  \n    select \n      *,\n      sum(scheduled_minutes) over \n        (partition by source_relation, ticket_id, sla_applied_at \n          order by valid_starting_at, week_number, schedule_end_time\n          rows between unbounded preceding and current row)\n        as running_total_scheduled_minutes\n\n    from intercepted_periods_agent\n\n\n), intercepted_periods_agent_with_breach_flag as (\n  select \n    intercepted_periods_with_running_total.*,\n    target - running_total_scheduled_minutes as remaining_target_minutes,\n    lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) as lag_check,\n    case when (target - running_total_scheduled_minutes) = 0 then true\n      when (target - running_total_scheduled_minutes) < 0 \n        and \n          (lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) > 0 \n          or \n          lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) is null) \n          then true else false end as is_breached_during_schedule\n          \n  from  intercepted_periods_with_running_total\n\n), intercepted_periods_agent_filtered as (\n\n  select\n    *,\n    (remaining_target_minutes + scheduled_minutes) as breach_minutes,\n    greatest(ticket_week_start_time_minute, schedule_start_time) + (remaining_target_minutes + scheduled_minutes) as breach_minutes_from_week\n  from intercepted_periods_agent_with_breach_flag\n  \n), agent_work_business_breach as (\n  \n  select \n    *,\n    {{ fivetran_utils.timestamp_add(\n      \"minute\",\n      \"cast(((7*24*60) * week_number) + breach_minutes_from_week as \" ~ dbt.type_int() ~ \" )\",\n      \"cast(\" ~ zendesk.fivetran_week_start('valid_starting_at') ~ \" as \" ~ dbt.type_timestamp() ~ \" )\"\n      ) }} as sla_breach_at\n  from intercepted_periods_agent_filtered\n)\n\nselect * \nfrom agent_work_business_breach", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__agent_work_time_filtered_statuses", "package": null, "version": null}, {"name": "int_zendesk__schedule_spine", "package": null, "version": null}, {"name": "int_zendesk__ticket_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.zendesk.fivetran_week_start", "macro.dbt.type_timestamp", "macro.dbt_utils.group_by", "macro.dbt_utils.generate_series", "macro.dbt.type_int", "macro.dbt.dateadd", "macro.fivetran_utils.timestamp_add"], "nodes": ["model.zendesk.int_zendesk__agent_work_time_filtered_statuses", "model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_schedules"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/agent_work_time/int_zendesk__agent_work_time_business_hours.sql", "compiled": true, "compiled_code": "\n\n-- AGENT WORK TIME\n-- This is complicated, as SLAs minutes are only counted while the ticket is in 'new' or 'open' status.\n\n-- Additionally, for business hours, only 'new' or 'open' status hours are counted if they are also during business hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__agent_work_time_filtered_statuses`\n  where in_business_hours\n\n), schedule as (\n\n  select * \n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_schedules as (\n\n  select * \n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n  \n-- cross schedules with work time\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      agent_work_time_filtered_statuses.source_relation,\n      agent_work_time_filtered_statuses.ticket_id,\n      agent_work_time_filtered_statuses.sla_applied_at,\n      agent_work_time_filtered_statuses.target,    \n      agent_work_time_filtered_statuses.sla_policy_name,    \n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as valid_starting_at,\n      least(valid_ending_at, schedule_invalidated_at) as valid_ending_at,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      valid_starting_at as status_valid_starting_at,\n      valid_ending_at as status_valid_ending_at\n\n    from agent_work_time_filtered_statuses\n    left join ticket_schedules\n      on agent_work_time_filtered_statuses.ticket_id = ticket_schedules.ticket_id\n      and agent_work_time_filtered_statuses.source_relation = ticket_schedules.source_relation\n    where \n\n    datetime_diff(\n        cast(least(valid_ending_at, schedule_invalidated_at) as datetime),\n        cast(greatest(valid_starting_at, schedule_created_at) as datetime),\n        second\n    )\n\n   > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      target,    \n      sla_policy_name,    \n      schedule_id,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      (\n\n    datetime_diff(\n        cast(cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n            ) as valid_starting_at_in_minutes_from_week,\n        (\n\n    datetime_diff(\n        cast(ticket_status_crossed_with_schedule.valid_ending_at as datetime),\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as datetime),\n        second\n    )\n\n   /60\n              ) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp),\n        week\n    ) as date) as start_week_date\n              \n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7,8,9,10,11\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((valid_starting_at_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_period_agent_work_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      target,\n      sla_policy_name,\n      valid_starting_at_in_minutes_from_week,\n      raw_delta_in_minutes,\n      week_number,\n      schedule_id,\n      start_week_date,\n      greatest(0, valid_starting_at_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time_minute,\n      least(valid_starting_at_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time_minute\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods_agent as (\n  \n    select \n      weekly_period_agent_work_time.source_relation,\n      weekly_period_agent_work_time.ticket_id,\n      weekly_period_agent_work_time.sla_applied_at,\n      weekly_period_agent_work_time.target,\n      weekly_period_agent_work_time.sla_policy_name,\n      weekly_period_agent_work_time.valid_starting_at,\n      weekly_period_agent_work_time.valid_ending_at,\n      weekly_period_agent_work_time.week_number,\n      weekly_period_agent_work_time.ticket_week_start_time_minute,\n      weekly_period_agent_work_time.ticket_week_end_time_minute,\n      coalesce(schedule.start_time_utc, 0) as schedule_start_time, -- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n      schedule.end_time_utc as schedule_end_time,\n      coalesce(\n        least(ticket_week_end_time_minute, schedule.end_time_utc)\n        - greatest(weekly_period_agent_work_time.ticket_week_start_time_minute, schedule.start_time_utc),\n        0) as scheduled_minutes -- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n    from weekly_period_agent_work_time\n    left join schedule -- using a left join to account for tickets started and completed entirely outside of a schedule, otherwise they are filtered out\n      on ticket_week_start_time_minute <= schedule.end_time_utc \n      and ticket_week_end_time_minute >= schedule.start_time_utc\n      and weekly_period_agent_work_time.schedule_id = schedule.schedule_id\n      and weekly_period_agent_work_time.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time_minute as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time_minute as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n\n), intercepted_periods_with_running_total as (\n  \n    select \n      *,\n      sum(scheduled_minutes) over \n        (partition by source_relation, ticket_id, sla_applied_at \n          order by valid_starting_at, week_number, schedule_end_time\n          rows between unbounded preceding and current row)\n        as running_total_scheduled_minutes\n\n    from intercepted_periods_agent\n\n\n), intercepted_periods_agent_with_breach_flag as (\n  select \n    intercepted_periods_with_running_total.*,\n    target - running_total_scheduled_minutes as remaining_target_minutes,\n    lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) as lag_check,\n    case when (target - running_total_scheduled_minutes) = 0 then true\n      when (target - running_total_scheduled_minutes) < 0 \n        and \n          (lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) > 0 \n          or \n          lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) is null) \n          then true else false end as is_breached_during_schedule\n          \n  from  intercepted_periods_with_running_total\n\n), intercepted_periods_agent_filtered as (\n\n  select\n    *,\n    (remaining_target_minutes + scheduled_minutes) as breach_minutes,\n    greatest(ticket_week_start_time_minute, schedule_start_time) + (remaining_target_minutes + scheduled_minutes) as breach_minutes_from_week\n  from intercepted_periods_agent_with_breach_flag\n  \n), agent_work_business_breach as (\n  \n  select \n    *,\n    \n\n        timestamp_add(cast(cast(timestamp_trunc(\n        cast(valid_starting_at as timestamp),\n        week\n    ) as date) as timestamp ), interval  cast(((7*24*60) * week_number) + breach_minutes_from_week as INT64 ) minute)\n\n as sla_breach_at\n  from intercepted_periods_agent_filtered\n)\n\nselect * \nfrom agent_work_business_breach", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__agent_work_time_calendar_hours": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__agent_work_time_calendar_hours", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/agent_work_time/int_zendesk__agent_work_time_calendar_hours.sql", "original_file_path": "models/sla_policy/agent_work_time/int_zendesk__agent_work_time_calendar_hours.sql", "unique_id": "model.zendesk.int_zendesk__agent_work_time_calendar_hours", "fqn": ["zendesk", "sla_policy", "agent_work_time", "int_zendesk__agent_work_time_calendar_hours"], "alias": "int_zendesk__agent_work_time_calendar_hours", "checksum": {"name": "sha256", "checksum": "94368e1ee3507ea1999aee6631967338d1efc7da085a106ed8637f95267f8d86"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.765684, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__agent_work_time_calendar_hours`", "raw_code": "-- Calculate breach time for agent work time, calendar hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from {{ ref('int_zendesk__agent_work_time_filtered_statuses') }}\n  where not in_business_hours\n\n), agent_work_time_calendar_minutes as (\n\n  select \n    *,\n    {{ dbt.datediff(\n        'valid_starting_at',\n        'valid_ending_at',\n        'minute' )}} as calendar_minutes,\n    sum({{ dbt.datediff(\n            'valid_starting_at', \n            'valid_ending_at', \n            'minute') }} ) \n      over (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from agent_work_time_filtered_statuses\n\n), agent_work_time_calendar_minutes_flagged as (\n\nselect \n  agent_work_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  agent_work_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    {{ fivetran_utils.timestamp_add(\n      'minute',\n      '(remaining_target_minutes + calendar_minutes)',\n      'valid_starting_at', \n      ) }} as sla_breach_at\n  from agent_work_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__agent_work_time_filtered_statuses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.fivetran_utils.timestamp_add"], "nodes": ["model.zendesk.int_zendesk__agent_work_time_filtered_statuses"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/agent_work_time/int_zendesk__agent_work_time_calendar_hours.sql", "compiled": true, "compiled_code": "-- Calculate breach time for agent work time, calendar hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__agent_work_time_filtered_statuses`\n  where not in_business_hours\n\n), agent_work_time_calendar_minutes as (\n\n  select \n    *,\n    \n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   as calendar_minutes,\n    sum(\n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   ) \n      over (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from agent_work_time_filtered_statuses\n\n), agent_work_time_calendar_minutes_flagged as (\n\nselect \n  agent_work_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  agent_work_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    \n\n        timestamp_add(valid_starting_at, interval  (remaining_target_minutes + calendar_minutes) minute)\n\n as sla_breach_at\n  from agent_work_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__agent_work_time_filtered_statuses": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__agent_work_time_filtered_statuses", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/agent_work_time/int_zendesk__agent_work_time_filtered_statuses.sql", "original_file_path": "models/sla_policy/agent_work_time/int_zendesk__agent_work_time_filtered_statuses.sql", "unique_id": "model.zendesk.int_zendesk__agent_work_time_filtered_statuses", "fqn": ["zendesk", "sla_policy", "agent_work_time", "int_zendesk__agent_work_time_filtered_statuses"], "alias": "int_zendesk__agent_work_time_filtered_statuses", "checksum": {"name": "sha256", "checksum": "024d31939bdf2ecd3d5e56ae0095a27b6a59f95fe276e9a82eabfb4e66048dff"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.7697642, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__agent_work_time_filtered_statuses`", "raw_code": "with agent_work_time_sla as (\n\n  select *\n  from {{ ref('int_zendesk__sla_policy_applied') }}\n  where metric = 'agent_work_time'\n\n), ticket_historical_status as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_historical_status') }}\n    \n--This captures the statuses of the ticket while the agent work time sla was active for the ticket.\n), agent_work_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.source_relation,\n    ticket_historical_status.ticket_id,\n    greatest(ticket_historical_status.valid_starting_at, agent_work_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      {{ fivetran_utils.timestamp_add('day', 30, \"\" ~ dbt.current_timestamp() ~ \"\") }} ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    agent_work_time_sla.sla_applied_at,\n    agent_work_time_sla.target,    \n    agent_work_time_sla.sla_policy_name,\n    agent_work_time_sla.ticket_created_at,\n    agent_work_time_sla.in_business_hours\n  from ticket_historical_status\n  join agent_work_time_sla\n    on ticket_historical_status.ticket_id = agent_work_time_sla.ticket_id\n    and ticket_historical_status.source_relation = agent_work_time_sla.source_relation\n  where ticket_historical_status.status in ('new', 'open') -- these are the only statuses that count as \"agent work time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom agent_work_time_filtered_statuses", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__sla_policy_applied", "package": null, "version": null}, {"name": "int_zendesk__ticket_historical_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.fivetran_utils.timestamp_add"], "nodes": ["model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.int_zendesk__ticket_historical_status"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/agent_work_time/int_zendesk__agent_work_time_filtered_statuses.sql", "compiled": true, "compiled_code": "with agent_work_time_sla as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__sla_policy_applied`\n  where metric = 'agent_work_time'\n\n), ticket_historical_status as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    \n--This captures the statuses of the ticket while the agent work time sla was active for the ticket.\n), agent_work_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.source_relation,\n    ticket_historical_status.ticket_id,\n    greatest(ticket_historical_status.valid_starting_at, agent_work_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      \n\n        timestamp_add(current_timestamp(), interval  30 day)\n\n ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    agent_work_time_sla.sla_applied_at,\n    agent_work_time_sla.target,    \n    agent_work_time_sla.sla_policy_name,\n    agent_work_time_sla.ticket_created_at,\n    agent_work_time_sla.in_business_hours\n  from ticket_historical_status\n  join agent_work_time_sla\n    on ticket_historical_status.ticket_id = agent_work_time_sla.ticket_id\n    and ticket_historical_status.source_relation = agent_work_time_sla.source_relation\n  where ticket_historical_status.status in ('new', 'open') -- these are the only statuses that count as \"agent work time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom agent_work_time_filtered_statuses", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__reply_time_business_hours": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__reply_time_business_hours", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/reply_time/int_zendesk__reply_time_business_hours.sql", "original_file_path": "models/sla_policy/reply_time/int_zendesk__reply_time_business_hours.sql", "unique_id": "model.zendesk.int_zendesk__reply_time_business_hours", "fqn": ["zendesk", "sla_policy", "reply_time", "int_zendesk__reply_time_business_hours"], "alias": "int_zendesk__reply_time_business_hours", "checksum": {"name": "sha256", "checksum": "b1745066a8586dd3acc9a853faa08ae3f5d7dfd28e7c8fe22ac608bb838900e7"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.773654, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__reply_time_business_hours`", "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\n-- step 3, determine when an SLA will breach for SLAs that are in business hours\n\nwith ticket_schedules as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_schedules') }}\n\n), schedule as (\n\n  select *\n  from {{ ref('int_zendesk__schedule_spine') }}\n\n), sla_policy_applied as (\n\n  select *\n  from {{ ref('int_zendesk__sla_policy_applied') }}\n\n), reply_time as (\n\n  select *\n  from {{ ref('int_zendesk__commenter_reply_at') }}\n\n), ticket_updates as (\n\n  select *\n  from {{ ref('int_zendesk__updates') }}\n\n), ticket_solved_times as (\n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as solved_at\n  from ticket_updates\n  where field_name = 'status'\n  and value in ('solved','closed')\n\n), schedule_business_hours as (\n\n  select \n    source_relation,\n    schedule_id,\n    sum(end_time - start_time) as total_schedule_weekly_business_minutes\n  -- referring to stg_zendesk__schedule instead of int_zendesk__schedule_spine just to calculate total minutes\n  from {{ ref('stg_zendesk__schedule') }}\n  group by 1, 2\n\n), ticket_sla_applied_with_schedules as (\n\n  select \n    sla_policy_applied.*,\n    ticket_schedules.schedule_id,\n    ({{ dbt.datediff(\n            \"cast(\" ~ zendesk.fivetran_week_start('sla_policy_applied.sla_applied_at') ~ \"as \" ~ dbt.type_timestamp() ~ \")\", \n            \"cast(sla_policy_applied.sla_applied_at as \" ~ dbt.type_timestamp() ~ \")\",\n            'second') }} /60\n          ) as start_time_in_minutes_from_week,\n      schedule_business_hours.total_schedule_weekly_business_minutes,\n    {{ zendesk.fivetran_week_start('sla_policy_applied.sla_applied_at') }} as start_week_date\n\n  from sla_policy_applied\n  left join ticket_schedules on sla_policy_applied.ticket_id = ticket_schedules.ticket_id\n    and sla_policy_applied.source_relation = ticket_schedules.source_relation\n    and {{ fivetran_utils.timestamp_add('second', -1, 'ticket_schedules.schedule_created_at') }} <= sla_policy_applied.sla_applied_at\n    and {{ fivetran_utils.timestamp_add('second', -1, 'ticket_schedules.schedule_invalidated_at') }} > sla_policy_applied.sla_applied_at\n  left join schedule_business_hours \n    on ticket_schedules.schedule_id = schedule_business_hours.schedule_id\n    and ticket_schedules.source_relation = schedule_business_hours.source_relation\n  where sla_policy_applied.in_business_hours\n    and metric in ('next_reply_time', 'first_reply_time')\n\n), first_reply_solve_times as (\n  select\n    ticket_sla_applied_with_schedules.source_relation,\n    ticket_sla_applied_with_schedules.ticket_id,\n    ticket_sla_applied_with_schedules.ticket_created_at,\n    ticket_sla_applied_with_schedules.valid_starting_at,\n    ticket_sla_applied_with_schedules.ticket_current_status,\n    ticket_sla_applied_with_schedules.metric,\n    ticket_sla_applied_with_schedules.latest_sla,\n    ticket_sla_applied_with_schedules.sla_applied_at,\n    ticket_sla_applied_with_schedules.target,\n    ticket_sla_applied_with_schedules.in_business_hours,\n    ticket_sla_applied_with_schedules.sla_policy_name,\n    ticket_sla_applied_with_schedules.schedule_id,\n    ticket_sla_applied_with_schedules.start_time_in_minutes_from_week,\n    ticket_sla_applied_with_schedules.total_schedule_weekly_business_minutes,\n    ticket_sla_applied_with_schedules.start_week_date,\n    min(reply_time.reply_at) as first_reply_time,\n    min(ticket_solved_times.solved_at) as first_solved_time\n  from ticket_sla_applied_with_schedules\n  left join reply_time\n    on reply_time.ticket_id = ticket_sla_applied_with_schedules.ticket_id\n    and reply_time.reply_at > ticket_sla_applied_with_schedules.sla_applied_at\n    and reply_time.source_relation = ticket_sla_applied_with_schedules.source_relation\n  left join ticket_solved_times\n    on ticket_sla_applied_with_schedules.ticket_id = ticket_solved_times.ticket_id\n    and ticket_solved_times.solved_at > ticket_sla_applied_with_schedules.sla_applied_at\n    and ticket_solved_times.source_relation = ticket_sla_applied_with_schedules.source_relation\n  {{ dbt_utils.group_by(n=15) }}\n\n), week_index_calc as (\n    select \n        *,\n        {{ dbt.datediff(\"sla_applied_at\", \"least(coalesce(first_reply_time, \" ~ dbt.current_timestamp() ~ \"), coalesce(first_solved_time, \" ~ dbt.current_timestamp() ~ \"))\", \"week\") }} + 1 as week_index\n    from first_reply_solve_times\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(52) }}\n\n), weeks_cross_ticket_sla_applied as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select\n      week_index_calc.*,\n      cast(weeks.generated_number - 1 as {{ dbt.type_int() }}) as week_number\n\n    from week_index_calc\n    cross join weeks\n    where week_index >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n    weeks_cross_ticket_sla_applied.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    (7*24*60) as ticket_week_end_time\n  from weeks_cross_ticket_sla_applied\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.*,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    (schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) as lapsed_business_minutes,\n    sum(schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) over \n      (partition by weekly_periods.source_relation, ticket_id, metric, sla_applied_at \n        order by week_number, schedule.start_time_utc\n        rows between unbounded preceding and current row) as sum_lapsed_business_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast ({{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_end_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) > cast(schedule.valid_from as date)\n    and cast ({{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_start_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) < cast(schedule.valid_until as date)\n\n), intercepted_periods_with_breach_flag as (\n  \n  select \n    *,\n    target - sum_lapsed_business_minutes as remaining_minutes,\n    case when (target - sum_lapsed_business_minutes) < 0 \n      and \n        (lag(target - sum_lapsed_business_minutes) over\n        (partition by source_relation, ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) >= 0 \n        or \n        lag(target - sum_lapsed_business_minutes) over\n        (partition by source_relation, ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) is null) \n        then true else false end as is_breached_during_schedule -- this flags the scheduled period on which the breach took place\n  from intercepted_periods\n\n), intercepted_periods_with_breach_flag_calculated as (\n\n  select\n    *,\n    schedule_end_time + remaining_minutes as breached_at_minutes,\n    {{ zendesk.fivetran_week_start('sla_applied_at') }} as starting_point,\n    {{ fivetran_utils.timestamp_add(\n        \"minute\",\n        \"cast(((7*24*60) * week_number) + (schedule_end_time + remaining_minutes) as \" ~ dbt.type_int() ~ \" )\",\n        \"cast(\" ~ zendesk.fivetran_week_start('sla_applied_at') ~ \" as \" ~ dbt.type_timestamp() ~ \")\" ) }} as sla_breach_at,\n    {{ fivetran_utils.timestamp_add(\n        \"minute\",\n        \"cast(((7*24*60) * week_number) + (schedule_start_time) as \" ~ dbt.type_int() ~ \" )\",\n        \"cast(\" ~ zendesk.fivetran_week_start('sla_applied_at') ~ \" as \" ~ dbt.type_timestamp() ~ \")\" ) }} as sla_schedule_start_at,\n    {{ fivetran_utils.timestamp_add(\n        \"minute\",\n        \"cast(((7*24*60) * week_number) + (schedule_end_time) as \" ~ dbt.type_int() ~ \" )\",\n        \"cast(\" ~ zendesk.fivetran_week_start('sla_applied_at') ~ \" as \" ~ dbt.type_timestamp() ~ \")\" ) }} as sla_schedule_end_at,\n    {{ zendesk.fivetran_week_end(\"sla_applied_at\") }} as week_end_date\n  from intercepted_periods_with_breach_flag\n\n), reply_time_business_hours_sla as (\n\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    greatest(sla_applied_at,sla_schedule_start_at) as sla_schedule_start_at,\n    sla_schedule_end_at,\n    target,\n    sum_lapsed_business_minutes,\n    in_business_hours,\n    sla_breach_at,\n    is_breached_during_schedule,\n    total_schedule_weekly_business_minutes,\n    max(case when is_breached_during_schedule then sla_breach_at else null end) over (partition by source_relation, ticket_id, metric, sla_applied_at, target) as sla_breach_exact_time,\n    week_number\n  from intercepted_periods_with_breach_flag_calculated\n\n) \n\nselect * \nfrom reply_time_business_hours_sla", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_schedules", "package": null, "version": null}, {"name": "int_zendesk__schedule_spine", "package": null, "version": null}, {"name": "int_zendesk__sla_policy_applied", "package": null, "version": null}, {"name": "int_zendesk__commenter_reply_at", "package": null, "version": null}, {"name": "int_zendesk__updates", "package": null, "version": null}, {"name": "stg_zendesk__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk.fivetran_week_start", "macro.dbt.type_timestamp", "macro.dbt.datediff", "macro.fivetran_utils.timestamp_add", "macro.dbt_utils.group_by", "macro.dbt.current_timestamp", "macro.dbt_utils.generate_series", "macro.dbt.type_int", "macro.dbt.dateadd", "macro.zendesk.fivetran_week_end"], "nodes": ["model.zendesk.int_zendesk__ticket_schedules", "model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.int_zendesk__commenter_reply_at", "model.zendesk.int_zendesk__updates", "model.zendesk_source.stg_zendesk__schedule"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/reply_time/int_zendesk__reply_time_business_hours.sql", "compiled": true, "compiled_code": "\n\n-- step 3, determine when an SLA will breach for SLAs that are in business hours\n\nwith  __dbt__cte__int_zendesk__commenter_reply_at as (\n\nwith users as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), ticket_updates as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), final as (\n  select \n    ticket_comment.source_relation,\n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n\n  join users as commenter\n    on ticket_comment.user_id = commenter.user_id\n    and ticket_comment.source_relation = commenter.source_relation\n  \n    and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n    and ticket_comment.valid_starting_at < commenter.valid_ending_at\n  \n\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.is_internal_role\n)\n\nselect *\nfrom final\n), ticket_schedules as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), sla_policy_applied as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__sla_policy_applied`\n\n), reply_time as (\n\n  select *\n  from __dbt__cte__int_zendesk__commenter_reply_at\n\n), ticket_updates as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), ticket_solved_times as (\n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as solved_at\n  from ticket_updates\n  where field_name = 'status'\n  and value in ('solved','closed')\n\n), schedule_business_hours as (\n\n  select \n    source_relation,\n    schedule_id,\n    sum(end_time - start_time) as total_schedule_weekly_business_minutes\n  -- referring to stg_zendesk__schedule instead of int_zendesk__schedule_spine just to calculate total minutes\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`\n  group by 1, 2\n\n), ticket_sla_applied_with_schedules as (\n\n  select \n    sla_policy_applied.*,\n    ticket_schedules.schedule_id,\n    (\n\n    datetime_diff(\n        cast(cast(sla_policy_applied.sla_applied_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(sla_policy_applied.sla_applied_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n      schedule_business_hours.total_schedule_weekly_business_minutes,\n    cast(timestamp_trunc(\n        cast(sla_policy_applied.sla_applied_at as timestamp),\n        week\n    ) as date) as start_week_date\n\n  from sla_policy_applied\n  left join ticket_schedules on sla_policy_applied.ticket_id = ticket_schedules.ticket_id\n    and sla_policy_applied.source_relation = ticket_schedules.source_relation\n    and \n\n        timestamp_add(ticket_schedules.schedule_created_at, interval  -1 second)\n\n <= sla_policy_applied.sla_applied_at\n    and \n\n        timestamp_add(ticket_schedules.schedule_invalidated_at, interval  -1 second)\n\n > sla_policy_applied.sla_applied_at\n  left join schedule_business_hours \n    on ticket_schedules.schedule_id = schedule_business_hours.schedule_id\n    and ticket_schedules.source_relation = schedule_business_hours.source_relation\n  where sla_policy_applied.in_business_hours\n    and metric in ('next_reply_time', 'first_reply_time')\n\n), first_reply_solve_times as (\n  select\n    ticket_sla_applied_with_schedules.source_relation,\n    ticket_sla_applied_with_schedules.ticket_id,\n    ticket_sla_applied_with_schedules.ticket_created_at,\n    ticket_sla_applied_with_schedules.valid_starting_at,\n    ticket_sla_applied_with_schedules.ticket_current_status,\n    ticket_sla_applied_with_schedules.metric,\n    ticket_sla_applied_with_schedules.latest_sla,\n    ticket_sla_applied_with_schedules.sla_applied_at,\n    ticket_sla_applied_with_schedules.target,\n    ticket_sla_applied_with_schedules.in_business_hours,\n    ticket_sla_applied_with_schedules.sla_policy_name,\n    ticket_sla_applied_with_schedules.schedule_id,\n    ticket_sla_applied_with_schedules.start_time_in_minutes_from_week,\n    ticket_sla_applied_with_schedules.total_schedule_weekly_business_minutes,\n    ticket_sla_applied_with_schedules.start_week_date,\n    min(reply_time.reply_at) as first_reply_time,\n    min(ticket_solved_times.solved_at) as first_solved_time\n  from ticket_sla_applied_with_schedules\n  left join reply_time\n    on reply_time.ticket_id = ticket_sla_applied_with_schedules.ticket_id\n    and reply_time.reply_at > ticket_sla_applied_with_schedules.sla_applied_at\n    and reply_time.source_relation = ticket_sla_applied_with_schedules.source_relation\n  left join ticket_solved_times\n    on ticket_sla_applied_with_schedules.ticket_id = ticket_solved_times.ticket_id\n    and ticket_solved_times.solved_at > ticket_sla_applied_with_schedules.sla_applied_at\n    and ticket_solved_times.source_relation = ticket_sla_applied_with_schedules.source_relation\n  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n\n), week_index_calc as (\n    select \n        *,\n        \n\n    datetime_diff(\n        cast(least(coalesce(first_reply_time, current_timestamp()), coalesce(first_solved_time, current_timestamp())) as datetime),\n        cast(sla_applied_at as datetime),\n        week\n    )\n\n   + 1 as week_index\n    from first_reply_solve_times\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_sla_applied as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select\n      week_index_calc.*,\n      cast(weeks.generated_number - 1 as INT64) as week_number\n\n    from week_index_calc\n    cross join weeks\n    where week_index >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n    weeks_cross_ticket_sla_applied.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    (7*24*60) as ticket_week_end_time\n  from weeks_cross_ticket_sla_applied\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.*,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    (schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) as lapsed_business_minutes,\n    sum(schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) over \n      (partition by weekly_periods.source_relation, ticket_id, metric, sla_applied_at \n        order by week_number, schedule.start_time_utc\n        rows between unbounded preceding and current row) as sum_lapsed_business_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast (\n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast (\n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n\n), intercepted_periods_with_breach_flag as (\n  \n  select \n    *,\n    target - sum_lapsed_business_minutes as remaining_minutes,\n    case when (target - sum_lapsed_business_minutes) < 0 \n      and \n        (lag(target - sum_lapsed_business_minutes) over\n        (partition by source_relation, ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) >= 0 \n        or \n        lag(target - sum_lapsed_business_minutes) over\n        (partition by source_relation, ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) is null) \n        then true else false end as is_breached_during_schedule -- this flags the scheduled period on which the breach took place\n  from intercepted_periods\n\n), intercepted_periods_with_breach_flag_calculated as (\n\n  select\n    *,\n    schedule_end_time + remaining_minutes as breached_at_minutes,\n    cast(timestamp_trunc(\n        cast(sla_applied_at as timestamp),\n        week\n    ) as date) as starting_point,\n    \n\n        timestamp_add(cast(cast(timestamp_trunc(\n        cast(sla_applied_at as timestamp),\n        week\n    ) as date) as timestamp), interval  cast(((7*24*60) * week_number) + (schedule_end_time + remaining_minutes) as INT64 ) minute)\n\n as sla_breach_at,\n    \n\n        timestamp_add(cast(cast(timestamp_trunc(\n        cast(sla_applied_at as timestamp),\n        week\n    ) as date) as timestamp), interval  cast(((7*24*60) * week_number) + (schedule_start_time) as INT64 ) minute)\n\n as sla_schedule_start_at,\n    \n\n        timestamp_add(cast(cast(timestamp_trunc(\n        cast(sla_applied_at as timestamp),\n        week\n    ) as date) as timestamp), interval  cast(((7*24*60) * week_number) + (schedule_end_time) as INT64 ) minute)\n\n as sla_schedule_end_at,\n    cast(\n        \n\n        datetime_add(\n            cast( \n\n        datetime_add(\n            cast( timestamp_trunc(\n        cast(sla_applied_at as timestamp),\n        week\n    ) as datetime),\n        interval 1 week\n        )\n\n as datetime),\n        interval -1 day\n        )\n\n\n        as date) as week_end_date\n  from intercepted_periods_with_breach_flag\n\n), reply_time_business_hours_sla as (\n\n  select\n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    greatest(sla_applied_at,sla_schedule_start_at) as sla_schedule_start_at,\n    sla_schedule_end_at,\n    target,\n    sum_lapsed_business_minutes,\n    in_business_hours,\n    sla_breach_at,\n    is_breached_during_schedule,\n    total_schedule_weekly_business_minutes,\n    max(case when is_breached_during_schedule then sla_breach_at else null end) over (partition by source_relation, ticket_id, metric, sla_applied_at, target) as sla_breach_exact_time,\n    week_number\n  from intercepted_periods_with_breach_flag_calculated\n\n) \n\nselect * \nfrom reply_time_business_hours_sla", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__commenter_reply_at", "sql": " __dbt__cte__int_zendesk__commenter_reply_at as (\n\nwith users as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), ticket_updates as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), final as (\n  select \n    ticket_comment.source_relation,\n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n\n  join users as commenter\n    on ticket_comment.user_id = commenter.user_id\n    and ticket_comment.source_relation = commenter.source_relation\n  \n    and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n    and ticket_comment.valid_starting_at < commenter.valid_ending_at\n  \n\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.is_internal_role\n)\n\nselect *\nfrom final\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__reply_time_calendar_hours": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__reply_time_calendar_hours", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/reply_time/int_zendesk__reply_time_calendar_hours.sql", "original_file_path": "models/sla_policy/reply_time/int_zendesk__reply_time_calendar_hours.sql", "unique_id": "model.zendesk.int_zendesk__reply_time_calendar_hours", "fqn": ["zendesk", "sla_policy", "reply_time", "int_zendesk__reply_time_calendar_hours"], "alias": "int_zendesk__reply_time_calendar_hours", "checksum": {"name": "sha256", "checksum": "6ec2775efbac4d405efd0b30a1ec5c593e140c3f4a1be4ff8df7fd0cd4791a2e"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.788219, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__reply_time_calendar_hours`", "raw_code": "--REPLY TIME SLA\n-- step 2, figure out when the sla will breach for sla's in calendar hours. The calculation is relatively straightforward.\n\nwith sla_policy_applied as (\n\n  select *\n  from {{ ref('int_zendesk__sla_policy_applied') }}\n\n), final as (\n  select\n    *,\n    {{ fivetran_utils.timestamp_add(\n        \"minute\",\n        \"cast(target as \" ~ dbt.type_int() ~ \" )\",\n        \"sla_applied_at\" ) }} as sla_breach_at\n  from sla_policy_applied\n  where not in_business_hours\n    and metric in ('next_reply_time', 'first_reply_time')\n\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__sla_policy_applied", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_int", "macro.fivetran_utils.timestamp_add"], "nodes": ["model.zendesk.int_zendesk__sla_policy_applied"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/reply_time/int_zendesk__reply_time_calendar_hours.sql", "compiled": true, "compiled_code": "--REPLY TIME SLA\n-- step 2, figure out when the sla will breach for sla's in calendar hours. The calculation is relatively straightforward.\n\nwith sla_policy_applied as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__sla_policy_applied`\n\n), final as (\n  select\n    *,\n    \n\n        timestamp_add(sla_applied_at, interval  cast(target as INT64 ) minute)\n\n as sla_breach_at\n  from sla_policy_applied\n  where not in_business_hours\n    and metric in ('next_reply_time', 'first_reply_time')\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__reply_time_combined": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__reply_time_combined", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/reply_time/int_zendesk__reply_time_combined.sql", "original_file_path": "models/sla_policy/reply_time/int_zendesk__reply_time_combined.sql", "unique_id": "model.zendesk.int_zendesk__reply_time_combined", "fqn": ["zendesk", "sla_policy", "reply_time", "int_zendesk__reply_time_combined"], "alias": "int_zendesk__reply_time_combined", "checksum": {"name": "sha256", "checksum": "e9acac6c44a9f1009ae0a950954709ec5efa72604af6ac4d747b01e9a63bb6c5"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.792632, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__reply_time_combined`", "raw_code": "with reply_time_calendar_hours_sla as (\n  \n  select *\n  from {{ ref('int_zendesk__reply_time_calendar_hours') }}\n\n{% if var('using_schedules', True) %}\n), reply_time_business_hours_sla as (\n\n  select *\n  from {{ ref('int_zendesk__reply_time_business_hours') }}\n{% endif %}\n\n), ticket_updates as (\n  select *\n  from {{ ref('int_zendesk__updates') }}\n\n), reply_time as (\n\n  select *\n  from {{ ref('int_zendesk__commenter_reply_at') }}\n\n), reply_time_breached_at as (\n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    sla_applied_at as sla_schedule_start_at,\n    cast(null as timestamp) as sla_schedule_end_at,\n    cast(null as {{ dbt.type_numeric() }}) as sum_lapsed_business_minutes,\n    target,\n    in_business_hours,\n    sla_breach_at,\n    cast(null as {{ dbt.type_numeric() }}) as week_number,\n    cast(null as {{ dbt.type_numeric() }}) as total_schedule_weekly_business_minutes\n  from reply_time_calendar_hours_sla\n\n{% if var('using_schedules', True) %}\n\n  union all\n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    sla_schedule_start_at,\n    sla_schedule_end_at,\n    sum_lapsed_business_minutes,\n    target,\n    in_business_hours,\n    sla_breach_exact_time as sla_breach_at,\n    week_number,\n    total_schedule_weekly_business_minutes\n  from reply_time_business_hours_sla\n{% endif %}\n\n-- Now that we have the breach time, see when the first reply after the sla policy was applied took place.\n), ticket_solved_times as (\n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as solved_at\n  from ticket_updates\n  where field_name = 'status'\n  and value in ('solved','closed')\n\n), reply_time_breached_at_with_next_reply_timestamp as (\n\n  select \n    reply_time_breached_at.source_relation,\n    reply_time_breached_at.ticket_id,\n    reply_time_breached_at.sla_policy_name,\n    reply_time_breached_at.metric,\n    reply_time_breached_at.ticket_created_at,\n    reply_time_breached_at.sla_applied_at,\n    reply_time_breached_at.sum_lapsed_business_minutes,\n    reply_time_breached_at.target,\n    reply_time_breached_at.in_business_hours,\n    reply_time_breached_at.sla_breach_at,\n    reply_time_breached_at.week_number,\n    min(reply_time_breached_at.sla_schedule_start_at) as sla_schedule_start_at,\n    min(reply_time_breached_at.sla_schedule_end_at) as sla_schedule_end_at,\n    min(reply_at) as agent_reply_at,\n    min(solved_at) as next_solved_at\n  from reply_time_breached_at\n  left join reply_time\n    on reply_time.ticket_id = reply_time_breached_at.ticket_id\n    and reply_time.reply_at > reply_time_breached_at.sla_applied_at\n    and reply_time.source_relation = reply_time_breached_at.source_relation\n  left join ticket_solved_times\n    on reply_time_breached_at.ticket_id = ticket_solved_times.ticket_id\n    and ticket_solved_times.solved_at > reply_time_breached_at.sla_applied_at\n    and ticket_solved_times.source_relation = reply_time_breached_at.source_relation\n  {{ dbt_utils.group_by(n=11) }}\n\n), lagging_time_block as (\n  select\n    *,\n    row_number() over (partition by source_relation, ticket_id, metric, sla_applied_at order by sla_schedule_start_at) as day_index,\n    lead(sla_schedule_start_at) over (partition by source_relation, ticket_id, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at) as next_schedule_start,\n    min(sla_breach_at) over (partition by source_relation, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at rows unbounded preceding) as first_sla_breach_at,\n\t\tcoalesce(lag(sum_lapsed_business_minutes) over (partition by source_relation, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at), 0) as sum_lapsed_business_minutes_new,\n    {{ dbt.datediff(\"sla_schedule_start_at\", \"agent_reply_at\", 'second') }} / 60 as total_runtime_minutes -- total minutes from sla_schedule_start_at and agent reply time, before taking into account SLA end time\n  from reply_time_breached_at_with_next_reply_timestamp\n\n), filtered_reply_times as (\n  select\n    *\n  from lagging_time_block\n  where (\n    in_business_hours\n      and ((\n        agent_reply_at >= sla_schedule_start_at and agent_reply_at <= sla_schedule_end_at) -- ticket is replied to between a schedule window\n        or (agent_reply_at < sla_schedule_start_at and sum_lapsed_business_minutes_new = 0 and sla_breach_at = first_sla_breach_at and day_index = 1) -- ticket is replied to before any schedule begins and no business minutes have been spent on it\n        or (agent_reply_at is null and next_solved_at >= sla_schedule_start_at and next_solved_at < next_schedule_start) -- There are no reply times, but the ticket is closed and we should capture the closed date as the first and/or next reply time if there is not one preceding.\n        or (next_solved_at is null and agent_reply_at is null and {{ dbt.current_timestamp() }} >= sla_schedule_start_at and ({{ dbt.current_timestamp() }} < next_schedule_start or next_schedule_start is null)) -- ticket is not replied to and therefore active. But only bring through the active SLA record that is most recent (after the last SLA schedule starts but before the next, or if there does not exist a next SLA schedule start time)  \n        or (agent_reply_at > sla_schedule_end_at and (agent_reply_at < next_schedule_start or next_schedule_start is null)) -- ticket is replied to outside sla schedule hours\n      ) and sla_schedule_start_at <= {{ dbt.current_timestamp() }}) -- To help limit the data we do not want to bring through any schedule rows in the future.\n    or not in_business_hours\n\n), reply_time_breached_at_remove_old_sla as (\n  select\n    *,\n    {{ dbt.current_timestamp() }} as current_time_check,\n    lead(sla_applied_at) over (partition by source_relation, ticket_id, metric, in_business_hours order by sla_applied_at) as updated_sla_policy_starts_at,\n    case when \n      lead(sla_applied_at) over (partition by source_relation, ticket_id, metric, in_business_hours order by sla_applied_at) --updated sla policy start at time\n      < sla_breach_at then true else false end as is_stale_sla_policy,\n    case when (sla_breach_at < agent_reply_at and sla_breach_at < next_solved_at)\n                or (sla_breach_at < agent_reply_at and next_solved_at is null)\n                or (agent_reply_at is null and sla_breach_at < next_solved_at)\n                or (agent_reply_at is null and next_solved_at is null)\n      then true\n      else false\n        end as is_sla_breached,\n    sum_lapsed_business_minutes_new + total_runtime_minutes as total_new_minutes -- add total runtime to sum_lapsed_business_minutes_new (the sum_lapsed_business_minutes from prior row)\n  from filtered_reply_times\n\n), reply_time_breach as ( \n  select  \n    *,\n    case when is_sla_breached\n      then sla_breach_at -- If the SLA was breached then record that time as the breach \n      else coalesce(agent_reply_at, next_solved_at) -- If the SLA was not breached then record either the agent_reply_at or next_solve_at as the breach event time as it was achieved.\n    end as sla_update_at,\n    case when total_runtime_minutes < 0 -- agent has already replied to prior to this SLA schedule\n        then 0 -- so don't add new minutes to the SLA\n      when total_new_minutes > sum_lapsed_business_minutes -- if total runtime, regardless of when the SLA schedule ended, is more than the total lapsed business minutes, that means the agent replied after the SLA schedule\n          then sum_lapsed_business_minutes -- the elapsed time after the SLA end time should not be calculated as part of the business minutes, therefore sla_elapsed_time should only be sum_lapsed_business_minutes\n      else sum_lapsed_business_minutes_new + ({{ dbt.datediff(\"sla_schedule_start_at\", \"coalesce(agent_reply_at, next_solved_at, current_time_check)\", 'second') }} / 60) -- otherwise, the sla_elapsed_time will be sum_lapsed_business_minutes_new (the prior record's sum_lapsed_business_minutes) plus the minutes between SLA schedule start and agent_reply_time. If the agent hasn't replied yet, then the minute counter is still running, hence the coalesce of agent_reply_time and current_time_check.\n    end as sla_elapsed_time\n  from reply_time_breached_at_remove_old_sla \n)\n\nselect *\nfrom reply_time_breach", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__reply_time_calendar_hours", "package": null, "version": null}, {"name": "int_zendesk__reply_time_business_hours", "package": null, "version": null}, {"name": "int_zendesk__updates", "package": null, "version": null}, {"name": "int_zendesk__commenter_reply_at", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt_utils.group_by", "macro.dbt.datediff", "macro.dbt.current_timestamp"], "nodes": ["model.zendesk.int_zendesk__reply_time_calendar_hours", "model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__updates", "model.zendesk.int_zendesk__commenter_reply_at"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/reply_time/int_zendesk__reply_time_combined.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_zendesk__commenter_reply_at as (\n\nwith users as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), ticket_updates as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), final as (\n  select \n    ticket_comment.source_relation,\n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n\n  join users as commenter\n    on ticket_comment.user_id = commenter.user_id\n    and ticket_comment.source_relation = commenter.source_relation\n  \n    and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n    and ticket_comment.valid_starting_at < commenter.valid_ending_at\n  \n\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.is_internal_role\n)\n\nselect *\nfrom final\n), reply_time_calendar_hours_sla as (\n  \n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__reply_time_calendar_hours`\n\n\n), reply_time_business_hours_sla as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__reply_time_business_hours`\n\n\n), ticket_updates as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), reply_time as (\n\n  select *\n  from __dbt__cte__int_zendesk__commenter_reply_at\n\n), reply_time_breached_at as (\n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    sla_applied_at as sla_schedule_start_at,\n    cast(null as timestamp) as sla_schedule_end_at,\n    cast(null as numeric) as sum_lapsed_business_minutes,\n    target,\n    in_business_hours,\n    sla_breach_at,\n    cast(null as numeric) as week_number,\n    cast(null as numeric) as total_schedule_weekly_business_minutes\n  from reply_time_calendar_hours_sla\n\n\n\n  union all\n\n  select \n    source_relation,\n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    sla_schedule_start_at,\n    sla_schedule_end_at,\n    sum_lapsed_business_minutes,\n    target,\n    in_business_hours,\n    sla_breach_exact_time as sla_breach_at,\n    week_number,\n    total_schedule_weekly_business_minutes\n  from reply_time_business_hours_sla\n\n\n-- Now that we have the breach time, see when the first reply after the sla policy was applied took place.\n), ticket_solved_times as (\n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as solved_at\n  from ticket_updates\n  where field_name = 'status'\n  and value in ('solved','closed')\n\n), reply_time_breached_at_with_next_reply_timestamp as (\n\n  select \n    reply_time_breached_at.source_relation,\n    reply_time_breached_at.ticket_id,\n    reply_time_breached_at.sla_policy_name,\n    reply_time_breached_at.metric,\n    reply_time_breached_at.ticket_created_at,\n    reply_time_breached_at.sla_applied_at,\n    reply_time_breached_at.sum_lapsed_business_minutes,\n    reply_time_breached_at.target,\n    reply_time_breached_at.in_business_hours,\n    reply_time_breached_at.sla_breach_at,\n    reply_time_breached_at.week_number,\n    min(reply_time_breached_at.sla_schedule_start_at) as sla_schedule_start_at,\n    min(reply_time_breached_at.sla_schedule_end_at) as sla_schedule_end_at,\n    min(reply_at) as agent_reply_at,\n    min(solved_at) as next_solved_at\n  from reply_time_breached_at\n  left join reply_time\n    on reply_time.ticket_id = reply_time_breached_at.ticket_id\n    and reply_time.reply_at > reply_time_breached_at.sla_applied_at\n    and reply_time.source_relation = reply_time_breached_at.source_relation\n  left join ticket_solved_times\n    on reply_time_breached_at.ticket_id = ticket_solved_times.ticket_id\n    and ticket_solved_times.solved_at > reply_time_breached_at.sla_applied_at\n    and ticket_solved_times.source_relation = reply_time_breached_at.source_relation\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n), lagging_time_block as (\n  select\n    *,\n    row_number() over (partition by source_relation, ticket_id, metric, sla_applied_at order by sla_schedule_start_at) as day_index,\n    lead(sla_schedule_start_at) over (partition by source_relation, ticket_id, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at) as next_schedule_start,\n    min(sla_breach_at) over (partition by source_relation, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at rows unbounded preceding) as first_sla_breach_at,\n\t\tcoalesce(lag(sum_lapsed_business_minutes) over (partition by source_relation, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at), 0) as sum_lapsed_business_minutes_new,\n    \n\n    datetime_diff(\n        cast(agent_reply_at as datetime),\n        cast(sla_schedule_start_at as datetime),\n        second\n    )\n\n   / 60 as total_runtime_minutes -- total minutes from sla_schedule_start_at and agent reply time, before taking into account SLA end time\n  from reply_time_breached_at_with_next_reply_timestamp\n\n), filtered_reply_times as (\n  select\n    *\n  from lagging_time_block\n  where (\n    in_business_hours\n      and ((\n        agent_reply_at >= sla_schedule_start_at and agent_reply_at <= sla_schedule_end_at) -- ticket is replied to between a schedule window\n        or (agent_reply_at < sla_schedule_start_at and sum_lapsed_business_minutes_new = 0 and sla_breach_at = first_sla_breach_at and day_index = 1) -- ticket is replied to before any schedule begins and no business minutes have been spent on it\n        or (agent_reply_at is null and next_solved_at >= sla_schedule_start_at and next_solved_at < next_schedule_start) -- There are no reply times, but the ticket is closed and we should capture the closed date as the first and/or next reply time if there is not one preceding.\n        or (next_solved_at is null and agent_reply_at is null and current_timestamp() >= sla_schedule_start_at and (current_timestamp() < next_schedule_start or next_schedule_start is null)) -- ticket is not replied to and therefore active. But only bring through the active SLA record that is most recent (after the last SLA schedule starts but before the next, or if there does not exist a next SLA schedule start time)  \n        or (agent_reply_at > sla_schedule_end_at and (agent_reply_at < next_schedule_start or next_schedule_start is null)) -- ticket is replied to outside sla schedule hours\n      ) and sla_schedule_start_at <= current_timestamp()) -- To help limit the data we do not want to bring through any schedule rows in the future.\n    or not in_business_hours\n\n), reply_time_breached_at_remove_old_sla as (\n  select\n    *,\n    current_timestamp() as current_time_check,\n    lead(sla_applied_at) over (partition by source_relation, ticket_id, metric, in_business_hours order by sla_applied_at) as updated_sla_policy_starts_at,\n    case when \n      lead(sla_applied_at) over (partition by source_relation, ticket_id, metric, in_business_hours order by sla_applied_at) --updated sla policy start at time\n      < sla_breach_at then true else false end as is_stale_sla_policy,\n    case when (sla_breach_at < agent_reply_at and sla_breach_at < next_solved_at)\n                or (sla_breach_at < agent_reply_at and next_solved_at is null)\n                or (agent_reply_at is null and sla_breach_at < next_solved_at)\n                or (agent_reply_at is null and next_solved_at is null)\n      then true\n      else false\n        end as is_sla_breached,\n    sum_lapsed_business_minutes_new + total_runtime_minutes as total_new_minutes -- add total runtime to sum_lapsed_business_minutes_new (the sum_lapsed_business_minutes from prior row)\n  from filtered_reply_times\n\n), reply_time_breach as ( \n  select  \n    *,\n    case when is_sla_breached\n      then sla_breach_at -- If the SLA was breached then record that time as the breach \n      else coalesce(agent_reply_at, next_solved_at) -- If the SLA was not breached then record either the agent_reply_at or next_solve_at as the breach event time as it was achieved.\n    end as sla_update_at,\n    case when total_runtime_minutes < 0 -- agent has already replied to prior to this SLA schedule\n        then 0 -- so don't add new minutes to the SLA\n      when total_new_minutes > sum_lapsed_business_minutes -- if total runtime, regardless of when the SLA schedule ended, is more than the total lapsed business minutes, that means the agent replied after the SLA schedule\n          then sum_lapsed_business_minutes -- the elapsed time after the SLA end time should not be calculated as part of the business minutes, therefore sla_elapsed_time should only be sum_lapsed_business_minutes\n      else sum_lapsed_business_minutes_new + (\n\n    datetime_diff(\n        cast(coalesce(agent_reply_at, next_solved_at, current_time_check) as datetime),\n        cast(sla_schedule_start_at as datetime),\n        second\n    )\n\n   / 60) -- otherwise, the sla_elapsed_time will be sum_lapsed_business_minutes_new (the prior record's sum_lapsed_business_minutes) plus the minutes between SLA schedule start and agent_reply_time. If the agent hasn't replied yet, then the minute counter is still running, hence the coalesce of agent_reply_time and current_time_check.\n    end as sla_elapsed_time\n  from reply_time_breached_at_remove_old_sla \n)\n\nselect *\nfrom reply_time_breach", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__commenter_reply_at", "sql": " __dbt__cte__int_zendesk__commenter_reply_at as (\n\nwith users as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), ticket_updates as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), final as (\n  select \n    ticket_comment.source_relation,\n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n\n  join users as commenter\n    on ticket_comment.user_id = commenter.user_id\n    and ticket_comment.source_relation = commenter.source_relation\n  \n    and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n    and ticket_comment.valid_starting_at < commenter.valid_ending_at\n  \n\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.is_internal_role\n)\n\nselect *\nfrom final\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__commenter_reply_at": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__commenter_reply_at", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/reply_time/int_zendesk__commenter_reply_at.sql", "original_file_path": "models/sla_policy/reply_time/int_zendesk__commenter_reply_at.sql", "unique_id": "model.zendesk.int_zendesk__commenter_reply_at", "fqn": ["zendesk", "sla_policy", "reply_time", "int_zendesk__commenter_reply_at"], "alias": "int_zendesk__commenter_reply_at", "checksum": {"name": "sha256", "checksum": "eae0020ad6040e4198349d9a481ae425562262882ae34d1b141818c451e1b286"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.800128, "relation_name": null, "raw_code": "{% set using_user_role_histories = var('using_user_role_histories', True) and var('using_audit_log', False) %}\nwith users as (\n  select *\n  from {{ ref('int_zendesk__user_role_history' if using_user_role_histories else 'int_zendesk__user_aggregates') }}\n\n), ticket_updates as (\n  select *\n  from {{ ref('int_zendesk__updates') }}\n\n), final as (\n  select \n    ticket_comment.source_relation,\n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n\n  join users as commenter\n    on ticket_comment.user_id = commenter.user_id\n    and ticket_comment.source_relation = commenter.source_relation\n  {% if using_user_role_histories %}\n    and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n    and ticket_comment.valid_starting_at < commenter.valid_ending_at\n  {% endif %}\n\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.is_internal_role\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__user_role_history", "package": null, "version": null}, {"name": "int_zendesk__updates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__user_role_history", "model.zendesk.int_zendesk__updates"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/reply_time/int_zendesk__commenter_reply_at.sql", "compiled": true, "compiled_code": "\nwith users as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), ticket_updates as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), final as (\n  select \n    ticket_comment.source_relation,\n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n\n  join users as commenter\n    on ticket_comment.user_id = commenter.user_id\n    and ticket_comment.source_relation = commenter.source_relation\n  \n    and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n    and ticket_comment.valid_starting_at < commenter.valid_ending_at\n  \n\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.is_internal_role\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__requester_wait_time_calendar_hours": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__requester_wait_time_calendar_hours", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/requester_wait_time/int_zendesk__requester_wait_time_calendar_hours.sql", "original_file_path": "models/sla_policy/requester_wait_time/int_zendesk__requester_wait_time_calendar_hours.sql", "unique_id": "model.zendesk.int_zendesk__requester_wait_time_calendar_hours", "fqn": ["zendesk", "sla_policy", "requester_wait_time", "int_zendesk__requester_wait_time_calendar_hours"], "alias": "int_zendesk__requester_wait_time_calendar_hours", "checksum": {"name": "sha256", "checksum": "3741142b851d9319999db058f6e7e0f8856ac7ce79e1d7415aa2bbb7ba8b4d37"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.803953, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_wait_time_calendar_hours`", "raw_code": "-- Calculate breach time for requester wait time, calendar hours\nwith requester_wait_time_filtered_statuses as (\n\n  select *\n  from {{ ref('int_zendesk__requester_wait_time_filtered_statuses') }}\n  where not in_business_hours\n\n), requester_wait_time_calendar_minutes as (\n\n  select \n    *,\n    {{ dbt.datediff(\n        'valid_starting_at',\n        'valid_ending_at',\n        'minute' )}} as calendar_minutes,\n    sum({{ dbt.datediff(\n            'valid_starting_at', \n            'valid_ending_at', \n            'minute') }} ) \n      over (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from requester_wait_time_filtered_statuses\n\n), requester_wait_time_calendar_minutes_flagged as (\n\nselect \n  requester_wait_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  requester_wait_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    {{ fivetran_utils.timestamp_add(\n      'minute',\n      '(remaining_target_minutes + calendar_minutes)',\n      'valid_starting_at', \n      ) }} as sla_breach_at\n  from requester_wait_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__requester_wait_time_filtered_statuses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.fivetran_utils.timestamp_add"], "nodes": ["model.zendesk.int_zendesk__requester_wait_time_filtered_statuses"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/requester_wait_time/int_zendesk__requester_wait_time_calendar_hours.sql", "compiled": true, "compiled_code": "-- Calculate breach time for requester wait time, calendar hours\nwith requester_wait_time_filtered_statuses as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_wait_time_filtered_statuses`\n  where not in_business_hours\n\n), requester_wait_time_calendar_minutes as (\n\n  select \n    *,\n    \n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   as calendar_minutes,\n    sum(\n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   ) \n      over (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from requester_wait_time_filtered_statuses\n\n), requester_wait_time_calendar_minutes_flagged as (\n\nselect \n  requester_wait_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  requester_wait_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    \n\n        timestamp_add(valid_starting_at, interval  (remaining_target_minutes + calendar_minutes) minute)\n\n as sla_breach_at\n  from requester_wait_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__requester_wait_time_business_hours": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__requester_wait_time_business_hours", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/requester_wait_time/int_zendesk__requester_wait_time_business_hours.sql", "original_file_path": "models/sla_policy/requester_wait_time/int_zendesk__requester_wait_time_business_hours.sql", "unique_id": "model.zendesk.int_zendesk__requester_wait_time_business_hours", "fqn": ["zendesk", "sla_policy", "requester_wait_time", "int_zendesk__requester_wait_time_business_hours"], "alias": "int_zendesk__requester_wait_time_business_hours", "checksum": {"name": "sha256", "checksum": "373788b58fc1cba3d176c609b5a182556a9ebcd85bcc35fced0e2b4d0b7d2bc2"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.807861, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_wait_time_business_hours`", "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\n-- REQUESTER WAIT TIME\n-- This is complicated, as SLAs minutes are only counted while the ticket is in 'new', 'open', and 'on-hold' status.\n\n-- Additionally, for business hours, only 'new', 'open', and 'on-hold' status hours are counted if they are also during business hours\nwith requester_wait_time_filtered_statuses as (\n\n  select *\n  from {{ ref('int_zendesk__requester_wait_time_filtered_statuses') }}\n  where in_business_hours\n\n), schedule as (\n\n  select * \n  from {{ ref('int_zendesk__schedule_spine') }}\n\n), ticket_schedules as (\n\n  select * \n  from {{ ref('int_zendesk__ticket_schedules') }}\n  \n-- cross schedules with work time\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      requester_wait_time_filtered_statuses.source_relation,\n      requester_wait_time_filtered_statuses.ticket_id,\n      requester_wait_time_filtered_statuses.sla_applied_at,\n      requester_wait_time_filtered_statuses.target,\n      requester_wait_time_filtered_statuses.sla_policy_name,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as valid_starting_at,\n      least(valid_ending_at, schedule_invalidated_at) as valid_ending_at,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      valid_starting_at as status_valid_starting_at,\n      valid_ending_at as status_valid_ending_at\n\n    from requester_wait_time_filtered_statuses\n    left join ticket_schedules\n      on requester_wait_time_filtered_statuses.ticket_id = ticket_schedules.ticket_id\n      and requester_wait_time_filtered_statuses.source_relation = ticket_schedules.source_relation\n    where {{ dbt.datediff(\n              'greatest(valid_starting_at, schedule_created_at)', \n              'least(valid_ending_at, schedule_invalidated_at)', \n              'second') }} > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      target,\n      sla_policy_name,\n      schedule_id,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      ({{ dbt.datediff(\n            \"cast(\" ~ zendesk.fivetran_week_start('ticket_status_crossed_with_schedule.valid_starting_at') ~ \"as \" ~ dbt.type_timestamp() ~ \")\", \n            \"cast(ticket_status_crossed_with_schedule.valid_starting_at as \" ~ dbt.type_timestamp() ~ \")\",\n            'second') }} /60\n          ) as valid_starting_at_in_minutes_from_week,\n      ({{ dbt.datediff(\n              'ticket_status_crossed_with_schedule.valid_starting_at', \n              'ticket_status_crossed_with_schedule.valid_ending_at',\n              'second') }} /60\n            ) as raw_delta_in_minutes,\n    {{ zendesk.fivetran_week_start('ticket_status_crossed_with_schedule.valid_starting_at') }} as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    {{ dbt_utils.group_by(n=11) }}\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(52) }}\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as {{ dbt.type_int() }}) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((valid_starting_at_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_period_requester_wait_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      target,\n      sla_policy_name,\n      valid_starting_at_in_minutes_from_week,\n      raw_delta_in_minutes,\n      week_number,\n      schedule_id,\n      start_week_date,\n      greatest(0, valid_starting_at_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time_minute,\n      least(valid_starting_at_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time_minute\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods_agent as (\n  \n    select \n      weekly_period_requester_wait_time.source_relation,\n      weekly_period_requester_wait_time.ticket_id,\n      weekly_period_requester_wait_time.sla_applied_at,\n      weekly_period_requester_wait_time.target,\n      weekly_period_requester_wait_time.sla_policy_name,\n      weekly_period_requester_wait_time.valid_starting_at,\n      weekly_period_requester_wait_time.valid_ending_at,\n      weekly_period_requester_wait_time.week_number,\n      weekly_period_requester_wait_time.ticket_week_start_time_minute,\n      weekly_period_requester_wait_time.ticket_week_end_time_minute,\n      coalesce(schedule.start_time_utc, 0) as schedule_start_time,  -- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n      schedule.end_time_utc as schedule_end_time,\n      coalesce(\n        least(ticket_week_end_time_minute, schedule.end_time_utc)\n        - greatest(weekly_period_requester_wait_time.ticket_week_start_time_minute, schedule.start_time_utc),\n        0) as scheduled_minutes --- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n    from weekly_period_requester_wait_time\n    left join schedule -- using a left join to account for tickets started and completed entirely outside of a schedule, otherwise they are filtered out\n      on ticket_week_start_time_minute <= schedule.end_time_utc \n      and ticket_week_end_time_minute >= schedule.start_time_utc\n      and weekly_period_requester_wait_time.schedule_id = schedule.schedule_id\n      and weekly_period_requester_wait_time.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_end_time_minute as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) > cast(schedule.valid_from as date)\n      and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_start_time_minute as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) < cast(schedule.valid_until as date)\n\n), intercepted_periods_with_running_total as (\n  \n    select \n      *,\n      sum(scheduled_minutes) over \n        (partition by source_relation, ticket_id, sla_applied_at \n          order by valid_starting_at, week_number, schedule_end_time\n          rows between unbounded preceding and current row)\n        as running_total_scheduled_minutes\n\n    from intercepted_periods_agent\n\n\n), intercepted_periods_agent_with_breach_flag as (\n  select \n    intercepted_periods_with_running_total.*,\n    target - running_total_scheduled_minutes as remaining_target_minutes,\n    lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) as lag_check,\n    case when (target - running_total_scheduled_minutes) = 0 then true\n      when (target - running_total_scheduled_minutes) < 0 \n        and \n          (lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) > 0 \n          or \n          lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) is null) \n          then true else false end as is_breached_during_schedule\n          \n  from  intercepted_periods_with_running_total\n\n), intercepted_periods_agent_filtered as (\n\n  select\n    *,\n    (remaining_target_minutes + scheduled_minutes) as breach_minutes,\n    greatest(ticket_week_start_time_minute, schedule_start_time) + (remaining_target_minutes + scheduled_minutes) as breach_minutes_from_week\n  from intercepted_periods_agent_with_breach_flag\n\n), requester_wait_business_breach as (\n  \n  select \n    *,\n    {{ fivetran_utils.timestamp_add(\n      \"minute\",\n      \"cast(((7*24*60) * week_number) + breach_minutes_from_week as \" ~ dbt.type_int() ~ \" )\",\n      \"cast(\" ~ zendesk.fivetran_week_start('valid_starting_at') ~ \" as \" ~ dbt.type_timestamp() ~ \" )\"\n      ) }} as sla_breach_at\n  from intercepted_periods_agent_filtered\n\n)\n\nselect * \nfrom requester_wait_business_breach", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__requester_wait_time_filtered_statuses", "package": null, "version": null}, {"name": "int_zendesk__schedule_spine", "package": null, "version": null}, {"name": "int_zendesk__ticket_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.zendesk.fivetran_week_start", "macro.dbt.type_timestamp", "macro.dbt_utils.group_by", "macro.dbt_utils.generate_series", "macro.dbt.type_int", "macro.dbt.dateadd", "macro.fivetran_utils.timestamp_add"], "nodes": ["model.zendesk.int_zendesk__requester_wait_time_filtered_statuses", "model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_schedules"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/requester_wait_time/int_zendesk__requester_wait_time_business_hours.sql", "compiled": true, "compiled_code": "\n\n-- REQUESTER WAIT TIME\n-- This is complicated, as SLAs minutes are only counted while the ticket is in 'new', 'open', and 'on-hold' status.\n\n-- Additionally, for business hours, only 'new', 'open', and 'on-hold' status hours are counted if they are also during business hours\nwith requester_wait_time_filtered_statuses as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_wait_time_filtered_statuses`\n  where in_business_hours\n\n), schedule as (\n\n  select * \n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_schedules as (\n\n  select * \n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n  \n-- cross schedules with work time\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      requester_wait_time_filtered_statuses.source_relation,\n      requester_wait_time_filtered_statuses.ticket_id,\n      requester_wait_time_filtered_statuses.sla_applied_at,\n      requester_wait_time_filtered_statuses.target,\n      requester_wait_time_filtered_statuses.sla_policy_name,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as valid_starting_at,\n      least(valid_ending_at, schedule_invalidated_at) as valid_ending_at,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      valid_starting_at as status_valid_starting_at,\n      valid_ending_at as status_valid_ending_at\n\n    from requester_wait_time_filtered_statuses\n    left join ticket_schedules\n      on requester_wait_time_filtered_statuses.ticket_id = ticket_schedules.ticket_id\n      and requester_wait_time_filtered_statuses.source_relation = ticket_schedules.source_relation\n    where \n\n    datetime_diff(\n        cast(least(valid_ending_at, schedule_invalidated_at) as datetime),\n        cast(greatest(valid_starting_at, schedule_created_at) as datetime),\n        second\n    )\n\n   > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      target,\n      sla_policy_name,\n      schedule_id,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      (\n\n    datetime_diff(\n        cast(cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as valid_starting_at_in_minutes_from_week,\n      (\n\n    datetime_diff(\n        cast(ticket_status_crossed_with_schedule.valid_ending_at as datetime),\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as datetime),\n        second\n    )\n\n   /60\n            ) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp),\n        week\n    ) as date) as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7,8,9,10,11\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((valid_starting_at_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_period_requester_wait_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      sla_applied_at,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      target,\n      sla_policy_name,\n      valid_starting_at_in_minutes_from_week,\n      raw_delta_in_minutes,\n      week_number,\n      schedule_id,\n      start_week_date,\n      greatest(0, valid_starting_at_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time_minute,\n      least(valid_starting_at_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time_minute\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods_agent as (\n  \n    select \n      weekly_period_requester_wait_time.source_relation,\n      weekly_period_requester_wait_time.ticket_id,\n      weekly_period_requester_wait_time.sla_applied_at,\n      weekly_period_requester_wait_time.target,\n      weekly_period_requester_wait_time.sla_policy_name,\n      weekly_period_requester_wait_time.valid_starting_at,\n      weekly_period_requester_wait_time.valid_ending_at,\n      weekly_period_requester_wait_time.week_number,\n      weekly_period_requester_wait_time.ticket_week_start_time_minute,\n      weekly_period_requester_wait_time.ticket_week_end_time_minute,\n      coalesce(schedule.start_time_utc, 0) as schedule_start_time,  -- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n      schedule.end_time_utc as schedule_end_time,\n      coalesce(\n        least(ticket_week_end_time_minute, schedule.end_time_utc)\n        - greatest(weekly_period_requester_wait_time.ticket_week_start_time_minute, schedule.start_time_utc),\n        0) as scheduled_minutes --- fill 0 for schedules completely outside schedule window. Only necessary for this field for use downstream.\n    from weekly_period_requester_wait_time\n    left join schedule -- using a left join to account for tickets started and completed entirely outside of a schedule, otherwise they are filtered out\n      on ticket_week_start_time_minute <= schedule.end_time_utc \n      and ticket_week_end_time_minute >= schedule.start_time_utc\n      and weekly_period_requester_wait_time.schedule_id = schedule.schedule_id\n      and weekly_period_requester_wait_time.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time_minute as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time_minute as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n\n), intercepted_periods_with_running_total as (\n  \n    select \n      *,\n      sum(scheduled_minutes) over \n        (partition by source_relation, ticket_id, sla_applied_at \n          order by valid_starting_at, week_number, schedule_end_time\n          rows between unbounded preceding and current row)\n        as running_total_scheduled_minutes\n\n    from intercepted_periods_agent\n\n\n), intercepted_periods_agent_with_breach_flag as (\n  select \n    intercepted_periods_with_running_total.*,\n    target - running_total_scheduled_minutes as remaining_target_minutes,\n    lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) as lag_check,\n    case when (target - running_total_scheduled_minutes) = 0 then true\n      when (target - running_total_scheduled_minutes) < 0 \n        and \n          (lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) > 0 \n          or \n          lag(target - running_total_scheduled_minutes) over\n          (partition by source_relation, ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) is null) \n          then true else false end as is_breached_during_schedule\n          \n  from  intercepted_periods_with_running_total\n\n), intercepted_periods_agent_filtered as (\n\n  select\n    *,\n    (remaining_target_minutes + scheduled_minutes) as breach_minutes,\n    greatest(ticket_week_start_time_minute, schedule_start_time) + (remaining_target_minutes + scheduled_minutes) as breach_minutes_from_week\n  from intercepted_periods_agent_with_breach_flag\n\n), requester_wait_business_breach as (\n  \n  select \n    *,\n    \n\n        timestamp_add(cast(cast(timestamp_trunc(\n        cast(valid_starting_at as timestamp),\n        week\n    ) as date) as timestamp ), interval  cast(((7*24*60) * week_number) + breach_minutes_from_week as INT64 ) minute)\n\n as sla_breach_at\n  from intercepted_periods_agent_filtered\n\n)\n\nselect * \nfrom requester_wait_business_breach", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__requester_wait_time_filtered_statuses", "resource_type": "model", "package_name": "zendesk", "path": "sla_policy/requester_wait_time/int_zendesk__requester_wait_time_filtered_statuses.sql", "original_file_path": "models/sla_policy/requester_wait_time/int_zendesk__requester_wait_time_filtered_statuses.sql", "unique_id": "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses", "fqn": ["zendesk", "sla_policy", "requester_wait_time", "int_zendesk__requester_wait_time_filtered_statuses"], "alias": "int_zendesk__requester_wait_time_filtered_statuses", "checksum": {"name": "sha256", "checksum": "363865e10b2081e4aad6b98d431630be1d91d7dd33d5cad4bbedc2d26f652c85"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.8166442, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_wait_time_filtered_statuses`", "raw_code": "with requester_wait_time_sla as (\n\n  select *\n  from {{ ref('int_zendesk__sla_policy_applied') }}\n  where metric = 'requester_wait_time'\n\n), ticket_historical_status as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_historical_status') }}\n    \n--This captures the statuses of the ticket while the requester wait time sla was active for the ticket.\n), requester_wait_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.ticket_id,\n    ticket_historical_status.source_relation,\n    greatest(ticket_historical_status.valid_starting_at, requester_wait_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      {{ fivetran_utils.timestamp_add('day', 30, \"\" ~ dbt.current_timestamp() ~ \"\") }} ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    requester_wait_time_sla.sla_applied_at,\n    requester_wait_time_sla.target,\n    requester_wait_time_sla.sla_policy_name,\n    requester_wait_time_sla.ticket_created_at,\n    requester_wait_time_sla.in_business_hours\n  from ticket_historical_status\n  join requester_wait_time_sla\n    on ticket_historical_status.ticket_id = requester_wait_time_sla.ticket_id\n    and ticket_historical_status.source_relation = requester_wait_time_sla.source_relation\n  where ticket_historical_status.status in ('new', 'open', 'on-hold', 'hold') -- these are the only statuses that count as \"requester wait time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom requester_wait_time_filtered_statuses", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__sla_policy_applied", "package": null, "version": null}, {"name": "int_zendesk__ticket_historical_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.fivetran_utils.timestamp_add"], "nodes": ["model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.int_zendesk__ticket_historical_status"]}, "compiled_path": "target/compiled/zendesk/models/sla_policy/requester_wait_time/int_zendesk__requester_wait_time_filtered_statuses.sql", "compiled": true, "compiled_code": "with requester_wait_time_sla as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__sla_policy_applied`\n  where metric = 'requester_wait_time'\n\n), ticket_historical_status as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    \n--This captures the statuses of the ticket while the requester wait time sla was active for the ticket.\n), requester_wait_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.ticket_id,\n    ticket_historical_status.source_relation,\n    greatest(ticket_historical_status.valid_starting_at, requester_wait_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      \n\n        timestamp_add(current_timestamp(), interval  30 day)\n\n ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    requester_wait_time_sla.sla_applied_at,\n    requester_wait_time_sla.target,\n    requester_wait_time_sla.sla_policy_name,\n    requester_wait_time_sla.ticket_created_at,\n    requester_wait_time_sla.in_business_hours\n  from ticket_historical_status\n  join requester_wait_time_sla\n    on ticket_historical_status.ticket_id = requester_wait_time_sla.ticket_id\n    and ticket_historical_status.source_relation = requester_wait_time_sla.source_relation\n  where ticket_historical_status.status in ('new', 'open', 'on-hold', 'hold') -- these are the only statuses that count as \"requester wait time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom requester_wait_time_filtered_statuses", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_reply_times": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_reply_times", "resource_type": "model", "package_name": "zendesk", "path": "reply_times/int_zendesk__ticket_reply_times.sql", "original_file_path": "models/reply_times/int_zendesk__ticket_reply_times.sql", "unique_id": "model.zendesk.int_zendesk__ticket_reply_times", "fqn": ["zendesk", "reply_times", "int_zendesk__ticket_reply_times"], "alias": "int_zendesk__ticket_reply_times", "checksum": {"name": "sha256", "checksum": "714fe34a087fe7964e2cf7acff9e41f10507f59e90fc6e5ae532eea46f7bdd59"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.820472, "relation_name": null, "raw_code": "with ticket_public_comments as (\n\n    select *\n    from {{ ref('int_zendesk__comments_enriched') }}\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  {{ dbt_utils.group_by(n=4) }}\n\n)\n\n  select\n    *,\n    ({{ dbt.datediff(\n      'end_user_comment_created_at',\n      'agent_responded_at',\n      'second') }} / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__comments_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt.datediff"], "nodes": ["model.zendesk.int_zendesk__comments_enriched"]}, "compiled_path": "target/compiled/zendesk/models/reply_times/int_zendesk__ticket_reply_times.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n), ticket_public_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  group by 1,2,3,4\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__comments_enriched", "sql": " __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_reply_times_calendar": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_reply_times_calendar", "resource_type": "model", "package_name": "zendesk", "path": "reply_times/int_zendesk__ticket_reply_times_calendar.sql", "original_file_path": "models/reply_times/int_zendesk__ticket_reply_times_calendar.sql", "unique_id": "model.zendesk.int_zendesk__ticket_reply_times_calendar", "fqn": ["zendesk", "reply_times", "int_zendesk__ticket_reply_times_calendar"], "alias": "int_zendesk__ticket_reply_times_calendar", "checksum": {"name": "sha256", "checksum": "07167543b61b1fea074921739da3c8f4bb7f8379c47992ba8a96e9b2c47b02ae"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.824149, "relation_name": null, "raw_code": "with ticket as (\n\n  select *\n  from {{ ref('stg_zendesk__ticket') }}\n\n), ticket_reply_times as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_reply_times') }}\n\n)\n\nselect\n  ticket.source_relation,\n  ticket.ticket_id,\n  sum(case when is_first_comment then reply_time_calendar_minutes\n    else null end) as first_reply_time_calendar_minutes,\n  sum(reply_time_calendar_minutes) as total_reply_time_calendar_minutes --total combined time the customer waits for internal response\n  \nfrom ticket\nleft join ticket_reply_times\n  on ticket.ticket_id = ticket_reply_times.ticket_id\n  and ticket.source_relation = ticket_reply_times.source_relation\n\ngroup by 1, 2", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "int_zendesk__ticket_reply_times", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk_source.stg_zendesk__ticket", "model.zendesk.int_zendesk__ticket_reply_times"]}, "compiled_path": "target/compiled/zendesk/models/reply_times/int_zendesk__ticket_reply_times_calendar.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n),  __dbt__cte__int_zendesk__ticket_reply_times as (\nwith ticket_public_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  group by 1,2,3,4\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2\n), ticket as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_reply_times as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_reply_times\n\n)\n\nselect\n  ticket.source_relation,\n  ticket.ticket_id,\n  sum(case when is_first_comment then reply_time_calendar_minutes\n    else null end) as first_reply_time_calendar_minutes,\n  sum(reply_time_calendar_minutes) as total_reply_time_calendar_minutes --total combined time the customer waits for internal response\n  \nfrom ticket\nleft join ticket_reply_times\n  on ticket.ticket_id = ticket_reply_times.ticket_id\n  and ticket.source_relation = ticket_reply_times.source_relation\n\ngroup by 1, 2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__comments_enriched", "sql": " __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n)"}, {"id": "model.zendesk.int_zendesk__ticket_reply_times", "sql": " __dbt__cte__int_zendesk__ticket_reply_times as (\nwith ticket_public_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  group by 1,2,3,4\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__comments_enriched": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__comments_enriched", "resource_type": "model", "package_name": "zendesk", "path": "reply_times/int_zendesk__comments_enriched.sql", "original_file_path": "models/reply_times/int_zendesk__comments_enriched.sql", "unique_id": "model.zendesk.int_zendesk__comments_enriched", "fqn": ["zendesk", "reply_times", "int_zendesk__comments_enriched"], "alias": "int_zendesk__comments_enriched", "checksum": {"name": "sha256", "checksum": "2ea79278917b116d655587221978951d0b7f89861c99abf4eec2c0fa7e0d4739"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.827507, "relation_name": null, "raw_code": "{% set using_user_role_histories = var('using_user_role_histories', True) and var('using_audit_log', False) %}\n\nwith ticket_comment as (\n\n    select *\n    from {{ ref('int_zendesk__updates') }}\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from {{ ref('int_zendesk__user_role_history' if using_user_role_histories else 'int_zendesk__user_aggregates') }}\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    {% if using_user_role_histories %}\n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    {% endif %}\n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}, {"name": "int_zendesk__user_role_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__updates", "model.zendesk.int_zendesk__user_role_history"]}, "compiled_path": "target/compiled/zendesk/models/reply_times/int_zendesk__comments_enriched.sql", "compiled": true, "compiled_code": "\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_first_reply_time_business": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_first_reply_time_business", "resource_type": "model", "package_name": "zendesk", "path": "reply_times/int_zendesk__ticket_first_reply_time_business.sql", "original_file_path": "models/reply_times/int_zendesk__ticket_first_reply_time_business.sql", "unique_id": "model.zendesk.int_zendesk__ticket_first_reply_time_business", "fqn": ["zendesk", "reply_times", "int_zendesk__ticket_first_reply_time_business"], "alias": "int_zendesk__ticket_first_reply_time_business", "checksum": {"name": "sha256", "checksum": "9c2ec2c4bce3f2143591c30da6fd605ce07e210db4afc9891777ea3564f4cfa4"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1751990096.8320699, "relation_name": null, "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_reply_times as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_reply_times') }}\n\n), ticket_schedules as (\n\n    select \n      *\n    from {{ ref('int_zendesk__ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('int_zendesk__schedule_spine') }}\n\n), first_reply_time as (\n\n    select\n      source_relation,\n      ticket_id,\n      end_user_comment_created_at,\n      agent_responded_at\n\n    from ticket_reply_times\n    where is_first_comment\n\n), ticket_first_reply_time as (\n\n  select \n    first_reply_time.source_relation,\n    first_reply_time.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(first_reply_time.agent_responded_at) as agent_responded_at,\n\n    ({{ dbt.datediff(\n            \"cast(\" ~ zendesk.fivetran_week_start('ticket_schedules.schedule_created_at') ~ \"as \" ~ dbt.type_timestamp() ~ \")\", \n            \"cast(ticket_schedules.schedule_created_at as \" ~ dbt.type_timestamp() ~ \")\",\n            'second') }} /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        {{ dbt.datediff(\n          'ticket_schedules.schedule_created_at',\n          'least(ticket_schedules.schedule_invalidated_at, min(first_reply_time.agent_responded_at))',\n          'second') }}/60\n        )) as raw_delta_in_minutes,\n    {{ zendesk.fivetran_week_start('ticket_schedules.schedule_created_at') }} as start_week_date\n  \n  from first_reply_time\n  join ticket_schedules \n    on first_reply_time.ticket_id = ticket_schedules.ticket_id\n    and first_reply_time.source_relation = ticket_schedules.source_relation\n  {{ dbt_utils.group_by(n=5) }}\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(52) }}\n\n), weeks_cross_ticket_first_reply as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_reply_time.*,\n      cast(generated_number - 1 as {{ dbt.type_int() }}) as week_number\n\n    from ticket_first_reply_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n    select \n      weeks_cross_ticket_first_reply.*, \n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    from weeks_cross_ticket_first_reply\n\n), intercepted_periods as (\n\n  select \n      weekly_periods.source_relation,\n      ticket_id,\n      week_number,\n      weekly_periods.schedule_id,\n      ticket_week_start_time,\n      ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_end_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) > cast(schedule.valid_from as date)\n    and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_start_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) < cast(schedule.valid_until as date)\n      \n)\n\n  select \n    ticket_id, \n    source_relation,\n    sum(scheduled_minutes) as first_reply_time_business_minutes\n  from intercepted_periods\n  group by 1, 2", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_reply_times", "package": null, "version": null}, {"name": "int_zendesk__ticket_schedules", "package": null, "version": null}, {"name": "int_zendesk__schedule_spine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk.fivetran_week_start", "macro.dbt.type_timestamp", "macro.dbt.datediff", "macro.dbt_utils.group_by", "macro.dbt_utils.generate_series", "macro.dbt.type_int", "macro.dbt.dateadd"], "nodes": ["model.zendesk.int_zendesk__ticket_reply_times", "model.zendesk.int_zendesk__ticket_schedules", "model.zendesk.int_zendesk__schedule_spine"]}, "compiled_path": "target/compiled/zendesk/models/reply_times/int_zendesk__ticket_first_reply_time_business.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n),  __dbt__cte__int_zendesk__ticket_reply_times as (\nwith ticket_public_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  group by 1,2,3,4\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2\n), ticket_reply_times as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_reply_times\n\n), ticket_schedules as (\n\n    select \n      *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), first_reply_time as (\n\n    select\n      source_relation,\n      ticket_id,\n      end_user_comment_created_at,\n      agent_responded_at\n\n    from ticket_reply_times\n    where is_first_comment\n\n), ticket_first_reply_time as (\n\n  select \n    first_reply_time.source_relation,\n    first_reply_time.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(first_reply_time.agent_responded_at) as agent_responded_at,\n\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(first_reply_time.agent_responded_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n  \n  from first_reply_time\n  join ticket_schedules \n    on first_reply_time.ticket_id = ticket_schedules.ticket_id\n    and first_reply_time.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_reply as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_reply_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_first_reply_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n    select \n      weeks_cross_ticket_first_reply.*, \n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    from weeks_cross_ticket_first_reply\n\n), intercepted_periods as (\n\n  select \n      weekly_periods.source_relation,\n      ticket_id,\n      week_number,\n      weekly_periods.schedule_id,\n      ticket_week_start_time,\n      ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n      \n)\n\n  select \n    ticket_id, \n    source_relation,\n    sum(scheduled_minutes) as first_reply_time_business_minutes\n  from intercepted_periods\n  group by 1, 2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__comments_enriched", "sql": " __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n)"}, {"id": "model.zendesk.int_zendesk__ticket_reply_times", "sql": " __dbt__cte__int_zendesk__ticket_reply_times as (\nwith ticket_public_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n    where is_public\n\n), end_user_comments as (\n  \n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.source_relation,\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n    and end_user_comments.source_relation = agent_comments.source_relation\n  group by 1,2,3,4\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__field_history_enriched": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__field_history_enriched", "resource_type": "model", "package_name": "zendesk", "path": "ticket_history/int_zendesk__field_history_enriched.sql", "original_file_path": "models/ticket_history/int_zendesk__field_history_enriched.sql", "unique_id": "model.zendesk.int_zendesk__field_history_enriched", "fqn": ["zendesk", "ticket_history", "int_zendesk__field_history_enriched"], "alias": "int_zendesk__field_history_enriched", "checksum": {"name": "sha256", "checksum": "05f3854b00477b0a1bef56a053257eedbb24116f2f75340e54ef2e0b3513a1c8"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.838866, "relation_name": null, "raw_code": "with ticket_field_history as (\n\n    select *\n    from {{ ref('stg_zendesk__ticket_field_history') }}\n\n), updater_info as (\n    select *\n    from {{ ref('int_zendesk__updater_information') }}\n\n), final as (\n    select\n        ticket_field_history.*\n\n        {% if var('ticket_field_history_updater_columns')%} --The below will be run if any fields are included in the variable within the dbt_project.yml.\n            {% for col in var('ticket_field_history_updater_columns') %} --Iterating through the updater fields included in the variable.\n\n                --The below statements are needed to populate Zendesk automated fields for when the zendesk triggers automatically change fields based on user defined triggers.\n                {% if col in ['updater_is_active'] %}\n                    ,coalesce(updater_info.{{ col|lower }}, true) as {{ col }}\n\n                {% elif col in ['updater_user_id','updater_organization_id'] %}\n                    ,coalesce(updater_info.{{ col|lower }}, -1) as {{ col }}\n                \n                {% elif col in ['updater_last_login_at'] %}\n                    ,coalesce(updater_info.{{ col|lower }}, current_timestamp) as {{ col }}\n                \n                {% else %}\n                    ,coalesce(updater_info.{{ col|lower }}, concat('zendesk_trigger_change_', '{{ col }}' )) as {{ col }}\n  \n                {% endif %}\n            {% endfor %}\n        {% endif %}  \n\n    from ticket_field_history\n\n    left join updater_info\n        on ticket_field_history.user_id = updater_info.updater_user_id\n        and ticket_field_history.source_relation = updater_info.source_relation\n)\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_field_history", "package": null, "version": null}, {"name": "int_zendesk__updater_information", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk_source.stg_zendesk__ticket_field_history", "model.zendesk.int_zendesk__updater_information"]}, "compiled_path": "target/compiled/zendesk/models/ticket_history/int_zendesk__field_history_enriched.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_zendesk__updater_information as (\nwith users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_aggregates`\n\n--If using organizations, this will be included, if not it will be ignored.\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__organization_aggregates`\n\n\n), final as (\n    select\n        users.source_relation,\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        \n        ,users.user_tags as updater_user_tags\n        \n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        \n        ,organizations.organization_id as updater_organization_id\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,organizations.domain_names as updater_organization_domain_names\n        \n\n        --If you use organization tags, this will be included, if not it will be ignored.\n        \n        ,organizations.organization_tags as updater_organization_organization_tags\n        \n    from users\n\n    \n    left join organizations\n        on users.source_relation = organizations.source_relation\n        and users.organization_id = organizations.organization_id\n    \n)\n\nselect * \nfrom final\n), ticket_field_history as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history`\n\n), updater_info as (\n    select *\n    from __dbt__cte__int_zendesk__updater_information\n\n), final as (\n    select\n        ticket_field_history.*\n\n          \n\n    from ticket_field_history\n\n    left join updater_info\n        on ticket_field_history.user_id = updater_info.updater_user_id\n        and ticket_field_history.source_relation = updater_info.source_relation\n)\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__updater_information", "sql": " __dbt__cte__int_zendesk__updater_information as (\nwith users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_aggregates`\n\n--If using organizations, this will be included, if not it will be ignored.\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__organization_aggregates`\n\n\n), final as (\n    select\n        users.source_relation,\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        \n        ,users.user_tags as updater_user_tags\n        \n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        \n        ,organizations.organization_id as updater_organization_id\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,organizations.domain_names as updater_organization_domain_names\n        \n\n        --If you use organization tags, this will be included, if not it will be ignored.\n        \n        ,organizations.organization_tags as updater_organization_organization_tags\n        \n    from users\n\n    \n    left join organizations\n        on users.source_relation = organizations.source_relation\n        and users.organization_id = organizations.organization_id\n    \n)\n\nselect * \nfrom final\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__field_history_pivot": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__field_history_pivot", "resource_type": "model", "package_name": "zendesk", "path": "ticket_history/int_zendesk__field_history_pivot.sql", "original_file_path": "models/ticket_history/int_zendesk__field_history_pivot.sql", "unique_id": "model.zendesk.int_zendesk__field_history_pivot", "fqn": ["zendesk", "ticket_history", "int_zendesk__field_history_pivot"], "alias": "int_zendesk__field_history_pivot", "checksum": {"name": "sha256", "checksum": "80c4b2fc53fc6c061913c41cb6fbe683d2630599a8140dc318dc24dbd6fa4174"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ticket_day_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "partition_by": {"field": "date_day", "data_type": "date", "granularity": "month"}, "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "incremental", "partition_by": {"field": "date_day", "data_type": "date", "granularity": "month"}, "unique_key": "ticket_day_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1751990096.843796, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_history_pivot`", "raw_code": "-- depends_on: {{ ref('stg_zendesk__ticket_field_history') }}\n\n{{ \n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date', 'granularity': 'month'} if target.type not in ['spark', 'databricks'] else ['date_day'],\n        unique_key='ticket_day_id',\n        incremental_strategy = 'merge' if target.type not in ('snowflake', 'postgres', 'redshift') else 'delete+insert',\n        file_format='delta'\n        ) \n}}\n\n{% if execute and flags.WHICH in ('run', 'build') -%}\n    {% set results = run_query('select distinct field_name from ' ~ var('field_history') ) %}\n    {% set results_list = results.columns[0].values() %}\n{% endif -%}\n\nwith field_history as (\n\n    select\n        source_relation,\n        ticket_id,\n        field_name,\n        valid_ending_at,\n        valid_starting_at\n\n        --Only runs if the user passes updater fields through the final ticket field history model\n        {% if var('ticket_field_history_updater_columns') %}\n        ,\n        {{ var('ticket_field_history_updater_columns') | join (\", \")}}\n\n        {% endif %}\n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in zendesk__ticket_field_history\n        ,case when value is null then 'is_null' else value end as value\n\n    from {{ ref('int_zendesk__field_history_enriched') }}\n    {% if is_incremental() %}\n    where cast( {{ dbt.date_trunc('day', 'valid_starting_at') }} as date) >= (select max(date_day) from {{ this }})\n    {% endif %}\n\n), event_order as (\n\n    select \n        *,\n        row_number() over (\n            partition by source_relation, cast(valid_starting_at as date), ticket_id, field_name\n            order by valid_starting_at desc\n            ) as row_num\n    from field_history\n\n), filtered as (\n\n    -- Find the last event that occurs on each day for each ticket\n\n    select *\n    from event_order\n    where row_num = 1\n\n), pivots as (\n\n    -- For each column that is in both the ticket_field_history_columns variable and the field_history table,\n    -- pivot out the value into it's own column. This will feed the daily slowly changing dimension model.\n\n    select\n        source_relation, \n        ticket_id,\n        cast({{ dbt.date_trunc('day', 'valid_starting_at') }} as date) as date_day\n\n        {% for col in results_list if col in var('ticket_field_history_columns') %}\n            {% set col_xf = col|lower %}\n            ,min(case when lower(field_name) = '{{ col|lower }}' then filtered.value end) as {{ col_xf }}\n\n            --Only runs if the user passes updater fields through the final ticket field history model\n            {% if var('ticket_field_history_updater_columns') %}\n\n                {% for upd in var('ticket_field_history_updater_columns') %}\n\n                    {% set upd_xf = (col|lower + '_' + upd ) %} --Creating the appropriate column name based on the history field + update field names.\n\n                    {% if upd == 'updater_is_active' and target.type in ('postgres', 'redshift') %}\n\n                        ,bool_or(case when lower(field_name) = '{{ col|lower }}' then filtered.{{ upd }} end) as {{ upd_xf }}\n\n                    {% else %}\n\n                        ,min(case when lower(field_name) = '{{ col|lower }}' then filtered.{{ upd }} end) as {{ upd_xf }}\n\n                    {% endif %}\n                {% endfor %}\n            {% endif %}\n        {% endfor %}\n    \n    from filtered\n    group by 1,2,3\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.generate_surrogate_key(['source_relation','ticket_id','date_day'])}} as ticket_day_id\n    from pivots\n\n)\n\nselect *\nfrom surrogate_key", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_field_history", "package": null, "version": null}, {"name": "int_zendesk__field_history_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.date_trunc", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_field_history", "model.zendesk.int_zendesk__field_history_enriched"]}, "compiled_path": "target/compiled/zendesk/models/ticket_history/int_zendesk__field_history_pivot.sql", "compiled": true, "compiled_code": "-- depends_on: `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history`\n\n\n\nwith  __dbt__cte__int_zendesk__updater_information as (\nwith users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_aggregates`\n\n--If using organizations, this will be included, if not it will be ignored.\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__organization_aggregates`\n\n\n), final as (\n    select\n        users.source_relation,\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        \n        ,users.user_tags as updater_user_tags\n        \n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        \n        ,organizations.organization_id as updater_organization_id\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,organizations.domain_names as updater_organization_domain_names\n        \n\n        --If you use organization tags, this will be included, if not it will be ignored.\n        \n        ,organizations.organization_tags as updater_organization_organization_tags\n        \n    from users\n\n    \n    left join organizations\n        on users.source_relation = organizations.source_relation\n        and users.organization_id = organizations.organization_id\n    \n)\n\nselect * \nfrom final\n),  __dbt__cte__int_zendesk__field_history_enriched as (\nwith ticket_field_history as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history`\n\n), updater_info as (\n    select *\n    from __dbt__cte__int_zendesk__updater_information\n\n), final as (\n    select\n        ticket_field_history.*\n\n          \n\n    from ticket_field_history\n\n    left join updater_info\n        on ticket_field_history.user_id = updater_info.updater_user_id\n        and ticket_field_history.source_relation = updater_info.source_relation\n)\nselect *\nfrom final\n), field_history as (\n\n    select\n        source_relation,\n        ticket_id,\n        field_name,\n        valid_ending_at,\n        valid_starting_at\n\n        --Only runs if the user passes updater fields through the final ticket field history model\n        \n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in zendesk__ticket_field_history\n        ,case when value is null then 'is_null' else value end as value\n\n    from __dbt__cte__int_zendesk__field_history_enriched\n    \n    where cast( timestamp_trunc(\n        cast(valid_starting_at as timestamp),\n        day\n    ) as date) >= (select max(date_day) from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_history_pivot`)\n    \n\n), event_order as (\n\n    select \n        *,\n        row_number() over (\n            partition by source_relation, cast(valid_starting_at as date), ticket_id, field_name\n            order by valid_starting_at desc\n            ) as row_num\n    from field_history\n\n), filtered as (\n\n    -- Find the last event that occurs on each day for each ticket\n\n    select *\n    from event_order\n    where row_num = 1\n\n), pivots as (\n\n    -- For each column that is in both the ticket_field_history_columns variable and the field_history table,\n    -- pivot out the value into it's own column. This will feed the daily slowly changing dimension model.\n\n    select\n        source_relation, \n        ticket_id,\n        cast(timestamp_trunc(\n        cast(valid_starting_at as timestamp),\n        day\n    ) as date) as date_day\n\n        \n    \n    from filtered\n    group by 1,2,3\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') as string))) as ticket_day_id\n    from pivots\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__updater_information", "sql": " __dbt__cte__int_zendesk__updater_information as (\nwith users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_aggregates`\n\n--If using organizations, this will be included, if not it will be ignored.\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__organization_aggregates`\n\n\n), final as (\n    select\n        users.source_relation,\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        \n        ,users.user_tags as updater_user_tags\n        \n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        \n        ,organizations.organization_id as updater_organization_id\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,organizations.domain_names as updater_organization_domain_names\n        \n\n        --If you use organization tags, this will be included, if not it will be ignored.\n        \n        ,organizations.organization_tags as updater_organization_organization_tags\n        \n    from users\n\n    \n    left join organizations\n        on users.source_relation = organizations.source_relation\n        and users.organization_id = organizations.organization_id\n    \n)\n\nselect * \nfrom final\n)"}, {"id": "model.zendesk.int_zendesk__field_history_enriched", "sql": " __dbt__cte__int_zendesk__field_history_enriched as (\nwith ticket_field_history as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history`\n\n), updater_info as (\n    select *\n    from __dbt__cte__int_zendesk__updater_information\n\n), final as (\n    select\n        ticket_field_history.*\n\n          \n\n    from ticket_field_history\n\n    left join updater_info\n        on ticket_field_history.user_id = updater_info.updater_user_id\n        and ticket_field_history.source_relation = updater_info.source_relation\n)\nselect *\nfrom final\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__updater_information": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__updater_information", "resource_type": "model", "package_name": "zendesk", "path": "ticket_history/int_zendesk__updater_information.sql", "original_file_path": "models/ticket_history/int_zendesk__updater_information.sql", "unique_id": "model.zendesk.int_zendesk__updater_information", "fqn": ["zendesk", "ticket_history", "int_zendesk__updater_information"], "alias": "int_zendesk__updater_information", "checksum": {"name": "sha256", "checksum": "ac3f5b4aaf08899be21f281806c70cffc254bd8546c35b1a6c8c253f44450bdf"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.853129, "relation_name": null, "raw_code": "with users as (\n    select *\n    from {{ ref('int_zendesk__user_aggregates') }}\n\n--If using organizations, this will be included, if not it will be ignored.\n{% if var('using_organizations', True) %}\n), organizations as (\n    select *\n    from {{ ref('int_zendesk__organization_aggregates') }}\n{% endif %}\n\n), final as (\n    select\n        users.source_relation,\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        {% if var('using_user_tags', True) %}\n        ,users.user_tags as updater_user_tags\n        {% endif %}\n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        {% if var('using_organizations', True) %}\n        ,organizations.organization_id as updater_organization_id\n        {% endif %}\n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        {% if var('using_domain_names', True) and var('using_organizations', True) %}\n        ,organizations.domain_names as updater_organization_domain_names\n        {% endif %}\n\n        --If you use organization tags, this will be included, if not it will be ignored.\n        {% if var('using_organization_tags', True) and var('using_organizations', True) %}\n        ,organizations.organization_tags as updater_organization_organization_tags\n        {% endif %}\n    from users\n\n    {% if var('using_organizations', True) %}\n    left join organizations\n        on users.source_relation = organizations.source_relation\n        and users.organization_id = organizations.organization_id\n    {% endif %}\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__user_aggregates", "package": null, "version": null}, {"name": "int_zendesk__organization_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__user_aggregates", "model.zendesk.int_zendesk__organization_aggregates"]}, "compiled_path": "target/compiled/zendesk/models/ticket_history/int_zendesk__updater_information.sql", "compiled": true, "compiled_code": "with users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_aggregates`\n\n--If using organizations, this will be included, if not it will be ignored.\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__organization_aggregates`\n\n\n), final as (\n    select\n        users.source_relation,\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        \n        ,users.user_tags as updater_user_tags\n        \n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        \n        ,organizations.organization_id as updater_organization_id\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,organizations.domain_names as updater_organization_domain_names\n        \n\n        --If you use organization tags, this will be included, if not it will be ignored.\n        \n        ,organizations.organization_tags as updater_organization_organization_tags\n        \n    from users\n\n    \n    left join organizations\n        on users.source_relation = organizations.source_relation\n        and users.organization_id = organizations.organization_id\n    \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__field_history_scd": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__field_history_scd", "resource_type": "model", "package_name": "zendesk", "path": "ticket_history/int_zendesk__field_history_scd.sql", "original_file_path": "models/ticket_history/int_zendesk__field_history_scd.sql", "unique_id": "model.zendesk.int_zendesk__field_history_scd", "fqn": ["zendesk", "ticket_history", "int_zendesk__field_history_scd"], "alias": "int_zendesk__field_history_scd", "checksum": {"name": "sha256", "checksum": "6579e23d8529dd480b1a516233d52d32e60c3d1743c9b962e63fca3a44ca5815"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.8585222, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_history_scd`", "raw_code": "-- model needs to materialize as a table to avoid erroneous null values\n{{ config( materialized='table') }} \n\n{% set ticket_columns = adapter.get_columns_in_relation(ref('int_zendesk__field_history_pivot')) %}\n\nwith change_data as (\n\n    select *\n    from {{ ref('int_zendesk__field_history_pivot') }}\n\n), set_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        source_relation,\n        date_day as valid_from,\n        ticket_id,\n        ticket_day_id\n\n        {% for col in ticket_columns if col.name|lower not in ['source_relation','date_day','ending_day','ticket_id','ticket_day_id'] %} \n\n        ,{{ col.name }}\n        ,sum(case when {{ col.name }} is null \n                then 0 \n                else 1 \n                    end) over (partition by source_relation order by ticket_id, date_day rows unbounded preceding) as {{ col.name }}_field_partition\n        {% endfor %}\n\n    from change_data\n\n), fill_values as (\n    select\n        source_relation,\n        valid_from, \n        ticket_id,\n        ticket_day_id\n\n        {% for col in ticket_columns if col.name|lower not in ['source_relation','date_day','ending_day','ticket_id','ticket_day_id'] %} \n\n        ,first_value( {{ col.name }} ) over (partition by source_relation, {{ col.name }}_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as {{ col.name }}\n        \n        {% endfor %}\n    from set_values\n) \n\nselect *\nfrom fill_values", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__field_history_pivot", "package": null, "version": null}, {"name": "int_zendesk__field_history_pivot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__field_history_pivot"]}, "compiled_path": "target/compiled/zendesk/models/ticket_history/int_zendesk__field_history_scd.sql", "compiled": true, "compiled_code": "-- model needs to materialize as a table to avoid erroneous null values\n \n\n\n\nwith change_data as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_history_pivot`\n\n), set_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        source_relation,\n        date_day as valid_from,\n        ticket_id,\n        ticket_day_id\n\n         \n\n        ,assignee_id\n        ,sum(case when assignee_id is null \n                then 0 \n                else 1 \n                    end) over (partition by source_relation order by ticket_id, date_day rows unbounded preceding) as assignee_id_field_partition\n         \n\n        ,status\n        ,sum(case when status is null \n                then 0 \n                else 1 \n                    end) over (partition by source_relation order by ticket_id, date_day rows unbounded preceding) as status_field_partition\n         \n\n        ,priority\n        ,sum(case when priority is null \n                then 0 \n                else 1 \n                    end) over (partition by source_relation order by ticket_id, date_day rows unbounded preceding) as priority_field_partition\n        \n\n    from change_data\n\n), fill_values as (\n    select\n        source_relation,\n        valid_from, \n        ticket_id,\n        ticket_day_id\n\n         \n\n        ,first_value( assignee_id ) over (partition by source_relation, assignee_id_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as assignee_id\n        \n         \n\n        ,first_value( status ) over (partition by source_relation, status_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as status\n        \n         \n\n        ,first_value( priority ) over (partition by source_relation, priority_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as priority\n        \n        \n    from set_values\n) \n\nselect *\nfrom fill_values", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__field_calendar_spine": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__field_calendar_spine", "resource_type": "model", "package_name": "zendesk", "path": "ticket_history/int_zendesk__field_calendar_spine.sql", "original_file_path": "models/ticket_history/int_zendesk__field_calendar_spine.sql", "unique_id": "model.zendesk.int_zendesk__field_calendar_spine", "fqn": ["zendesk", "ticket_history", "int_zendesk__field_calendar_spine"], "alias": "int_zendesk__field_calendar_spine", "checksum": {"name": "sha256", "checksum": "481239a7087be4ccb2b2a9e8fdc0860fbd0e8f08b213eb26d3f56073de7a1f0a"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ticket_day_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "partition_by": {"field": "date_day", "data_type": "date", "granularity": "month"}, "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "incremental", "partition_by": {"field": "date_day", "data_type": "date", "granularity": "month"}, "unique_key": "ticket_day_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1751990096.863692, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_calendar_spine`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date', 'granularity': 'month'} if target.type not in ['spark', 'databricks'] else ['date_day'],\n        unique_key='ticket_day_id',\n        incremental_strategy = 'merge' if target.type not in ('snowflake', 'postgres', 'redshift') else 'delete+insert',\n        file_format='delta'\n    )\n}}\n\nwith calendar as (\n\n    select *\n    from {{ ref('int_zendesk__calendar_spine') }}\n    {% if is_incremental() %}\n    where date_day >= (select max(date_day) from {{ this }})\n    {% endif %}\n\n), ticket as (\n\n    select \n        *,\n        -- closed tickets cannot be re-opened or updated, and solved tickets are automatically closed after a pre-defined number of days configured in your Zendesk settings\n        cast( {{ dbt.date_trunc('day', \"case when status != 'closed' then \" ~ dbt.current_timestamp() ~ \" else updated_at end\") }} as date) as open_until\n    from {{ var('ticket') }}\n    \n), joined as (\n\n    select \n        ticket.source_relation,\n        calendar.date_day,\n        ticket.ticket_id\n    from calendar\n    inner join ticket\n        on calendar.date_day >= cast(ticket.created_at as date)\n        -- use this variable to extend the ticket's history past its close date (for reporting/data viz purposes :-)\n        and {{ dbt.dateadd('month', var('ticket_field_history_extension_months', 0), 'ticket.open_until') }} >= calendar.date_day\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.generate_surrogate_key(['date_day','ticket_id', 'source_relation']) }} as ticket_day_id\n    from joined\n\n)\n\nselect *\nfrom surrogate_key", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__calendar_spine", "package": null, "version": null}, {"name": "stg_zendesk__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.current_timestamp", "macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.zendesk.int_zendesk__calendar_spine", "model.zendesk_source.stg_zendesk__ticket"]}, "compiled_path": "target/compiled/zendesk/models/ticket_history/int_zendesk__field_calendar_spine.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_zendesk__calendar_spine as (\n-- depends_on: `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\nwith spine as (\n\n    \n\n    \n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3483\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2016-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n\n), recast as (\n    select\n        cast(date_day as date) as date_day\n    from spine\n)\n\nselect *\nfrom recast\n), calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__calendar_spine\n    \n    where date_day >= (select max(date_day) from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__field_calendar_spine`)\n    \n\n), ticket as (\n\n    select \n        *,\n        -- closed tickets cannot be re-opened or updated, and solved tickets are automatically closed after a pre-defined number of days configured in your Zendesk settings\n        cast( timestamp_trunc(\n        cast(case when status != 'closed' then current_timestamp() else updated_at end as timestamp),\n        day\n    ) as date) as open_until\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n    \n), joined as (\n\n    select \n        ticket.source_relation,\n        calendar.date_day,\n        ticket.ticket_id\n    from calendar\n    inner join ticket\n        on calendar.date_day >= cast(ticket.created_at as date)\n        -- use this variable to extend the ticket's history past its close date (for reporting/data viz purposes :-)\n        and \n\n        datetime_add(\n            cast( ticket.open_until as datetime),\n        interval 0 month\n        )\n\n >= calendar.date_day\n\n), surrogate_key as (\n\n    select\n        *,\n        to_hex(md5(cast(coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as ticket_day_id\n    from joined\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__calendar_spine", "sql": " __dbt__cte__int_zendesk__calendar_spine as (\n-- depends_on: `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\nwith spine as (\n\n    \n\n    \n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3483\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2016-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n\n), recast as (\n    select\n        cast(date_day as date) as date_day\n    from spine\n)\n\nselect *\nfrom recast\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_work_time_calendar": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_work_time_calendar", "resource_type": "model", "package_name": "zendesk", "path": "agent_work_time/int_zendesk__ticket_work_time_calendar.sql", "original_file_path": "models/agent_work_time/int_zendesk__ticket_work_time_calendar.sql", "unique_id": "model.zendesk.int_zendesk__ticket_work_time_calendar", "fqn": ["zendesk", "agent_work_time", "int_zendesk__ticket_work_time_calendar"], "alias": "int_zendesk__ticket_work_time_calendar", "checksum": {"name": "sha256", "checksum": "c94595182464d490659fcac4e8ee0990bb24c3c4e4181bf5bbf1693ba8b7e232"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.870168, "relation_name": null, "raw_code": "with ticket_historical_status as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_historical_status') }}\n\n), calendar_minutes as (\n  \n    select \n        source_relation,\n        ticket_id,\n        status,\n        case when status in ('pending') then status_duration_calendar_minutes\n            else 0 end as agent_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold') then status_duration_calendar_minutes\n            else 0 end as requester_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold', 'pending') then status_duration_calendar_minutes \n            else 0 end as solve_time_in_minutes, \n        case when status in ('new', 'open') then status_duration_calendar_minutes\n            else 0 end as agent_work_time_in_minutes,\n        case when status in ('hold') then status_duration_calendar_minutes\n            else 0 end as on_hold_time_in_minutes,\n        case when status = 'new' then status_duration_calendar_minutes\n            else 0 end as new_status_duration_minutes,\n        case when status = 'open' then status_duration_calendar_minutes\n            else 0 end as open_status_duration_minutes,\n        case when status = 'deleted' then 1\n            else 0 end as ticket_deleted,\n        first_value(valid_starting_at) over (partition by ticket_id, source_relation order by valid_starting_at desc, ticket_id, source_relation rows unbounded preceding) as last_status_assignment_date,\n        case when lag(status) over (partition by ticket_id, source_relation order by valid_starting_at) = 'deleted' and status != 'deleted'\n            then 1\n            else 0\n                end as ticket_recoveries\n\n    from ticket_historical_status\n\n)\n\nselect \n  source_relation,\n  ticket_id,\n  last_status_assignment_date,\n  sum(ticket_deleted) as ticket_deleted_count,\n  sum(agent_wait_time_in_minutes) as agent_wait_time_in_calendar_minutes,\n  sum(requester_wait_time_in_minutes) as requester_wait_time_in_calendar_minutes,\n  sum(solve_time_in_minutes) as solve_time_in_calendar_minutes,\n  sum(agent_work_time_in_minutes) as agent_work_time_in_calendar_minutes,\n  sum(on_hold_time_in_minutes) as on_hold_time_in_calendar_minutes,\n  sum(new_status_duration_minutes) as new_status_duration_in_calendar_minutes,\n  sum(open_status_duration_minutes) as open_status_duration_in_calendar_minutes,\n  sum(ticket_recoveries) as total_ticket_recoveries\nfrom calendar_minutes\ngroup by 1, 2, 3", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_historical_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__ticket_historical_status"]}, "compiled_path": "target/compiled/zendesk/models/agent_work_time/int_zendesk__ticket_work_time_calendar.sql", "compiled": true, "compiled_code": "with ticket_historical_status as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n\n), calendar_minutes as (\n  \n    select \n        source_relation,\n        ticket_id,\n        status,\n        case when status in ('pending') then status_duration_calendar_minutes\n            else 0 end as agent_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold') then status_duration_calendar_minutes\n            else 0 end as requester_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold', 'pending') then status_duration_calendar_minutes \n            else 0 end as solve_time_in_minutes, \n        case when status in ('new', 'open') then status_duration_calendar_minutes\n            else 0 end as agent_work_time_in_minutes,\n        case when status in ('hold') then status_duration_calendar_minutes\n            else 0 end as on_hold_time_in_minutes,\n        case when status = 'new' then status_duration_calendar_minutes\n            else 0 end as new_status_duration_minutes,\n        case when status = 'open' then status_duration_calendar_minutes\n            else 0 end as open_status_duration_minutes,\n        case when status = 'deleted' then 1\n            else 0 end as ticket_deleted,\n        first_value(valid_starting_at) over (partition by ticket_id, source_relation order by valid_starting_at desc, ticket_id, source_relation rows unbounded preceding) as last_status_assignment_date,\n        case when lag(status) over (partition by ticket_id, source_relation order by valid_starting_at) = 'deleted' and status != 'deleted'\n            then 1\n            else 0\n                end as ticket_recoveries\n\n    from ticket_historical_status\n\n)\n\nselect \n  source_relation,\n  ticket_id,\n  last_status_assignment_date,\n  sum(ticket_deleted) as ticket_deleted_count,\n  sum(agent_wait_time_in_minutes) as agent_wait_time_in_calendar_minutes,\n  sum(requester_wait_time_in_minutes) as requester_wait_time_in_calendar_minutes,\n  sum(solve_time_in_minutes) as solve_time_in_calendar_minutes,\n  sum(agent_work_time_in_minutes) as agent_work_time_in_calendar_minutes,\n  sum(on_hold_time_in_minutes) as on_hold_time_in_calendar_minutes,\n  sum(new_status_duration_minutes) as new_status_duration_in_calendar_minutes,\n  sum(open_status_duration_minutes) as open_status_duration_in_calendar_minutes,\n  sum(ticket_recoveries) as total_ticket_recoveries\nfrom calendar_minutes\ngroup by 1, 2, 3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_work_time_business": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_work_time_business", "resource_type": "model", "package_name": "zendesk", "path": "agent_work_time/int_zendesk__ticket_work_time_business.sql", "original_file_path": "models/agent_work_time/int_zendesk__ticket_work_time_business.sql", "unique_id": "model.zendesk.int_zendesk__ticket_work_time_business", "fqn": ["zendesk", "agent_work_time", "int_zendesk__ticket_work_time_business"], "alias": "int_zendesk__ticket_work_time_business", "checksum": {"name": "sha256", "checksum": "878815837297c30e6eb21943377d36ea711b8d50c9aefdfd1096e504e3afa87d"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1751990096.8715699, "relation_name": null, "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_historical_status as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_historical_status') }}\n\n), ticket_schedules as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('int_zendesk__schedule_spine') }}\n\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      ticket_historical_status.source_relation,\n      ticket_historical_status.ticket_id,\n      ticket_historical_status.status as ticket_status,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as status_schedule_start,\n      least(valid_ending_at, schedule_invalidated_at) as status_schedule_end,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      ticket_historical_status.valid_starting_at as status_valid_starting_at,\n      ticket_historical_status.valid_ending_at as status_valid_ending_at\n\n    from ticket_historical_status\n    left join ticket_schedules\n      on ticket_historical_status.ticket_id = ticket_schedules.ticket_id\n      and ticket_historical_status.source_relation = ticket_schedules.source_relation\n      -- making sure there is indeed real overlap\n      where {{ dbt.datediff('greatest(valid_starting_at, schedule_created_at)', 'least(valid_ending_at, schedule_invalidated_at)', 'second') }} > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      schedule_id,\n      status_schedule_start,\n      status_schedule_end,\n      status_valid_starting_at,\n      status_valid_ending_at,\n    ({{ dbt.datediff(\n            \"cast(\" ~ zendesk.fivetran_week_start('ticket_status_crossed_with_schedule.status_schedule_start') ~ \"as \" ~ dbt.type_timestamp() ~ \")\", \n            \"cast(ticket_status_crossed_with_schedule.status_schedule_start as \" ~ dbt.type_timestamp() ~ \")\",\n            'second') }} /60\n          ) as start_time_in_minutes_from_week,\n      ({{ dbt.datediff(\n              'ticket_status_crossed_with_schedule.status_schedule_start',\n              'ticket_status_crossed_with_schedule.status_schedule_end',\n              'second') }} /60\n            ) as raw_delta_in_minutes,\n    {{ zendesk.fivetran_week_start('ticket_status_crossed_with_schedule.status_schedule_start') }} as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    {{ dbt_utils.group_by(n=8) }}\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(52) }}\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as {{ dbt.type_int() }}) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_periods as (\n\n    select\n\n      weeks_cross_ticket_full_solved_time.*,\n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods as (\n  \n    select \n      weekly_periods.source_relation,\n      weekly_periods.ticket_id,\n      weekly_periods.week_number,\n      weekly_periods.schedule_id,\n      weekly_periods.ticket_status,\n      weekly_periods.ticket_week_start_time,\n      weekly_periods.ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(weekly_periods.ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n    from weekly_periods\n    join schedule\n      on ticket_week_start_time <= schedule.end_time_utc \n      and ticket_week_end_time >= schedule.start_time_utc\n      and weekly_periods.schedule_id = schedule.schedule_id\n      and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_end_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) > cast(schedule.valid_from as date)\n      and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_start_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) < cast(schedule.valid_until as date)\n  \n), business_minutes as (\n  \n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      case when ticket_status in ('pending') then scheduled_minutes\n          else 0 end as agent_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold') then scheduled_minutes\n          else 0 end as requester_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold', 'pending') then scheduled_minutes\n          else 0 end as solve_time_in_minutes,\n      case when ticket_status in ('new', 'open') then scheduled_minutes\n          else 0 end as agent_work_time_in_minutes,\n      case when ticket_status in ('hold') then scheduled_minutes\n          else 0 end as on_hold_time_in_minutes,\n      case when ticket_status = 'new' then scheduled_minutes\n          else 0 end as new_status_duration_minutes,\n      case when ticket_status = 'open' then scheduled_minutes\n          else 0 end as open_status_duration_minutes\n    from intercepted_periods\n\n)\n  \n    select \n      source_relation,\n      ticket_id,\n      sum(agent_wait_time_in_minutes) as agent_wait_time_in_business_minutes,\n      sum(requester_wait_time_in_minutes) as requester_wait_time_in_business_minutes,\n      sum(solve_time_in_minutes) as solve_time_in_business_minutes,\n      sum(agent_work_time_in_minutes) as agent_work_time_in_business_minutes,\n      sum(on_hold_time_in_minutes) as on_hold_time_in_business_minutes,\n      sum(new_status_duration_minutes) as new_status_duration_in_business_minutes,\n      sum(open_status_duration_minutes) as open_status_duration_in_business_minutes\n    from business_minutes\n    group by 1,2", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_historical_status", "package": null, "version": null}, {"name": "int_zendesk__ticket_schedules", "package": null, "version": null}, {"name": "int_zendesk__schedule_spine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.zendesk.fivetran_week_start", "macro.dbt.type_timestamp", "macro.dbt_utils.group_by", "macro.dbt_utils.generate_series", "macro.dbt.type_int", "macro.dbt.dateadd"], "nodes": ["model.zendesk.int_zendesk__ticket_historical_status", "model.zendesk.int_zendesk__ticket_schedules", "model.zendesk.int_zendesk__schedule_spine"]}, "compiled_path": "target/compiled/zendesk/models/agent_work_time/int_zendesk__ticket_work_time_business.sql", "compiled": true, "compiled_code": "\n\nwith ticket_historical_status as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      ticket_historical_status.source_relation,\n      ticket_historical_status.ticket_id,\n      ticket_historical_status.status as ticket_status,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as status_schedule_start,\n      least(valid_ending_at, schedule_invalidated_at) as status_schedule_end,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      ticket_historical_status.valid_starting_at as status_valid_starting_at,\n      ticket_historical_status.valid_ending_at as status_valid_ending_at\n\n    from ticket_historical_status\n    left join ticket_schedules\n      on ticket_historical_status.ticket_id = ticket_schedules.ticket_id\n      and ticket_historical_status.source_relation = ticket_schedules.source_relation\n      -- making sure there is indeed real overlap\n      where \n\n    datetime_diff(\n        cast(least(valid_ending_at, schedule_invalidated_at) as datetime),\n        cast(greatest(valid_starting_at, schedule_created_at) as datetime),\n        second\n    )\n\n   > 0\n\n), ticket_full_solved_time as (\n\n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      schedule_id,\n      status_schedule_start,\n      status_schedule_end,\n      status_valid_starting_at,\n      status_valid_ending_at,\n    (\n\n    datetime_diff(\n        cast(cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n      (\n\n    datetime_diff(\n        cast(ticket_status_crossed_with_schedule.status_schedule_end as datetime),\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as datetime),\n        second\n    )\n\n   /60\n            ) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp),\n        week\n    ) as date) as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7,8\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_periods as (\n\n    select\n\n      weeks_cross_ticket_full_solved_time.*,\n      -- for each week, at what minute do we start counting?\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods as (\n  \n    select \n      weekly_periods.source_relation,\n      weekly_periods.ticket_id,\n      weekly_periods.week_number,\n      weekly_periods.schedule_id,\n      weekly_periods.ticket_status,\n      weekly_periods.ticket_week_start_time,\n      weekly_periods.ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(weekly_periods.ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n    from weekly_periods\n    join schedule\n      on ticket_week_start_time <= schedule.end_time_utc \n      and ticket_week_end_time >= schedule.start_time_utc\n      and weekly_periods.schedule_id = schedule.schedule_id\n      and weekly_periods.source_relation = schedule.source_relation\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n      and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n  \n), business_minutes as (\n  \n    select \n      source_relation,\n      ticket_id,\n      ticket_status,\n      case when ticket_status in ('pending') then scheduled_minutes\n          else 0 end as agent_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold') then scheduled_minutes\n          else 0 end as requester_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold', 'pending') then scheduled_minutes\n          else 0 end as solve_time_in_minutes,\n      case when ticket_status in ('new', 'open') then scheduled_minutes\n          else 0 end as agent_work_time_in_minutes,\n      case when ticket_status in ('hold') then scheduled_minutes\n          else 0 end as on_hold_time_in_minutes,\n      case when ticket_status = 'new' then scheduled_minutes\n          else 0 end as new_status_duration_minutes,\n      case when ticket_status = 'open' then scheduled_minutes\n          else 0 end as open_status_duration_minutes\n    from intercepted_periods\n\n)\n  \n    select \n      source_relation,\n      ticket_id,\n      sum(agent_wait_time_in_minutes) as agent_wait_time_in_business_minutes,\n      sum(requester_wait_time_in_minutes) as requester_wait_time_in_business_minutes,\n      sum(solve_time_in_minutes) as solve_time_in_business_minutes,\n      sum(agent_work_time_in_minutes) as agent_work_time_in_business_minutes,\n      sum(on_hold_time_in_minutes) as on_hold_time_in_business_minutes,\n      sum(new_status_duration_minutes) as new_status_duration_in_business_minutes,\n      sum(open_status_duration_minutes) as open_status_duration_in_business_minutes\n    from business_minutes\n    group by 1,2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__calendar_spine": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__calendar_spine", "resource_type": "model", "package_name": "zendesk", "path": "utils/int_zendesk__calendar_spine.sql", "original_file_path": "models/utils/int_zendesk__calendar_spine.sql", "unique_id": "model.zendesk.int_zendesk__calendar_spine", "fqn": ["zendesk", "utils", "int_zendesk__calendar_spine"], "alias": "int_zendesk__calendar_spine", "checksum": {"name": "sha256", "checksum": "2b4e64fa4a96e2165fb29988555594298b986465e70eecb5e2ce3b35edff64e5"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.879348, "relation_name": null, "raw_code": "-- depends_on: {{ ref('stg_zendesk__ticket') }}\nwith spine as (\n\n    {% if execute and flags.WHICH in ('run', 'build') %}\n\n    {%- set first_date_query %}\n    select \n        coalesce(\n            min(cast(created_at as date)), \n            cast({{ dbt.dateadd(\"month\", -1, \"current_date\") }} as date)\n            ) as min_date\n    from {{ var('ticket') }}\n    -- by default take all the data \n    where cast(created_at as date) >= {{ dbt.dateadd('year', \n        - var('ticket_field_history_timeframe_years', 50), \"current_date\") }}\n    {% endset -%}\n\n    {%- set first_date = dbt_utils.get_single_value(first_date_query) %}\n\n    {% else %}\n    {%- set first_date = '2016-01-01' %}\n\n    {% endif %}\n\n{{\n    dbt_utils.date_spine(\n        datepart = \"day\", \n        start_date = \"cast('\" ~ first_date ~ \"' as date)\",\n        end_date = dbt.dateadd(\"week\", 1, \"current_date\")\n    )   \n}}\n\n), recast as (\n    select\n        cast(date_day as date) as date_day\n    from spine\n)\n\nselect *\nfrom recast", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_utils.date_spine"], "nodes": ["model.zendesk_source.stg_zendesk__ticket"]}, "compiled_path": "target/compiled/zendesk/models/utils/int_zendesk__calendar_spine.sql", "compiled": true, "compiled_code": "-- depends_on: `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\nwith spine as (\n\n    \n\n    \n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3483\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2016-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n\n), recast as (\n    select\n        cast(date_day as date) as date_day\n    from spine\n)\n\nselect *\nfrom recast", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__timezone_daylight": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__timezone_daylight", "resource_type": "model", "package_name": "zendesk", "path": "utils/int_zendesk__timezone_daylight.sql", "original_file_path": "models/utils/int_zendesk__timezone_daylight.sql", "unique_id": "model.zendesk.int_zendesk__timezone_daylight", "fqn": ["zendesk", "utils", "int_zendesk__timezone_daylight"], "alias": "int_zendesk__timezone_daylight", "checksum": {"name": "sha256", "checksum": "6dca678f7aa43e266e750f1d61f5e13b4035c00d49866b933e156f389f7d4429"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1751990096.891728, "relation_name": null, "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith timezone as (\n\n    select *\n    from {{ var('time_zone') }}\n\n), daylight_time as (\n\n    select *\n    from {{ var('daylight_time') }}\n\n), timezone_with_dt as (\n\n    select \n        timezone.*,\n        daylight_time.daylight_start_utc,\n        daylight_time.daylight_end_utc,\n        daylight_time.daylight_offset_minutes\n\n    from timezone \n    left join daylight_time \n        on timezone.time_zone = daylight_time.time_zone\n        and timezone.source_relation = daylight_time.source_relation\n\n), order_timezone_dt as (\n\n    select \n        *,\n        -- will be null for timezones without any daylight savings records (and the first entry)\n        -- we will coalesce the first entry date with .... the X years ago\n        lag(daylight_end_utc, 1) over (partition by source_relation, time_zone order by daylight_end_utc asc) as last_daylight_end_utc,\n        -- will be null for timezones without any daylight savings records (and the last entry)\n        -- we will coalesce the last entry date with the current date \n        lead(daylight_start_utc, 1) over (partition by source_relation, time_zone order by daylight_start_utc asc) as next_daylight_start_utc\n\n    from timezone_with_dt\n\n), split_timezones as (\n\n    -- standard (includes timezones without DT)\n    -- starts: when the last Daylight Savings ended\n    -- ends: when the next Daylight Savings starts\n    select \n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- last_daylight_end_utc is null for the first record of the time_zone's daylight time, or if the TZ doesn't use DT\n        coalesce(last_daylight_end_utc, cast('1970-01-01' as date)) as valid_from,\n\n        -- daylight_start_utc is null for timezones that don't use DT\n        coalesce(daylight_start_utc, cast( {{ dbt.dateadd('year', 1, dbt.current_timestamp()) }} as date)) as valid_until\n\n    from order_timezone_dt\n\n    union all \n\n    -- DT (excludes timezones without it)\n    -- starts: when this Daylight Savings started\n    -- ends: when this Daylight Savings ends\n    select \n        source_relation,\n        time_zone,\n        -- Pacific Time is -8h during standard time and -7h during DT\n        standard_offset_minutes + daylight_offset_minutes as offset_minutes,\n        daylight_start_utc as valid_from,\n        daylight_end_utc as valid_until\n\n    from order_timezone_dt\n    where daylight_offset_minutes is not null\n\n    union all\n\n    select\n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- Get the latest daylight_end_utc time and set that as the valid_from\n        max(daylight_end_utc) as valid_from,\n\n        -- If the latest_daylight_end_time_utc is less than todays timestamp, that means DST has ended. Therefore, we will make the valid_until in the future.\n        cast( {{ dbt.dateadd('year', 1, dbt.current_timestamp()) }} as date) as valid_until\n\n    from order_timezone_dt\n    group by 1, 2, 3\n    -- We only want to apply this logic to time_zone's that had daylight saving time and it ended at a point. For example, Hong Kong ended DST in 1979.\n    having cast(max(daylight_end_utc) as date) < cast({{ dbt.current_timestamp() }} as date)\n\n), final as (\n    select\n        source_relation,\n        lower(time_zone) as time_zone,\n        offset_minutes,\n        cast(valid_from as {{ dbt.type_timestamp() }}) as valid_from,\n        cast(valid_until as {{ dbt.type_timestamp() }}) as valid_until\n    from split_timezones\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__time_zone", "package": null, "version": null}, {"name": "stg_zendesk__daylight_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.dateadd", "macro.dbt.type_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__time_zone", "model.zendesk_source.stg_zendesk__daylight_time"]}, "compiled_path": "target/compiled/zendesk/models/utils/int_zendesk__timezone_daylight.sql", "compiled": true, "compiled_code": "\n\nwith timezone as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`\n\n), daylight_time as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time`\n\n), timezone_with_dt as (\n\n    select \n        timezone.*,\n        daylight_time.daylight_start_utc,\n        daylight_time.daylight_end_utc,\n        daylight_time.daylight_offset_minutes\n\n    from timezone \n    left join daylight_time \n        on timezone.time_zone = daylight_time.time_zone\n        and timezone.source_relation = daylight_time.source_relation\n\n), order_timezone_dt as (\n\n    select \n        *,\n        -- will be null for timezones without any daylight savings records (and the first entry)\n        -- we will coalesce the first entry date with .... the X years ago\n        lag(daylight_end_utc, 1) over (partition by source_relation, time_zone order by daylight_end_utc asc) as last_daylight_end_utc,\n        -- will be null for timezones without any daylight savings records (and the last entry)\n        -- we will coalesce the last entry date with the current date \n        lead(daylight_start_utc, 1) over (partition by source_relation, time_zone order by daylight_start_utc asc) as next_daylight_start_utc\n\n    from timezone_with_dt\n\n), split_timezones as (\n\n    -- standard (includes timezones without DT)\n    -- starts: when the last Daylight Savings ended\n    -- ends: when the next Daylight Savings starts\n    select \n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- last_daylight_end_utc is null for the first record of the time_zone's daylight time, or if the TZ doesn't use DT\n        coalesce(last_daylight_end_utc, cast('1970-01-01' as date)) as valid_from,\n\n        -- daylight_start_utc is null for timezones that don't use DT\n        coalesce(daylight_start_utc, cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date)) as valid_until\n\n    from order_timezone_dt\n\n    union all \n\n    -- DT (excludes timezones without it)\n    -- starts: when this Daylight Savings started\n    -- ends: when this Daylight Savings ends\n    select \n        source_relation,\n        time_zone,\n        -- Pacific Time is -8h during standard time and -7h during DT\n        standard_offset_minutes + daylight_offset_minutes as offset_minutes,\n        daylight_start_utc as valid_from,\n        daylight_end_utc as valid_until\n\n    from order_timezone_dt\n    where daylight_offset_minutes is not null\n\n    union all\n\n    select\n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- Get the latest daylight_end_utc time and set that as the valid_from\n        max(daylight_end_utc) as valid_from,\n\n        -- If the latest_daylight_end_time_utc is less than todays timestamp, that means DST has ended. Therefore, we will make the valid_until in the future.\n        cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date) as valid_until\n\n    from order_timezone_dt\n    group by 1, 2, 3\n    -- We only want to apply this logic to time_zone's that had daylight saving time and it ended at a point. For example, Hong Kong ended DST in 1979.\n    having cast(max(daylight_end_utc) as date) < cast(current_timestamp() as date)\n\n), final as (\n    select\n        source_relation,\n        lower(time_zone) as time_zone,\n        offset_minutes,\n        cast(valid_from as timestamp) as valid_from,\n        cast(valid_until as timestamp) as valid_until\n    from split_timezones\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_resolution_times_calendar": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_resolution_times_calendar", "resource_type": "model", "package_name": "zendesk", "path": "resolution_times/int_zendesk__ticket_resolution_times_calendar.sql", "original_file_path": "models/resolution_times/int_zendesk__ticket_resolution_times_calendar.sql", "unique_id": "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "fqn": ["zendesk", "resolution_times", "int_zendesk__ticket_resolution_times_calendar"], "alias": "int_zendesk__ticket_resolution_times_calendar", "checksum": {"name": "sha256", "checksum": "86b7c12da7842da8cdb3003695b30b951318fd4bff658daa40a17366b6b484cd"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1751990096.897092, "relation_name": null, "raw_code": "with historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from {{ ref('int_zendesk__ticket_historical_status') }}\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from {{ ref('stg_zendesk__ticket') }}\n\n), ticket_historical_assignee as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_historical_assignee') }}\n\n), ticket_historical_group as (\n\n  select *\n  from {{ ref('int_zendesk__ticket_historical_group') }}\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    {{ dbt.datediff(\n        'ticket_historical_assignee.first_agent_assignment_date', \n        'solved_times.last_solved_at',\n        'minute' ) }} as first_assignment_to_resolution_calendar_minutes,\n    {{ dbt.datediff(\n        'ticket_historical_assignee.last_agent_assignment_date', \n        'solved_times.last_solved_at',\n        'minute' ) }} as last_assignment_to_resolution_calendar_minutes,\n    {{ dbt.datediff(\n        'ticket.created_at', \n        'solved_times.first_solved_at',\n        'minute' ) }} as first_resolution_calendar_minutes,\n    {{ dbt.datediff(\n        'ticket.created_at', \n        'solved_times.last_solved_at',\n        'minute') }} as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_historical_status", "package": null, "version": null}, {"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "int_zendesk__ticket_historical_assignee", "package": null, "version": null}, {"name": "int_zendesk__ticket_historical_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.zendesk.int_zendesk__ticket_historical_status", "model.zendesk_source.stg_zendesk__ticket", "model.zendesk.int_zendesk__ticket_historical_assignee", "model.zendesk.int_zendesk__ticket_historical_group"]}, "compiled_path": "target/compiled/zendesk/models/resolution_times/int_zendesk__ticket_resolution_times_calendar.sql", "compiled": true, "compiled_code": "with historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_first_resolution_time_business": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_first_resolution_time_business", "resource_type": "model", "package_name": "zendesk", "path": "resolution_times/int_zendesk__ticket_first_resolution_time_business.sql", "original_file_path": "models/resolution_times/int_zendesk__ticket_first_resolution_time_business.sql", "unique_id": "model.zendesk.int_zendesk__ticket_first_resolution_time_business", "fqn": ["zendesk", "resolution_times", "int_zendesk__ticket_first_resolution_time_business"], "alias": "int_zendesk__ticket_first_resolution_time_business", "checksum": {"name": "sha256", "checksum": "f15d555ae935b79a91b14ec1028248d50e0ecb6ef7c12ec96973ffacac88cda5"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1751990096.901878, "relation_name": null, "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_resolution_times_calendar') }}\n\n), ticket_schedules as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('int_zendesk__schedule_spine') }}\n\n), ticket_first_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.first_solved_at) as first_solved_at,\n\n    ({{ dbt.datediff(\n            \"cast(\" ~ zendesk.fivetran_week_start('ticket_schedules.schedule_created_at') ~ \"as \" ~ dbt.type_timestamp() ~ \")\", \n            \"cast(ticket_schedules.schedule_created_at as \" ~ dbt.type_timestamp() ~ \")\",\n            'second') }} /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        {{ dbt.datediff(\n          'ticket_schedules.schedule_created_at',\n          'least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.first_solved_at))',\n          'second') }}/60\n        )) as raw_delta_in_minutes,\n    {{ zendesk.fivetran_week_start('ticket_schedules.schedule_created_at') }} as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  {{ dbt_utils.group_by(n=5) }}\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(52) }}\n\n), weeks_cross_ticket_first_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_resolution_time.*,\n      cast(generated_number - 1 as {{ dbt.type_int() }}) as week_number\n\n    from ticket_first_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n\n), weekly_periods as (\n  \n    select \n\n      weeks_cross_ticket_first_resolution_time.*,\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_first_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule\n    on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_end_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) > cast(schedule.valid_from as date)\n    and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_start_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) < cast(schedule.valid_until as date)\n\n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as first_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_resolution_times_calendar", "package": null, "version": null}, {"name": "int_zendesk__ticket_schedules", "package": null, "version": null}, {"name": "int_zendesk__schedule_spine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk.fivetran_week_start", "macro.dbt.type_timestamp", "macro.dbt.datediff", "macro.dbt_utils.group_by", "macro.dbt_utils.generate_series", "macro.dbt.type_int", "macro.dbt.dateadd"], "nodes": ["model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_schedules", "model.zendesk.int_zendesk__schedule_spine"]}, "compiled_path": "target/compiled/zendesk/models/resolution_times/int_zendesk__ticket_first_resolution_time_business.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_zendesk__ticket_resolution_times_calendar as (\nwith historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation\n), ticket_resolution_times_calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_first_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.first_solved_at) as first_solved_at,\n\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.first_solved_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_resolution_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_first_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n\n), weekly_periods as (\n  \n    select \n\n      weeks_cross_ticket_first_resolution_time.*,\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_first_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule\n    on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n\n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as first_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "sql": " __dbt__cte__int_zendesk__ticket_resolution_times_calendar as (\nwith historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_full_resolution_time_business": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_full_resolution_time_business", "resource_type": "model", "package_name": "zendesk", "path": "resolution_times/int_zendesk__ticket_full_resolution_time_business.sql", "original_file_path": "models/resolution_times/int_zendesk__ticket_full_resolution_time_business.sql", "unique_id": "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "fqn": ["zendesk", "resolution_times", "int_zendesk__ticket_full_resolution_time_business"], "alias": "int_zendesk__ticket_full_resolution_time_business", "checksum": {"name": "sha256", "checksum": "03fcf5f1dbd71a7fc9924fd5656374999fdbfc7fbb32c1f568db33038bd18838"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1751990096.909246, "relation_name": null, "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_resolution_times_calendar') }}\n\n), ticket_schedules as (\n\n    select *\n    from {{ ref('int_zendesk__ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('int_zendesk__schedule_spine') }}\n\n), ticket_full_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.last_solved_at) as last_solved_at,\n    ({{ dbt.datediff(\n            \"cast(\" ~ zendesk.fivetran_week_start('ticket_schedules.schedule_created_at') ~ \"as \" ~ dbt.type_timestamp() ~ \")\", \n            \"cast(ticket_schedules.schedule_created_at as \" ~ dbt.type_timestamp() ~ \")\",\n            'second') }} /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        {{ dbt.datediff(\n          'ticket_schedules.schedule_created_at',\n          'least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.last_solved_at))',\n          'second') }}/60\n        )) as raw_delta_in_minutes,\n    {{ zendesk.fivetran_week_start('ticket_schedules.schedule_created_at') }} as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  {{ dbt_utils.group_by(n=5) }}\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(52) }}\n\n), weeks_cross_ticket_full_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_full_resolution_time.*,\n      cast(generated_number - 1 as {{ dbt.type_int() }}) as week_number\n\n    from ticket_full_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n\n    weeks_cross_ticket_full_resolution_time.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n  \n  from weeks_cross_ticket_full_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_end_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) > cast(schedule.valid_from as date)\n    and cast( {{ dbt.dateadd(datepart='minute', interval='cast(week_number * (7*24*60) + ticket_week_start_time as ' ~ dbt.type_int() ~ \")\", from_date_or_timestamp='start_week_date') }} as date) < cast(schedule.valid_until as date)\n  \n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as full_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_resolution_times_calendar", "package": null, "version": null}, {"name": "int_zendesk__ticket_schedules", "package": null, "version": null}, {"name": "int_zendesk__schedule_spine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk.fivetran_week_start", "macro.dbt.type_timestamp", "macro.dbt.datediff", "macro.dbt_utils.group_by", "macro.dbt_utils.generate_series", "macro.dbt.type_int", "macro.dbt.dateadd"], "nodes": ["model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_schedules", "model.zendesk.int_zendesk__schedule_spine"]}, "compiled_path": "target/compiled/zendesk/models/resolution_times/int_zendesk__ticket_full_resolution_time_business.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_zendesk__ticket_resolution_times_calendar as (\nwith historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation\n), ticket_resolution_times_calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_schedules as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`\n\n), schedule as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`\n\n), ticket_full_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.source_relation,\n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.last_solved_at) as last_solved_at,\n    (\n\n    datetime_diff(\n        cast(cast(ticket_schedules.schedule_created_at as timestamp) as datetime),\n        cast(cast(cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date)as timestamp) as datetime),\n        second\n    )\n\n   /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        \n\n    datetime_diff(\n        cast(least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.last_solved_at)) as datetime),\n        cast(ticket_schedules.schedule_created_at as datetime),\n        second\n    )\n\n  /60\n        )) as raw_delta_in_minutes,\n    cast(timestamp_trunc(\n        cast(ticket_schedules.schedule_created_at as timestamp),\n        week\n    ) as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules \n    on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n    and ticket_resolution_times_calendar.source_relation = ticket_schedules.source_relation\n  group by 1,2,3,4,5\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_full_resolution_time.*,\n      cast(generated_number - 1 as INT64) as week_number\n\n    from ticket_full_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n\n    weeks_cross_ticket_full_resolution_time.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n  \n  from weeks_cross_ticket_full_resolution_time\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.source_relation,\n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    and weekly_periods.source_relation = schedule.source_relation\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_end_time as INT64) minute\n        )\n\n as date) > cast(schedule.valid_from as date)\n    and cast( \n\n        datetime_add(\n            cast( start_week_date as datetime),\n        interval cast(week_number * (7*24*60) + ticket_week_start_time as INT64) minute\n        )\n\n as date) < cast(schedule.valid_until as date)\n  \n)\n\n  select \n    source_relation,\n    ticket_id,\n    sum(scheduled_minutes) as full_resolution_business_minutes\n  from intercepted_periods\n  group by 1, 2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "sql": " __dbt__cte__int_zendesk__ticket_resolution_times_calendar as (\nwith historical_solved_status as (\n\n    select \n      *,\n      row_number() over (partition by source_relation, ticket_id order by valid_starting_at asc) as row_num\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`\n    where status in ('solved', 'closed') -- Ideally we are looking for solved timestamps, but Zendesk sometimes (very infrequently) closes tickets without marking them as solved\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n    source_relation,\n    ticket_id,\n    coalesce(min(case when status = 'solved' then valid_starting_at end), min(case when status = 'closed' then valid_starting_at end)) as first_solved_at,\n    coalesce(max(case when status = 'solved' then valid_starting_at end), max(case when status = 'closed' then valid_starting_at end)) as last_solved_at,\n    coalesce(sum(case when status = 'solved' then 1 else 0 end), sum(case when status = 'closed' then 1 else 0 end)) as solved_count \n\n  from historical_solved_status\n  group by 1, 2\n\n)\n\n  select\n    ticket.source_relation,\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    on ticket.ticket_id = ticket_historical_assignee.ticket_id\n    and ticket.source_relation = ticket_historical_assignee.source_relation\n\n  left join ticket_historical_group\n    on ticket.ticket_id = ticket_historical_group.ticket_id\n    and ticket.source_relation = ticket_historical_group.source_relation\n\n  left join solved_times\n    on ticket.ticket_id = solved_times.ticket_id\n    and ticket.source_relation = solved_times.source_relation\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.zendesk__document": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk__document", "resource_type": "model", "package_name": "zendesk", "path": "unstructured/zendesk__document.sql", "original_file_path": "models/unstructured/zendesk__document.sql", "unique_id": "model.zendesk.zendesk__document", "fqn": ["zendesk", "unstructured", "zendesk__document"], "alias": "zendesk__document", "checksum": {"name": "sha256", "checksum": "0782d717f4af870604ae10eea5465fb745288de2111838228d1b87eb25c5f6f5"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a Zendesk ticket, enriched with data about it's tags, assignees, requester, submitter, organization and group.", "columns": {"document_id": {"name": "document_id", "description": "Equivalent to `ticket_id`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "chunk_index": {"name": "chunk_index", "description": "The index of the chunk associated with the `document_id`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "chunk_tokens_approximate": {"name": "chunk_tokens_approximate", "description": "Approximate number of tokens for the chunk, assuming 4 characters per token.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "chunk": {"name": "chunk", "description": "The text of the chunk.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk://models/unstructured/zendesk_unstructured.yml", "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990097.5351539, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__document`", "raw_code": "{{ config(enabled=var('zendesk__unstructured_enabled', False)) }}\n\nwith ticket_document as (\n    select *\n    from {{ ref('int_zendesk__ticket_document') }}\n\n), grouped as (\n    select *\n    from {{ ref('int_zendesk__ticket_comment_documents_grouped') }}\n\n), final as (\n    select\n        ticket_document.source_relation,\n        cast(ticket_document.ticket_id as {{ dbt.type_string() }}) as document_id,\n        grouped.chunk_index,\n        grouped.chunk_tokens as chunk_tokens_approximate,\n        {{ dbt.concat([\n            \"ticket_document.ticket_markdown\",\n            \"'\\\\n\\\\n## COMMENTS\\\\n\\\\n'\",\n            \"grouped.comments_group_markdown\"]) }}\n            as chunk\n    from ticket_document\n    join grouped\n        on grouped.ticket_id = ticket_document.ticket_id\n        and grouped.source_relation = ticket_document.source_relation\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_document", "package": null, "version": null}, {"name": "int_zendesk__ticket_comment_documents_grouped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.concat"], "nodes": ["model.zendesk.int_zendesk__ticket_document", "model.zendesk.int_zendesk__ticket_comment_documents_grouped"]}, "compiled_path": "target/compiled/zendesk/models/unstructured/zendesk__document.sql", "compiled": true, "compiled_code": "\n\nwith ticket_document as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_document`\n\n), grouped as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_comment_documents_grouped`\n\n), final as (\n    select\n        ticket_document.source_relation,\n        cast(ticket_document.ticket_id as string) as document_id,\n        grouped.chunk_index,\n        grouped.chunk_tokens as chunk_tokens_approximate,\n        ticket_document.ticket_markdown || '\\n\\n## COMMENTS\\n\\n' || grouped.comments_group_markdown\n            as chunk\n    from ticket_document\n    join grouped\n        on grouped.ticket_id = ticket_document.ticket_id\n        and grouped.source_relation = ticket_document.source_relation\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_comment_documents_grouped": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_comment_documents_grouped", "resource_type": "model", "package_name": "zendesk", "path": "unstructured/intermediate/int_zendesk__ticket_comment_documents_grouped.sql", "original_file_path": "models/unstructured/intermediate/int_zendesk__ticket_comment_documents_grouped.sql", "unique_id": "model.zendesk.int_zendesk__ticket_comment_documents_grouped", "fqn": ["zendesk", "unstructured", "intermediate", "int_zendesk__ticket_comment_documents_grouped"], "alias": "int_zendesk__ticket_comment_documents_grouped", "checksum": {"name": "sha256", "checksum": "49e04862d6ac6f138073bc932f894b61a38e27d4b098bde2f1d85e94bc99710a"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.920752, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_comment_documents_grouped`", "raw_code": "{{ config(enabled=var('zendesk__unstructured_enabled', False)) }}\n\nwith filtered_comment_documents as (\n  select *\n  from {{ ref('int_zendesk__ticket_comment_document') }}\n),\n\ngrouped_comment_documents as (\n  select \n    source_relation,\n    ticket_id,\n    comment_markdown,\n    comment_tokens,\n    comment_time,\n    sum(comment_tokens) over (\n      partition by source_relation, ticket_id \n      order by comment_time\n      rows between unbounded preceding and current row\n    ) as cumulative_length\n  from filtered_comment_documents\n)\n\nselect \n  source_relation,\n  ticket_id,\n  cast({{ dbt_utils.safe_divide('floor(cumulative_length - 1)', var('zendesk_max_tokens', 5000)) }} as {{ dbt.type_int() }}) as chunk_index,\n  {{ dbt.listagg(\n    measure=\"comment_markdown\",\n    delimiter_text=\"'\\\\n\\\\n---\\\\n\\\\n'\",\n    order_by_clause=\"order by comment_time\"\n    ) }} as comments_group_markdown,\n  sum(comment_tokens) as chunk_tokens\nfrom grouped_comment_documents\ngroup by 1,2,3", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__ticket_comment_document", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.safe_divide", "macro.dbt.type_int", "macro.dbt.listagg"], "nodes": ["model.zendesk.int_zendesk__ticket_comment_document"]}, "compiled_path": "target/compiled/zendesk/models/unstructured/intermediate/int_zendesk__ticket_comment_documents_grouped.sql", "compiled": true, "compiled_code": "\n\nwith filtered_comment_documents as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_comment_document`\n),\n\ngrouped_comment_documents as (\n  select \n    source_relation,\n    ticket_id,\n    comment_markdown,\n    comment_tokens,\n    comment_time,\n    sum(comment_tokens) over (\n      partition by source_relation, ticket_id \n      order by comment_time\n      rows between unbounded preceding and current row\n    ) as cumulative_length\n  from filtered_comment_documents\n)\n\nselect \n  source_relation,\n  ticket_id,\n  cast(\n    ( floor(cumulative_length - 1) ) / nullif( ( 5000 ), 0)\n as INT64) as chunk_index,\n  string_agg(\n        comment_markdown,\n        '\\n\\n---\\n\\n'\n        order by comment_time\n        \n        ) as comments_group_markdown,\n  sum(comment_tokens) as chunk_tokens\nfrom grouped_comment_documents\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_comment_document": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_comment_document", "resource_type": "model", "package_name": "zendesk", "path": "unstructured/intermediate/int_zendesk__ticket_comment_document.sql", "original_file_path": "models/unstructured/intermediate/int_zendesk__ticket_comment_document.sql", "unique_id": "model.zendesk.int_zendesk__ticket_comment_document", "fqn": ["zendesk", "unstructured", "intermediate", "int_zendesk__ticket_comment_document"], "alias": "int_zendesk__ticket_comment_document", "checksum": {"name": "sha256", "checksum": "e29eea5f6a77751c254a0196f47a73951d55d7eaf0429de01f5b29bb2e034a10"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.928454, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_comment_document`", "raw_code": "{{ config(enabled=var('zendesk__unstructured_enabled', False)) }}\n\nwith ticket_comments as (\n    select *\n    from {{ var('ticket_comment') }}\n\n), users as (\n    select *\n    from {{ var('user') }}\n\n), comment_details as (\n    select \n        ticket_comments.source_relation,\n        ticket_comments.ticket_comment_id,\n        ticket_comments.ticket_id,\n        {{ zendesk.coalesce_cast([\"users.email\", \"'UNKNOWN'\"], dbt.type_string()) }} as commenter_email,\n        {{ zendesk.coalesce_cast([\"users.name\", \"'UNKNOWN'\"], dbt.type_string()) }} as commenter_name,\n        ticket_comments.created_at as comment_time,\n        ticket_comments.body as comment_body\n    from ticket_comments\n    left join users\n        on ticket_comments.user_id = users.user_id\n        and ticket_comments.source_relation = users.source_relation\n    where not coalesce(ticket_comments._fivetran_deleted, False)\n        and not coalesce(users._fivetran_deleted, False)\n\n), comment_markdowns as (\n    select\n        source_relation,\n        ticket_comment_id,\n        ticket_id,\n        comment_time,\n        cast(\n            {{ dbt.concat([\n                \"'### message from '\", \"commenter_name\", \"' ('\", \"commenter_email\", \"')\\\\n'\",\n                \"'##### sent @ '\", \"comment_time\", \"'\\\\n'\",\n                \"comment_body\"\n            ]) }} as {{ dbt.type_string() }})\n            as comment_markdown\n    from comment_details\n\n), comments_tokens as (\n    select\n        *,\n        {{ zendesk.count_tokens(\"comment_markdown\") }} as comment_tokens\n    from comment_markdowns\n\n), truncated_comments as (\n    select\n        source_relation,\n        ticket_comment_id,\n        ticket_id,\n        comment_time,\n        case when comment_tokens > {{ var('zendesk_max_tokens', 5000) }} then left(comment_markdown, {{ var('zendesk_max_tokens', 5000) }} * 4)  -- approximate 4 characters per token\n            else comment_markdown\n            end as comment_markdown,\n        case when comment_tokens > {{ var('zendesk_max_tokens', 5000) }} then {{ var('zendesk_max_tokens', 5000) }}\n            else comment_tokens\n            end as comment_tokens\n    from comments_tokens\n)\n\nselect *\nfrom truncated_comments", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_comment", "package": null, "version": null}, {"name": "stg_zendesk__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.zendesk.coalesce_cast", "macro.dbt.concat", "macro.zendesk.count_tokens"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_comment", "model.zendesk_source.stg_zendesk__user"]}, "compiled_path": "target/compiled/zendesk/models/unstructured/intermediate/int_zendesk__ticket_comment_document.sql", "compiled": true, "compiled_code": "\n\nwith ticket_comments as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_comment`\n\n), users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`\n\n), comment_details as (\n    select \n        ticket_comments.source_relation,\n        ticket_comments.ticket_comment_id,\n        ticket_comments.ticket_id,\n        \n  coalesce(\n      cast(users.email as string),\n      cast('UNKNOWN' as string)\n  )\n as commenter_email,\n        \n  coalesce(\n      cast(users.name as string),\n      cast('UNKNOWN' as string)\n  )\n as commenter_name,\n        ticket_comments.created_at as comment_time,\n        ticket_comments.body as comment_body\n    from ticket_comments\n    left join users\n        on ticket_comments.user_id = users.user_id\n        and ticket_comments.source_relation = users.source_relation\n    where not coalesce(ticket_comments._fivetran_deleted, False)\n        and not coalesce(users._fivetran_deleted, False)\n\n), comment_markdowns as (\n    select\n        source_relation,\n        ticket_comment_id,\n        ticket_id,\n        comment_time,\n        cast(\n            '### message from ' || commenter_name || ' (' || commenter_email || ')\\n' || '##### sent @ ' || comment_time || '\\n' || comment_body as string)\n            as comment_markdown\n    from comment_details\n\n), comments_tokens as (\n    select\n        *,\n        \n  \n\n    length(\n        comment_markdown\n    ) / 4 -- 1 token is approximately 4 characters, and we only need an approximation here.\n as comment_tokens\n    from comment_markdowns\n\n), truncated_comments as (\n    select\n        source_relation,\n        ticket_comment_id,\n        ticket_id,\n        comment_time,\n        case when comment_tokens > 5000 then left(comment_markdown, 5000 * 4)  -- approximate 4 characters per token\n            else comment_markdown\n            end as comment_markdown,\n        case when comment_tokens > 5000 then 5000\n            else comment_tokens\n            end as comment_tokens\n    from comments_tokens\n)\n\nselect *\nfrom truncated_comments", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_document": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_document", "resource_type": "model", "package_name": "zendesk", "path": "unstructured/intermediate/int_zendesk__ticket_document.sql", "original_file_path": "models/unstructured/intermediate/int_zendesk__ticket_document.sql", "unique_id": "model.zendesk.int_zendesk__ticket_document", "fqn": ["zendesk", "unstructured", "intermediate", "int_zendesk__ticket_document"], "alias": "int_zendesk__ticket_document", "checksum": {"name": "sha256", "checksum": "24017b18795edd83fb37bf06481b13066e23123c7fe60d9a4896c2c62592c6fa"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.9393542, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_document`", "raw_code": "{{ config(enabled=var('zendesk__unstructured_enabled', False)) }}\n\nwith tickets as (\n    select *\n    from {{ var('ticket') }}\n\n), users as (\n    select *\n    from {{ var('user') }}\n\n), ticket_details as (\n    select\n        tickets.source_relation,\n        tickets.ticket_id,\n        tickets.subject AS ticket_name,\n        {{ zendesk.coalesce_cast([\"users.name\", \"'UNKNOWN'\"], dbt.type_string()) }} as user_name,\n        {{ zendesk.coalesce_cast([\"users.email\", \"'UNKNOWN'\"], dbt.type_string()) }} as created_by,\n        tickets.created_at AS created_on,\n        {{ zendesk.coalesce_cast([\"tickets.status\", \"'UNKNOWN'\"], dbt.type_string()) }} as status,\n        {{ zendesk.coalesce_cast([\"tickets.priority\", \"'UNKNOWN'\"], dbt.type_string()) }} as priority\n    from tickets\n    left join users\n        on tickets.requester_id = users.user_id\n        and tickets.source_relation = users.source_relation\n    where not coalesce(tickets._fivetran_deleted, False)\n        and not coalesce(users._fivetran_deleted, False)\n\n), final as (\n    select\n        source_relation,\n        ticket_id,\n        {{ dbt.concat([\n            \"'# Ticket : '\", \"ticket_name\", \"'\\\\n\\\\n'\",\n            \"'Created By : '\", \"user_name\", \"' ('\", \"created_by\", \"')\\\\n'\",\n            \"'Created On : '\", \"created_on\", \"'\\\\n'\",\n            \"'Status : '\", \"status\", \"'\\\\n'\",\n            \"'Priority : '\", \"priority\"\n        ]) }} as ticket_markdown\n    from ticket_details\n)\n\nselect \n    *,\n    {{ zendesk.count_tokens(\"ticket_markdown\") }} as ticket_tokens\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "stg_zendesk__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.zendesk.coalesce_cast", "macro.dbt.concat", "macro.zendesk.count_tokens"], "nodes": ["model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__user"]}, "compiled_path": "target/compiled/zendesk/models/unstructured/intermediate/int_zendesk__ticket_document.sql", "compiled": true, "compiled_code": "\n\nwith tickets as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`\n\n), ticket_details as (\n    select\n        tickets.source_relation,\n        tickets.ticket_id,\n        tickets.subject AS ticket_name,\n        \n  coalesce(\n      cast(users.name as string),\n      cast('UNKNOWN' as string)\n  )\n as user_name,\n        \n  coalesce(\n      cast(users.email as string),\n      cast('UNKNOWN' as string)\n  )\n as created_by,\n        tickets.created_at AS created_on,\n        \n  coalesce(\n      cast(tickets.status as string),\n      cast('UNKNOWN' as string)\n  )\n as status,\n        \n  coalesce(\n      cast(tickets.priority as string),\n      cast('UNKNOWN' as string)\n  )\n as priority\n    from tickets\n    left join users\n        on tickets.requester_id = users.user_id\n        and tickets.source_relation = users.source_relation\n    where not coalesce(tickets._fivetran_deleted, False)\n        and not coalesce(users._fivetran_deleted, False)\n\n), final as (\n    select\n        source_relation,\n        ticket_id,\n        '# Ticket : ' || ticket_name || '\\n\\n' || 'Created By : ' || user_name || ' (' || created_by || ')\\n' || 'Created On : ' || created_on || '\\n' || 'Status : ' || status || '\\n' || 'Priority : ' || priority as ticket_markdown\n    from ticket_details\n)\n\nselect \n    *,\n    \n  \n\n    length(\n        ticket_markdown\n    ) / 4 -- 1 token is approximately 4 characters, and we only need an approximation here.\n as ticket_tokens\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__updates": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__updates", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__updates.sql", "original_file_path": "models/intermediate/int_zendesk__updates.sql", "unique_id": "model.zendesk.int_zendesk__updates", "fqn": ["zendesk", "intermediate", "int_zendesk__updates"], "alias": "int_zendesk__updates", "checksum": {"name": "sha256", "checksum": "104c2e8453e391029387b08e2733191e524692e452287fb9d233b10af0710bec"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.945958, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`", "raw_code": "with ticket_history as (\n    select *\n    from {{ ref('stg_zendesk__ticket_field_history') }}\n\n), ticket_comment as (\n    select *\n    from {{ ref('stg_zendesk__ticket_comment') }}\n\n), tickets as (\n    select *\n    from {{ ref('stg_zendesk__ticket') }}\n\n{% if var('using_ticket_chat', False) %}\n), ticket_chat as (\n\n    select *\n    from {{ ref('stg_zendesk__ticket_chat') }}\n\n), ticket_chat_event as (\n\n    select *\n    from {{ ref('stg_zendesk__ticket_chat_event') }}\n    where lower(type) = 'chatmessage'\n\n), ticket_chat_join as (\n\n    select \n        ticket_chat_event.*,\n        ticket_chat.ticket_id \n\n    from ticket_chat_event \n    inner join ticket_chat \n        on ticket_chat_event.chat_id = ticket_chat.chat_id\n        and ticket_chat_event.source_relation = ticket_chat.source_relation\n{% endif %}\n\n), updates_union as (\n    select \n        source_relation,\n        ticket_id,\n        field_name,\n        value,\n        null as is_public,\n        user_id,\n        valid_starting_at,\n        valid_ending_at\n    from ticket_history\n\n    union all\n\n    select\n        source_relation,\n        ticket_id,\n        {# \n        We want to be able to differentiate between ticket_comment and ticket_chat comments in the next CTE \n        This is necessary because ticket_comment will batch together individual chat messages to the conversation level (in 1 record). \n        We want to remove these aggregate conversations in favor of the individual messages\n        #}\n        cast('comment - not chat' as {{ dbt.type_string() }}) as field_name,\n        body as value,\n        is_public,\n        user_id,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by source_relation, ticket_id order by created_at) as valid_ending_at\n    from ticket_comment\n\n{% if var('using_ticket_chat', False) %}\n    union all\n\n    select\n        source_relation,\n        ticket_id,\n        {# \n        We want to be able to differentiate between ticket_comment and ticket_chat comments in the next CTE \n        This is necessary because ticket_comment will batch together individual chat messages to the conversation level (in 1 record). \n        We want to remove these aggregate conversations in favor of the individual messages\n        #}\n        cast('comment - chat' as {{ dbt.type_string() }}) as field_name,\n        message as value,\n        true as is_public,\n        actor_id as user_id,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by source_relation, ticket_id order by created_at) as valid_ending_at\n    from ticket_chat_join\n{% endif %}\n\n), final as (\n    select\n        updates_union.source_relation,\n        updates_union.ticket_id,\n        {# Now group comments back together since the conversation batches are filtered out in the where clause #}\n        case \n            when updates_union.field_name in ('comment - chat', 'comment - not chat') then 'comment' \n        else updates_union.field_name end as field_name,\n        updates_union.value,\n        updates_union.is_public,\n        updates_union.user_id,\n        updates_union.valid_starting_at,\n        updates_union.valid_ending_at,\n        tickets.created_at as ticket_created_date\n    from updates_union\n\n    left join tickets\n        on tickets.ticket_id = updates_union.ticket_id\n        and tickets.source_relation = updates_union.source_relation\n\n    {# \n    What's excluded: The chat conversation batches from ticket_comment. These are marked as `comment - not chat` and are associated with tickets from `chat` or `native_messaging` channels\n    What's included: \n        - Individual chat messages from ticket_chat_event. These are marked as `comment - chat`\n        - True comments from ticket_comment. We know a record is a true ticket_comment if the ticket is NOT from `chat` or `native_messaging` channels\n    #}\n    where not (updates_union.field_name = 'comment - not chat' and lower(coalesce(tickets.created_channel, '')) in ('chat', 'native_messaging'))\n\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_field_history", "package": null, "version": null}, {"name": "stg_zendesk__ticket_comment", "package": null, "version": null}, {"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "stg_zendesk__ticket_chat", "package": null, "version": null}, {"name": "stg_zendesk__ticket_chat_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_field_history", "model.zendesk_source.stg_zendesk__ticket_comment", "model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__ticket_chat", "model.zendesk_source.stg_zendesk__ticket_chat_event"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__updates.sql", "compiled": true, "compiled_code": "with ticket_history as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history`\n\n), ticket_comment as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_comment`\n\n), tickets as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n\n), ticket_chat as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat`\n\n), ticket_chat_event as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat_event`\n    where lower(type) = 'chatmessage'\n\n), ticket_chat_join as (\n\n    select \n        ticket_chat_event.*,\n        ticket_chat.ticket_id \n\n    from ticket_chat_event \n    inner join ticket_chat \n        on ticket_chat_event.chat_id = ticket_chat.chat_id\n        and ticket_chat_event.source_relation = ticket_chat.source_relation\n\n\n), updates_union as (\n    select \n        source_relation,\n        ticket_id,\n        field_name,\n        value,\n        null as is_public,\n        user_id,\n        valid_starting_at,\n        valid_ending_at\n    from ticket_history\n\n    union all\n\n    select\n        source_relation,\n        ticket_id,\n        \n        cast('comment - not chat' as string) as field_name,\n        body as value,\n        is_public,\n        user_id,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by source_relation, ticket_id order by created_at) as valid_ending_at\n    from ticket_comment\n\n\n    union all\n\n    select\n        source_relation,\n        ticket_id,\n        \n        cast('comment - chat' as string) as field_name,\n        message as value,\n        true as is_public,\n        actor_id as user_id,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by source_relation, ticket_id order by created_at) as valid_ending_at\n    from ticket_chat_join\n\n\n), final as (\n    select\n        updates_union.source_relation,\n        updates_union.ticket_id,\n        \n        case \n            when updates_union.field_name in ('comment - chat', 'comment - not chat') then 'comment' \n        else updates_union.field_name end as field_name,\n        updates_union.value,\n        updates_union.is_public,\n        updates_union.user_id,\n        updates_union.valid_starting_at,\n        updates_union.valid_ending_at,\n        tickets.created_at as ticket_created_date\n    from updates_union\n\n    left join tickets\n        on tickets.ticket_id = updates_union.ticket_id\n        and tickets.source_relation = updates_union.source_relation\n\n    \n    where not (updates_union.field_name = 'comment - not chat' and lower(coalesce(tickets.created_channel, '')) in ('chat', 'native_messaging'))\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_historical_assignee": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_historical_assignee", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__ticket_historical_assignee.sql", "original_file_path": "models/intermediate/int_zendesk__ticket_historical_assignee.sql", "unique_id": "model.zendesk.int_zendesk__ticket_historical_assignee", "fqn": ["zendesk", "intermediate", "int_zendesk__ticket_historical_assignee"], "alias": "int_zendesk__ticket_historical_assignee", "checksum": {"name": "sha256", "checksum": "d426b08f767f2ffd8c17cc780cbc9573a53ee58aa21fcb260f9c06bd60d9521c"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.950984, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_assignee`", "raw_code": "with assignee_updates as (\n\n    select *\n    from {{ ref('int_zendesk__updates') }}\n    where field_name = 'assignee_id'\n\n), calculate_metrics as (\n    select\n        source_relation,\n        ticket_id,\n        field_name as assignee_id,\n        value,\n        ticket_created_date,\n        valid_starting_at,\n        lag(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at) as previous_update,\n        lag(value) over (partition by source_relation, ticket_id order by valid_starting_at) as previous_assignee,\n        first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_agent_assignment_date,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_assignee_id,\n        first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_agent_assignment_date,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_assignee_id,\n        count(value) over (partition by source_relation, ticket_id) as assignee_stations_count\n    from assignee_updates\n\n), unassigned_time as (\n    select\n        source_relation,\n        ticket_id,\n        sum(case when assignee_id is not null and previous_assignee is null \n            then {{ dbt.datediff(\"coalesce(previous_update, ticket_created_date)\", \"valid_starting_at\", 'second') }} / 60\n            else 0\n                end) as ticket_unassigned_duration_calendar_minutes,\n        count(distinct value) as unique_assignee_count\n    from calculate_metrics\n\n    group by 1, 2\n\n), window_group as (\n    select\n        calculate_metrics.source_relation,\n        calculate_metrics.ticket_id,\n        calculate_metrics.first_agent_assignment_date,\n        calculate_metrics.first_assignee_id,\n        calculate_metrics.last_agent_assignment_date,\n        calculate_metrics.last_assignee_id,\n        calculate_metrics.assignee_stations_count\n    from calculate_metrics\n\n    {{ dbt_utils.group_by(n=7) }}\n\n), final as (\n    select\n        window_group.*,\n        unassigned_time.unique_assignee_count,\n        unassigned_time.ticket_unassigned_duration_calendar_minutes\n    from window_group\n\n    left join unassigned_time\n        on window_group.ticket_id  = unassigned_time.ticket_id\n        and window_group.source_relation = unassigned_time.source_relation\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_utils.group_by"], "nodes": ["model.zendesk.int_zendesk__updates"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__ticket_historical_assignee.sql", "compiled": true, "compiled_code": "with assignee_updates as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'assignee_id'\n\n), calculate_metrics as (\n    select\n        source_relation,\n        ticket_id,\n        field_name as assignee_id,\n        value,\n        ticket_created_date,\n        valid_starting_at,\n        lag(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at) as previous_update,\n        lag(value) over (partition by source_relation, ticket_id order by valid_starting_at) as previous_assignee,\n        first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_agent_assignment_date,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_assignee_id,\n        first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_agent_assignment_date,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_assignee_id,\n        count(value) over (partition by source_relation, ticket_id) as assignee_stations_count\n    from assignee_updates\n\n), unassigned_time as (\n    select\n        source_relation,\n        ticket_id,\n        sum(case when assignee_id is not null and previous_assignee is null \n            then \n\n    datetime_diff(\n        cast(valid_starting_at as datetime),\n        cast(coalesce(previous_update, ticket_created_date) as datetime),\n        second\n    )\n\n   / 60\n            else 0\n                end) as ticket_unassigned_duration_calendar_minutes,\n        count(distinct value) as unique_assignee_count\n    from calculate_metrics\n\n    group by 1, 2\n\n), window_group as (\n    select\n        calculate_metrics.source_relation,\n        calculate_metrics.ticket_id,\n        calculate_metrics.first_agent_assignment_date,\n        calculate_metrics.first_assignee_id,\n        calculate_metrics.last_agent_assignment_date,\n        calculate_metrics.last_assignee_id,\n        calculate_metrics.assignee_stations_count\n    from calculate_metrics\n\n    group by 1,2,3,4,5,6,7\n\n), final as (\n    select\n        window_group.*,\n        unassigned_time.unique_assignee_count,\n        unassigned_time.ticket_unassigned_duration_calendar_minutes\n    from window_group\n\n    left join unassigned_time\n        on window_group.ticket_id  = unassigned_time.ticket_id\n        and window_group.source_relation = unassigned_time.source_relation\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_historical_status": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_historical_status", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__ticket_historical_status.sql", "original_file_path": "models/intermediate/int_zendesk__ticket_historical_status.sql", "unique_id": "model.zendesk.int_zendesk__ticket_historical_status", "fqn": ["zendesk", "intermediate", "int_zendesk__ticket_historical_status"], "alias": "int_zendesk__ticket_historical_status", "checksum": {"name": "sha256", "checksum": "15aae7b3bf7194b9b165ac84937a877d210e189623f0bcd7200780f85cab7ced"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.9548721, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_status`", "raw_code": "-- To do -- can we delete ticket_status_counter and unique_status_counter?\n\nwith ticket_status_history as (\n\n    select *\n    from {{ ref('int_zendesk__updates') }}\n    where field_name = 'status'\n\n)\n\n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at,\n    valid_ending_at,\n    {{ dbt.datediff(\n        'valid_starting_at',\n        \"coalesce(valid_ending_at, \" ~ dbt.current_timestamp() ~ \")\",\n        'minute') }} as status_duration_calendar_minutes,\n    value as status,\n    -- MIGHT BE ABLE TO DELETE ROWS BELOW\n    row_number() over (partition by source_relation, ticket_id order by valid_starting_at) as ticket_status_counter,\n    row_number() over (partition by source_relation, ticket_id, value order by valid_starting_at) as unique_status_counter\n\n  from ticket_status_history", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.datediff"], "nodes": ["model.zendesk.int_zendesk__updates"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__ticket_historical_status.sql", "compiled": true, "compiled_code": "-- To do -- can we delete ticket_status_counter and unique_status_counter?\n\nwith ticket_status_history as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'status'\n\n)\n\n  select\n    source_relation,\n    ticket_id,\n    valid_starting_at,\n    valid_ending_at,\n    \n\n    datetime_diff(\n        cast(coalesce(valid_ending_at, current_timestamp()) as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   as status_duration_calendar_minutes,\n    value as status,\n    -- MIGHT BE ABLE TO DELETE ROWS BELOW\n    row_number() over (partition by source_relation, ticket_id order by valid_starting_at) as ticket_status_counter,\n    row_number() over (partition by source_relation, ticket_id, value order by valid_starting_at) as unique_status_counter\n\n  from ticket_status_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__user_role_history": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__user_role_history", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__user_role_history.sql", "original_file_path": "models/intermediate/int_zendesk__user_role_history.sql", "unique_id": "model.zendesk.int_zendesk__user_role_history", "fqn": ["zendesk", "intermediate", "int_zendesk__user_role_history"], "alias": "int_zendesk__user_role_history", "checksum": {"name": "sha256", "checksum": "4e0b2afba4ec5b717704ee9941c26e8b8f881e5f037b733b590c81318d857401"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.9597251, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`", "raw_code": "{{ config(enabled=var('using_user_role_histories', True) and var('using_audit_log', False)) }}\n\nwith audit_logs as (\n    select\n        source_relation,\n        source_id as user_id,\n        source_label as user_name,\n        created_at,\n        lower(change_description) as change_description\n    from {{ var('audit_log') }}\n    where \n        lower(change_description) like '%support role changed from%'\n        and source_type = 'user'\n\n), users as (\n    select *\n    from {{ var('user') }}\n\n-- Split the change_description into \"from\" and \"to\" strings\n), split_to_from as (\n    select\n        source_relation,\n        user_id,\n        user_name,\n        created_at,\n        change_description,\n        -- extract and split change description for the support role\n        trim({{ dbt.split_part(zendesk.extract_support_role_changes('change_description'), \"' to '\", 1) }}) as from_role,\n        trim({{ dbt.split_part(zendesk.extract_support_role_changes('change_description'), \"' to '\", 2) }}) as to_role,\n\n        -- Identify the first change record so we know user's beginning role\n        min(created_at) over (partition by source_relation, user_id) as min_created_at_per_user\n    from audit_logs\n\n-- Isolates the first \"from\" role as the base\n), first_roles as (\n    select\n        source_relation,\n        user_id,\n        user_name,\n        change_description,\n        cast(null as {{ dbt.type_timestamp() }}) as valid_starting_at, --fill in with created_at of user later\n        created_at as valid_ending_at, -- this it the created_at of the audit log entry\n        from_role as role\n    from split_to_from\n    where created_at = min_created_at_per_user\n\n-- Captures all subsequent \"to\" roles\n), role_changes as (\n    select\n        source_relation,\n        user_id,\n        user_name,\n        change_description,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by source_relation, user_id order by created_at asc) as valid_ending_at,\n        to_role as role\n    from split_to_from\n\n), unioned as (\n    select *\n    from first_roles\n\n    union all\n\n    select *\n    from role_changes\n\n), users_joined as (\n    -- create history records for users with no changes\n    select\n        users.user_id,\n        users.source_relation,\n        lower(coalesce(unioned.role, users.role)) as role,\n        coalesce(unioned.valid_starting_at, users.created_at, cast('1970-01-01' as {{ dbt.type_timestamp() }})) as valid_starting_at,\n        coalesce(unioned.valid_ending_at, {{ dbt.current_timestamp() }}) as valid_ending_at,\n        unioned.change_description,\n        -- include these in case they're needed for the internal_user_criteria\n        users.external_id,\n        users.email,\n        users.last_login_at,\n        users.created_at,\n        users.updated_at,\n        users.name,\n        users.organization_id,\n        users.phone,\n        users.ticket_restriction,\n        users.time_zone,\n        users.locale,\n        users.is_active,\n        users.is_suspended\n    from users\n    left join unioned\n        on users.user_id = unioned.user_id\n        and users.source_relation = unioned.source_relation\n\n), final as (\n    select\n        user_id,\n        source_relation,\n        role,\n        valid_starting_at,\n        valid_ending_at,\n        change_description,\n\n        {% if var('internal_user_criteria', false) -%} -- apply the filter to historical roles if provided\n        role in ('admin', 'agent') or {{ var('internal_user_criteria', false) }} as is_internal_role\n        {% else -%}\n        role not in ('not set', 'end-user') as is_internal_role\n        {% endif -%}\n    from users_joined\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__audit_log", "package": null, "version": null}, {"name": "stg_zendesk__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk.extract_support_role_changes", "macro.dbt.split_part", "macro.dbt.type_timestamp", "macro.dbt.current_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__audit_log", "model.zendesk_source.stg_zendesk__user"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__user_role_history.sql", "compiled": true, "compiled_code": "\n\nwith audit_logs as (\n    select\n        source_relation,\n        source_id as user_id,\n        source_label as user_name,\n        created_at,\n        lower(change_description) as change_description\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__audit_log`\n    where \n        lower(change_description) like '%support role changed from%'\n        and source_type = 'user'\n\n), users as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`\n\n-- Split the change_description into \"from\" and \"to\" strings\n), split_to_from as (\n    select\n        source_relation,\n        user_id,\n        user_name,\n        created_at,\n        change_description,\n        -- extract and split change description for the support role\n        trim(\n\n  \n    split(\n        \n    \n\n  \n    split(\n        \n\n  \n    split(\n        change_description,\n        'support role changed from '\n        )[safe_offset(1)]\n  \n\n,\n        '\\n'\n        )[safe_offset(0)]\n  \n\n,\n        ' to '\n        )[safe_offset(0)]\n  \n\n) as from_role,\n        trim(\n\n  \n    split(\n        \n    \n\n  \n    split(\n        \n\n  \n    split(\n        change_description,\n        'support role changed from '\n        )[safe_offset(1)]\n  \n\n,\n        '\\n'\n        )[safe_offset(0)]\n  \n\n,\n        ' to '\n        )[safe_offset(1)]\n  \n\n) as to_role,\n\n        -- Identify the first change record so we know user's beginning role\n        min(created_at) over (partition by source_relation, user_id) as min_created_at_per_user\n    from audit_logs\n\n-- Isolates the first \"from\" role as the base\n), first_roles as (\n    select\n        source_relation,\n        user_id,\n        user_name,\n        change_description,\n        cast(null as timestamp) as valid_starting_at, --fill in with created_at of user later\n        created_at as valid_ending_at, -- this it the created_at of the audit log entry\n        from_role as role\n    from split_to_from\n    where created_at = min_created_at_per_user\n\n-- Captures all subsequent \"to\" roles\n), role_changes as (\n    select\n        source_relation,\n        user_id,\n        user_name,\n        change_description,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by source_relation, user_id order by created_at asc) as valid_ending_at,\n        to_role as role\n    from split_to_from\n\n), unioned as (\n    select *\n    from first_roles\n\n    union all\n\n    select *\n    from role_changes\n\n), users_joined as (\n    -- create history records for users with no changes\n    select\n        users.user_id,\n        users.source_relation,\n        lower(coalesce(unioned.role, users.role)) as role,\n        coalesce(unioned.valid_starting_at, users.created_at, cast('1970-01-01' as timestamp)) as valid_starting_at,\n        coalesce(unioned.valid_ending_at, current_timestamp()) as valid_ending_at,\n        unioned.change_description,\n        -- include these in case they're needed for the internal_user_criteria\n        users.external_id,\n        users.email,\n        users.last_login_at,\n        users.created_at,\n        users.updated_at,\n        users.name,\n        users.organization_id,\n        users.phone,\n        users.ticket_restriction,\n        users.time_zone,\n        users.locale,\n        users.is_active,\n        users.is_suspended\n    from users\n    left join unioned\n        on users.user_id = unioned.user_id\n        and users.source_relation = unioned.source_relation\n\n), final as (\n    select\n        user_id,\n        source_relation,\n        role,\n        valid_starting_at,\n        valid_ending_at,\n        change_description,\n\n        role not in ('not set', 'end-user') as is_internal_role\n        from users_joined\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__user_aggregates": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__user_aggregates", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__user_aggregates.sql", "original_file_path": "models/intermediate/int_zendesk__user_aggregates.sql", "unique_id": "model.zendesk.int_zendesk__user_aggregates", "fqn": ["zendesk", "intermediate", "int_zendesk__user_aggregates"], "alias": "int_zendesk__user_aggregates", "checksum": {"name": "sha256", "checksum": "c0e3d1b6319911e556aa53d985ae08a0430448c75bf2eaa8b7e3ec9e18d2e18b"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.970712, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_aggregates`", "raw_code": "with users as (\n  select *\n  from {{ ref('stg_zendesk__user') }}\n\n--If you use user tags this will be included, if not it will be ignored.\n{% if var('using_user_tags', True) %}\n), user_tags as (\n\n  select *\n  from {{ ref('stg_zendesk__user_tag') }}\n  \n), user_tag_aggregate as (\n  select\n    user_tags.user_id,\n    source_relation,\n    {{ fivetran_utils.string_agg( 'user_tags.tags', \"', '\" )}} as user_tags\n  from user_tags\n  group by 1, 2\n\n{% endif %}\n\n), final as (\n  select \n    users.*,\n    users.role in ('agent','admin') as is_internal_role\n\n    --If you use user tags this will be included, if not it will be ignored.\n    {% if var('using_user_tags', True) %}\n    , user_tag_aggregate.user_tags\n    {% endif %}\n  from users\n\n  --If you use user tags this will be included, if not it will be ignored.\n  {% if var('using_user_tags', True) %}\n  left join user_tag_aggregate\n    on users.user_id = user_tag_aggregate.user_id \n    and users.source_relation = user_tag_aggregate.source_relation\n  {% endif %}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__user", "package": null, "version": null}, {"name": "stg_zendesk__user_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.zendesk_source.stg_zendesk__user", "model.zendesk_source.stg_zendesk__user_tag"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__user_aggregates.sql", "compiled": true, "compiled_code": "with users as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`\n\n--If you use user tags this will be included, if not it will be ignored.\n\n), user_tags as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user_tag`\n  \n), user_tag_aggregate as (\n  select\n    user_tags.user_id,\n    source_relation,\n    \n    string_agg(user_tags.tags, ', ')\n\n as user_tags\n  from user_tags\n  group by 1, 2\n\n\n\n), final as (\n  select \n    users.*,\n    users.role in ('agent','admin') as is_internal_role\n\n    --If you use user tags this will be included, if not it will be ignored.\n    \n    , user_tag_aggregate.user_tags\n    \n  from users\n\n  --If you use user tags this will be included, if not it will be ignored.\n  \n  left join user_tag_aggregate\n    on users.user_id = user_tag_aggregate.user_id \n    and users.source_relation = user_tag_aggregate.source_relation\n  \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__schedule_spine": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__schedule_spine", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__schedule_spine.sql", "original_file_path": "models/intermediate/int_zendesk__schedule_spine.sql", "unique_id": "model.zendesk.int_zendesk__schedule_spine", "fqn": ["zendesk", "intermediate", "int_zendesk__schedule_spine"], "alias": "int_zendesk__schedule_spine", "checksum": {"name": "sha256", "checksum": "c7d147f1517b0ab96a5699c89b1e2117acf53ee4fd13d1aca4ba4f89345ed73c"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.976485, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_spine`", "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\n/*\n    This model generates `valid_from` and `valid_until` timestamps for each schedule start_time and stop_time, \n    accounting for timezone changes, holidays, and historical schedule adjustments. The inclusion of holidays \n    and historical changes is controlled by variables `using_holidays` and `using_schedule_histories`.\n\n    !!! Important distinction for holiday ranges: A holiday remains valid through the entire day specified by \n    the `valid_until` field. In contrast, schedule history and timezone `valid_until` values mark the end of \n    validity at the start of the specified day.\n*/\n\nwith schedule_timezones as (\n    select *\n    from {{ ref('int_zendesk__schedule_timezones') }}  \n\n{% if var('using_holidays', True) %}\n), schedule_holidays as (\n    select *\n    from {{ ref('int_zendesk__schedule_holiday') }}  \n\n-- Joins the schedules with holidays, ensuring holidays fall within the valid schedule period.\n-- If there are no holidays, the columns are filled with null values.\n), join_holidays as (\n    select \n        schedule_timezones.source_relation,\n        schedule_timezones.schedule_id,\n        schedule_timezones.time_zone,\n        schedule_timezones.offset_minutes,\n        schedule_timezones.start_time_utc,\n        schedule_timezones.end_time_utc,\n        schedule_timezones.schedule_name,\n        schedule_timezones.schedule_valid_from,\n        schedule_timezones.schedule_valid_until,\n        schedule_timezones.schedule_starting_sunday,\n        schedule_timezones.schedule_ending_sunday,\n        schedule_timezones.change_type,\n        schedule_holidays.holiday_date,\n        schedule_holidays.holiday_name,\n        schedule_holidays.holiday_valid_from,\n        schedule_holidays.holiday_valid_until,\n        schedule_holidays.holiday_starting_sunday,\n        schedule_holidays.holiday_ending_sunday,\n        schedule_holidays.holiday_start_or_end\n    from schedule_timezones\n    left join schedule_holidays\n        on schedule_holidays.schedule_id = schedule_timezones.schedule_id\n        and schedule_holidays.holiday_date >= schedule_timezones.schedule_valid_from\n        and schedule_holidays.holiday_date < schedule_timezones.schedule_valid_until\n        and schedule_timezones.source_relation = schedule_holidays.source_relation\n\n-- Find and count all holidays that fall within a schedule range.\n), valid_from_partition as(\n    select\n        join_holidays.*,\n        row_number() over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from order by holiday_date, holiday_start_or_end) as valid_from_index,\n        count(*) over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from) as max_valid_from_index\n    from join_holidays\n\n-- Label the partition start and add a row to account for the partition end if there are multiple valid periods.\n), add_partition_end_row as(\n    select\n        source_relation,\n        schedule_id,\n        time_zone,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n        schedule_starting_sunday,\n        schedule_ending_sunday,\n        change_type,\n        holiday_name,\n        holiday_date,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        case when valid_from_index = 1 and holiday_start_or_end is not null\n            then 'partition_start'\n            else holiday_start_or_end\n            end as holiday_start_or_end,\n        valid_from_index,\n        max_valid_from_index\n    from valid_from_partition\n    \n    union all\n\n    -- when max_valid_from_index > 1, then we want to duplicate the last row to end the partition.\n    select\n        source_relation,\n        schedule_id,\n        time_zone,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n        schedule_starting_sunday,\n        schedule_ending_sunday,\n        change_type,\n        holiday_name,\n        holiday_date,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        'partition_end' as holiday_start_or_end,\n        max_valid_from_index + 1 as valid_from_index,\n        max_valid_from_index\n    from valid_from_partition\n    where max_valid_from_index > 1\n    and valid_from_index = max_valid_from_index -- this finds the last rows to duplicate\n\n-- Adjusts and fills the valid from and valid until times for each partition, taking into account the partition start, gap, or holiday.\n), adjust_ranges as(\n    select\n        add_partition_end_row.*,\n        case\n            when holiday_start_or_end = 'partition_start'\n                then schedule_starting_sunday\n            when holiday_start_or_end = '0_gap'\n                then lag(holiday_ending_sunday) over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from order by valid_from_index)\n            when holiday_start_or_end = '1_holiday'\n                then holiday_starting_sunday\n            when holiday_start_or_end = 'partition_end'\n                then holiday_ending_sunday\n            else schedule_starting_sunday\n        end as valid_from,\n        case \n            when holiday_start_or_end = 'partition_start'\n                then holiday_starting_sunday\n            when holiday_start_or_end = '0_gap'\n                then lead(holiday_starting_sunday) over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from order by valid_from_index)\n            when holiday_start_or_end = '1_holiday'\n                then holiday_ending_sunday\n            when holiday_start_or_end = 'partition_end'\n                then schedule_ending_sunday\n            else schedule_ending_sunday\n        end as valid_until\n    from add_partition_end_row\n\n), holiday_weeks as(\n    select\n        source_relation,\n        schedule_id,\n        time_zone,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_name,\n        valid_from,\n        valid_until,\n        holiday_name,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        holiday_start_or_end,\n        valid_from_index,\n        case when holiday_start_or_end = '1_holiday'\n            then 'holiday'\n            else change_type\n            end as change_type\n    from adjust_ranges\n    -- filter out irrelevant records after adjusting the ranges\n    where not (valid_from >= valid_until and holiday_date is not null)\n\n-- Converts holiday valid_from and valid_until times into minutes from the start of the week, adjusting for timezones.\n), valid_minutes as(\n    select\n        holiday_weeks.*,\n\n        -- Calculate holiday_valid_from in minutes from week start\n        case when change_type = 'holiday' \n            then ({{ dbt.datediff('holiday_starting_sunday', 'holiday_valid_from', 'minute') }}\n                - offset_minutes) -- timezone adjustment\n            else null\n        end as holiday_valid_from_minutes_from_week_start,\n\n        -- Calculate holiday_valid_until in minutes from week start\n        case when change_type = 'holiday' \n            then ({{ dbt.datediff('holiday_starting_sunday', 'holiday_valid_until', 'minute') }}\n                + 24 * 60 -- add 1 day to set the upper bound of the holiday\n                - offset_minutes) -- timezone adjustment\n            else null\n        end as holiday_valid_until_minutes_from_week_start\n    from holiday_weeks\n\n-- Identifies whether a schedule overlaps with a holiday by comparing start and end times with holiday minutes.\n), find_holidays as(\n    select \n        source_relation,\n        schedule_id,\n        valid_from,\n        valid_until,\n        start_time_utc,\n        end_time_utc,\n        change_type,\n        case \n            when start_time_utc < holiday_valid_until_minutes_from_week_start\n                and end_time_utc > holiday_valid_from_minutes_from_week_start\n                and change_type = 'holiday' \n            then holiday_name\n            else cast(null as {{ dbt.type_string() }}) \n        end as holiday_name,\n        count(*) over (partition by source_relation, schedule_id, valid_from, valid_until, start_time_utc, end_time_utc) as number_holidays_in_week\n    from valid_minutes\n\n-- Filter out records where holiday overlaps don't match, ensuring each schedule's holiday status is consistent.\n), filter_holidays as(\n    select \n        *,\n        cast(1 as {{ dbt.type_int() }}) as number_records_for_schedule_start_end\n    from find_holidays\n    where number_holidays_in_week = 1\n\n    union all\n\n    -- Count the number of records for each schedule start_time_utc and end_time_utc for filtering later.\n    select \n        distinct *,\n        cast(count(*) over (partition by source_relation, schedule_id, valid_from, valid_until, start_time_utc, end_time_utc, holiday_name) \n            as {{ dbt.type_int() }}) as number_records_for_schedule_start_end\n    from find_holidays\n    where number_holidays_in_week > 1\n\n), final as(\n    select \n        source_relation,\n        schedule_id,\n        valid_from,\n        valid_until,\n        start_time_utc,\n        end_time_utc,\n        change_type\n    from filter_holidays\n\n    -- This filter ensures that for each schedule, the count of holidays in a week matches the number \n    -- of distinct schedule records with the same start_time_utc and end_time_utc.\n    -- Rows where this count doesn't match indicate overlap with a holiday, so we filter out that record.\n    -- Additionally, schedule records that fall on a holiday are excluded by checking if holiday_name is null.\n    where number_holidays_in_week = number_records_for_schedule_start_end\n    and holiday_name is null\n\n{% else %} \n), final as(\n    select \n        source_relation,\n        schedule_id,\n        schedule_valid_from as valid_from,\n        schedule_valid_until as valid_until,\n        start_time_utc,\n        end_time_utc,\n        change_type\n    from schedule_timezones\n{% endif %} \n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__schedule_timezones", "package": null, "version": null}, {"name": "int_zendesk__schedule_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.type_string", "macro.dbt.type_int"], "nodes": ["model.zendesk.int_zendesk__schedule_timezones", "model.zendesk.int_zendesk__schedule_holiday"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__schedule_spine.sql", "compiled": true, "compiled_code": "\n\n/*\n    This model generates `valid_from` and `valid_until` timestamps for each schedule start_time and stop_time, \n    accounting for timezone changes, holidays, and historical schedule adjustments. The inclusion of holidays \n    and historical changes is controlled by variables `using_holidays` and `using_schedule_histories`.\n\n    !!! Important distinction for holiday ranges: A holiday remains valid through the entire day specified by \n    the `valid_until` field. In contrast, schedule history and timezone `valid_until` values mark the end of \n    validity at the start of the specified day.\n*/\n\nwith  __dbt__cte__int_zendesk__timezone_daylight as (\n\n\nwith timezone as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`\n\n), daylight_time as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time`\n\n), timezone_with_dt as (\n\n    select \n        timezone.*,\n        daylight_time.daylight_start_utc,\n        daylight_time.daylight_end_utc,\n        daylight_time.daylight_offset_minutes\n\n    from timezone \n    left join daylight_time \n        on timezone.time_zone = daylight_time.time_zone\n        and timezone.source_relation = daylight_time.source_relation\n\n), order_timezone_dt as (\n\n    select \n        *,\n        -- will be null for timezones without any daylight savings records (and the first entry)\n        -- we will coalesce the first entry date with .... the X years ago\n        lag(daylight_end_utc, 1) over (partition by source_relation, time_zone order by daylight_end_utc asc) as last_daylight_end_utc,\n        -- will be null for timezones without any daylight savings records (and the last entry)\n        -- we will coalesce the last entry date with the current date \n        lead(daylight_start_utc, 1) over (partition by source_relation, time_zone order by daylight_start_utc asc) as next_daylight_start_utc\n\n    from timezone_with_dt\n\n), split_timezones as (\n\n    -- standard (includes timezones without DT)\n    -- starts: when the last Daylight Savings ended\n    -- ends: when the next Daylight Savings starts\n    select \n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- last_daylight_end_utc is null for the first record of the time_zone's daylight time, or if the TZ doesn't use DT\n        coalesce(last_daylight_end_utc, cast('1970-01-01' as date)) as valid_from,\n\n        -- daylight_start_utc is null for timezones that don't use DT\n        coalesce(daylight_start_utc, cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date)) as valid_until\n\n    from order_timezone_dt\n\n    union all \n\n    -- DT (excludes timezones without it)\n    -- starts: when this Daylight Savings started\n    -- ends: when this Daylight Savings ends\n    select \n        source_relation,\n        time_zone,\n        -- Pacific Time is -8h during standard time and -7h during DT\n        standard_offset_minutes + daylight_offset_minutes as offset_minutes,\n        daylight_start_utc as valid_from,\n        daylight_end_utc as valid_until\n\n    from order_timezone_dt\n    where daylight_offset_minutes is not null\n\n    union all\n\n    select\n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- Get the latest daylight_end_utc time and set that as the valid_from\n        max(daylight_end_utc) as valid_from,\n\n        -- If the latest_daylight_end_time_utc is less than todays timestamp, that means DST has ended. Therefore, we will make the valid_until in the future.\n        cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date) as valid_until\n\n    from order_timezone_dt\n    group by 1, 2, 3\n    -- We only want to apply this logic to time_zone's that had daylight saving time and it ended at a point. For example, Hong Kong ended DST in 1979.\n    having cast(max(daylight_end_utc) as date) < cast(current_timestamp() as date)\n\n), final as (\n    select\n        source_relation,\n        lower(time_zone) as time_zone,\n        offset_minutes,\n        cast(valid_from as timestamp) as valid_from,\n        cast(valid_until as timestamp) as valid_until\n    from split_timezones\n)\n\nselect * \nfrom final\n),  __dbt__cte__int_zendesk__schedule_timezones as (\n\n\nwith split_timezones as (\n    select *\n    from __dbt__cte__int_zendesk__timezone_daylight  \n\n), schedule as (\n    select \n        *,\n        max(created_at) over (partition by source_relation, schedule_id) as max_created_at\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`   \n\n\n), schedule_history as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_history`  \n\n-- Select the most recent timezone associated with each schedule based on \n-- the max_created_at timestamp. Historical timezone changes are not yet tracked.\n), schedule_id_timezone as (\n    select\n        distinct schedule_id, source_relation,\n        lower(time_zone) as time_zone,\n        schedule_name\n    from schedule\n    where created_at = max_created_at\n\n-- Combine historical schedules with the most recent timezone data. Filter \n-- out records where the timezone is missing, indicating the schedule has \n-- been deleted.\n), schedule_history_timezones as (\n    select\n        schedule_history.source_relation,\n        schedule_history.schedule_id,\n        schedule_history.schedule_id_index,\n        schedule_history.start_time,\n        schedule_history.end_time,\n        schedule_history.valid_from,\n        schedule_history.valid_until,\n        lower(schedule_id_timezone.time_zone) as time_zone,\n        schedule_id_timezone.schedule_name\n    from schedule_history\n    left join schedule_id_timezone\n        on schedule_id_timezone.schedule_id = schedule_history.schedule_id\n        and schedule_id_timezone.source_relation = schedule_history.source_relation\n    -- We have to filter these records out since time math requires timezone\n    -- revisit later if this becomes a bigger issue\n    where time_zone is not null\n\n-- Combine current schedules with historical schedules. Adjust the valid_from and valid_until dates accordingly.\n), union_schedule_histories as (\n    select\n        source_relation,\n        schedule_id,\n        0 as schedule_id_index, -- set the index as 0 for the current schedule\n        created_at,\n        start_time,\n        end_time,\n        lower(time_zone) as time_zone,\n        schedule_name,\n        cast(null as date) as valid_from, -- created_at is when the schedule was first ever created, so we'll fill this value later\n        cast(\n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 7 day\n        )\n\n as date) as valid_until,\n        False as is_historical\n    from schedule\n\n    union all\n\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        cast(null as timestamp) as created_at,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        cast(valid_from as date) as valid_from,\n        cast(valid_until as date) as valid_until,\n        True as is_historical\n    from schedule_history_timezones\n\n-- Set the schedule_valid_from for current schedules based on the most recent historical row.\n-- This allows the current schedule to pick up where the historical schedule left off.\n), fill_current_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        coalesce(case\n            when schedule_id_index = 0\n            -- get max valid_until from historical rows in the same schedule\n            then max(case when schedule_id_index > 0 then valid_until end) \n                over (partition by source_relation, schedule_id)\n            else valid_from\n            end,\n            cast(created_at as date))\n        as schedule_valid_from,\n        valid_until as schedule_valid_until\n    from union_schedule_histories\n\n-- Detect adjacent time periods by lagging the schedule_valid_until value \n-- to identify effectively unchanged schedules.\n), lag_valid_until as (\n    select \n        fill_current_schedule.*,\n        lag(schedule_valid_until) over (partition by source_relation, schedule_id, start_time, end_time \n            order by schedule_valid_from, schedule_valid_until) as previous_valid_until\n    from fill_current_schedule\n\n-- Identify distinct schedule groupings based on schedule_id, start_time, and end_time.\n-- Consolidate only adjacent schedules; if a schedule changes and later reverts to its original time, \n-- we want to maintain the intermediate schedule change.\n), find_actual_changes as (\n    select \n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n\n    -- The group_id increments only when there is a gap between the previous schedule's \n    -- valid_until and the current schedule's valid_from, signaling the schedules are not adjacent.\n    -- Adjacent schedules with the same start_time and end_time are grouped together, \n    -- while non-adjacent schedules are treated as separate groups.\n        sum(case when previous_valid_until = schedule_valid_from then 0 else 1 end) -- find if this row is adjacent to the previous row\n            over (partition by source_relation, schedule_id, start_time, end_time \n                order by schedule_valid_from\n                rows between unbounded preceding and current row)\n        as group_id\n    from lag_valid_until\n\n-- Consolidate records into continuous periods by finding the minimum \n-- valid_from and maximum valid_until for each group.\n), consolidate_changes as (\n    select \n        source_relation,\n        schedule_id,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        group_id,\n        min(schedule_id_index) as schedule_id_index, --helps with tracking downstream.\n        min(schedule_valid_from) as schedule_valid_from,\n        max(schedule_valid_until) as schedule_valid_until\n    from find_actual_changes\n    group by 1,2,3,4,5,6,7\n\n-- For each schedule_id, reset the earliest schedule_valid_from date to 1970-01-01 for full schedule coverage.\n), reset_schedule_start as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        start_time,\n        end_time,\n        case \n            when schedule_valid_from = min(schedule_valid_from) over (partition by source_relation, schedule_id) then '1970-01-01'\n            else schedule_valid_from\n        end as schedule_valid_from,\n        schedule_valid_until\n    from consolidate_changes\n\n-- Adjust the schedule times to UTC by applying the timezone offset. Join all possible\n-- time_zone matches for each schedule. The erroneous timezones will be filtered next.\n), schedule_timezones as (\n    select \n        reset_schedule_start.source_relation,\n        reset_schedule_start.schedule_id,\n        reset_schedule_start.schedule_id_index,\n        reset_schedule_start.time_zone,\n        reset_schedule_start.schedule_name,\n        coalesce(split_timezones.offset_minutes, 0) as offset_minutes,\n        reset_schedule_start.start_time - coalesce(split_timezones.offset_minutes, 0) as start_time_utc,\n        reset_schedule_start.end_time - coalesce(split_timezones.offset_minutes, 0) as end_time_utc,\n        cast(reset_schedule_start.schedule_valid_from as timestamp) as schedule_valid_from,\n        cast(reset_schedule_start.schedule_valid_until as timestamp) as schedule_valid_until,\n        -- we'll use these to determine which schedule version to associate tickets with.\n        cast(timestamp_trunc(\n        cast(split_timezones.valid_from as timestamp),\n        day\n    ) as timestamp) as timezone_valid_from,\n        cast(timestamp_trunc(\n        cast(split_timezones.valid_until as timestamp),\n        day\n    )  as timestamp) as timezone_valid_until\n    from reset_schedule_start\n    left join split_timezones\n        on split_timezones.time_zone = reset_schedule_start.time_zone\n        and split_timezones.source_relation = reset_schedule_start.source_relation\n\n-- Assemble the final schedule-timezone relationship by determining the correct \n-- schedule_valid_from and schedule_valid_until based on overlapping periods \n-- between the schedule and timezone. \n), final_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        timezone_valid_from,\n        timezone_valid_until,\n    -- Be very careful if changing the order of these case whens--it does matter!\n        case\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then schedule_valid_from\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then timezone_valid_from\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_from\n        end as schedule_valid_from,\n        case\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then schedule_valid_until\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then timezone_valid_until\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_until\n        end as schedule_valid_until\n\n    from schedule_timezones\n\n    -- Filter records based on whether the schedule periods overlap with timezone periods. Capture\n    -- when a schedule start or end falls within a time zone, and also capture timezones that exist\n    -- entirely within the bounds of a schedule. \n    -- timezone that a schedule start falls within\n    where (schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until)\n    -- timezone that a schedule end falls within\n    or (schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until)\n    -- timezones that fall completely within the bounds of the schedule\n    or (timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until)\n\n\n\n), final as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_valid_from,\n        schedule_valid_until,\n        -- use zendesk.fivetran_week_start to ensure we truncate to Sunday\n        cast(cast(timestamp_trunc(\n        cast(schedule_valid_from as timestamp),\n        week\n    ) as date) as timestamp) as schedule_starting_sunday,\n        cast(cast(timestamp_trunc(\n        cast(schedule_valid_until as timestamp),\n        week\n    ) as date) as timestamp) as schedule_ending_sunday,\n        -- Check if the start fo the schedule was from a schedule or timezone change for tracking downstream.\n        case when schedule_valid_from = timezone_valid_from\n            then 'timezone'\n            else 'schedule'\n            end as change_type\n    from final_schedule\n)\n\nselect * \nfrom final\n),  __dbt__cte__int_zendesk__schedule_holiday as (\n\n\nwith schedule as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`   \n\n), schedule_holiday as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday`  \n\n-- Converts holiday_start_date_at and holiday_end_date_at into daily timestamps and finds the week starts/ends using week_start.\n), schedule_holiday_ranges as (\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        cast(timestamp_trunc(\n        cast(holiday_start_date_at as timestamp),\n        day\n    ) as timestamp) as holiday_valid_from,\n        cast(timestamp_trunc(\n        cast(holiday_end_date_at as timestamp),\n        day\n    )  as timestamp) as holiday_valid_until,\n        cast(cast(timestamp_trunc(\n        cast(holiday_start_date_at as timestamp),\n        week\n    ) as date) as timestamp) as holiday_starting_sunday,\n        cast(cast(timestamp_trunc(\n        cast(\n\n        datetime_add(\n            cast( holiday_end_date_at as datetime),\n        interval 1 week\n        )\n\n as timestamp),\n        week\n    ) as date) as timestamp) as holiday_ending_sunday,\n        -- Since the spine is based on weeks, holidays that span multiple weeks need to be broken up in to weeks. First step is to find those holidays.\n        \n\n    datetime_diff(\n        cast(holiday_end_date_at as datetime),\n        cast(holiday_start_date_at as datetime),\n        week\n    )\n\n   + 1 as holiday_weeks_spanned\n    from schedule_holiday\n\n-- Creates a record for each week of multi-week holidays. Update valid_from and valid_until in the next cte.\n), expanded_holidays as (\n    select\n        schedule_holiday_ranges.*,\n        cast(week_numbers.generated_number as INT64) as holiday_week_number\n    from schedule_holiday_ranges\n    -- Generate a sequence of numbers from 0 to the max number of weeks spanned, assuming a holiday won't span more than 52 weeks\n    cross join (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n) as week_numbers\n    where schedule_holiday_ranges.holiday_weeks_spanned > 1\n    and week_numbers.generated_number <= schedule_holiday_ranges.holiday_weeks_spanned\n\n-- Define start and end times for each segment of a multi-week holiday.\n), split_multiweek_holidays as (\n\n    -- Business as usual for holidays that fall within a single week.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        holiday_weeks_spanned\n    from schedule_holiday_ranges\n    where holiday_weeks_spanned = 1\n\n    union all\n\n    -- Split holidays by week that span multiple weeks since the schedule spine is based on weeks.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_valid_from\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval (holiday_week_number - 1) * 7 day\n        )\n\n as timestamp)\n        end as holiday_valid_from,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_valid_until\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( \n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval holiday_week_number * 7 day\n        )\n\n as datetime),\n        interval -1 day\n        )\n\n as timestamp) -- saturday\n        end as holiday_valid_until,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_starting_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval (holiday_week_number - 1) * 7 day\n        )\n\n as timestamp)\n        end as holiday_starting_sunday,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_ending_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval holiday_week_number * 7 day\n        )\n\n as timestamp)\n        end as holiday_ending_sunday,\n        holiday_weeks_spanned\n    from expanded_holidays\n    where holiday_weeks_spanned > 1\n\n-- Create a record for each the holiday start and holiday end for each week to use downstream.\n), split_holidays as (\n    -- Creates a record that will be used for the time before a holiday\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_from as holiday_date,\n        '0_gap' as holiday_start_or_end\n    from split_multiweek_holidays\n\n    union all\n\n    -- Creates another record that will be used for the holiday itself\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_until as holiday_date,\n        '1_holiday' as holiday_start_or_end\n    from split_multiweek_holidays\n)\n\nselect *\nfrom split_holidays\n), schedule_timezones as (\n    select *\n    from __dbt__cte__int_zendesk__schedule_timezones  \n\n\n), schedule_holidays as (\n    select *\n    from __dbt__cte__int_zendesk__schedule_holiday  \n\n-- Joins the schedules with holidays, ensuring holidays fall within the valid schedule period.\n-- If there are no holidays, the columns are filled with null values.\n), join_holidays as (\n    select \n        schedule_timezones.source_relation,\n        schedule_timezones.schedule_id,\n        schedule_timezones.time_zone,\n        schedule_timezones.offset_minutes,\n        schedule_timezones.start_time_utc,\n        schedule_timezones.end_time_utc,\n        schedule_timezones.schedule_name,\n        schedule_timezones.schedule_valid_from,\n        schedule_timezones.schedule_valid_until,\n        schedule_timezones.schedule_starting_sunday,\n        schedule_timezones.schedule_ending_sunday,\n        schedule_timezones.change_type,\n        schedule_holidays.holiday_date,\n        schedule_holidays.holiday_name,\n        schedule_holidays.holiday_valid_from,\n        schedule_holidays.holiday_valid_until,\n        schedule_holidays.holiday_starting_sunday,\n        schedule_holidays.holiday_ending_sunday,\n        schedule_holidays.holiday_start_or_end\n    from schedule_timezones\n    left join schedule_holidays\n        on schedule_holidays.schedule_id = schedule_timezones.schedule_id\n        and schedule_holidays.holiday_date >= schedule_timezones.schedule_valid_from\n        and schedule_holidays.holiday_date < schedule_timezones.schedule_valid_until\n        and schedule_timezones.source_relation = schedule_holidays.source_relation\n\n-- Find and count all holidays that fall within a schedule range.\n), valid_from_partition as(\n    select\n        join_holidays.*,\n        row_number() over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from order by holiday_date, holiday_start_or_end) as valid_from_index,\n        count(*) over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from) as max_valid_from_index\n    from join_holidays\n\n-- Label the partition start and add a row to account for the partition end if there are multiple valid periods.\n), add_partition_end_row as(\n    select\n        source_relation,\n        schedule_id,\n        time_zone,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n        schedule_starting_sunday,\n        schedule_ending_sunday,\n        change_type,\n        holiday_name,\n        holiday_date,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        case when valid_from_index = 1 and holiday_start_or_end is not null\n            then 'partition_start'\n            else holiday_start_or_end\n            end as holiday_start_or_end,\n        valid_from_index,\n        max_valid_from_index\n    from valid_from_partition\n    \n    union all\n\n    -- when max_valid_from_index > 1, then we want to duplicate the last row to end the partition.\n    select\n        source_relation,\n        schedule_id,\n        time_zone,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n        schedule_starting_sunday,\n        schedule_ending_sunday,\n        change_type,\n        holiday_name,\n        holiday_date,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        'partition_end' as holiday_start_or_end,\n        max_valid_from_index + 1 as valid_from_index,\n        max_valid_from_index\n    from valid_from_partition\n    where max_valid_from_index > 1\n    and valid_from_index = max_valid_from_index -- this finds the last rows to duplicate\n\n-- Adjusts and fills the valid from and valid until times for each partition, taking into account the partition start, gap, or holiday.\n), adjust_ranges as(\n    select\n        add_partition_end_row.*,\n        case\n            when holiday_start_or_end = 'partition_start'\n                then schedule_starting_sunday\n            when holiday_start_or_end = '0_gap'\n                then lag(holiday_ending_sunday) over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from order by valid_from_index)\n            when holiday_start_or_end = '1_holiday'\n                then holiday_starting_sunday\n            when holiday_start_or_end = 'partition_end'\n                then holiday_ending_sunday\n            else schedule_starting_sunday\n        end as valid_from,\n        case \n            when holiday_start_or_end = 'partition_start'\n                then holiday_starting_sunday\n            when holiday_start_or_end = '0_gap'\n                then lead(holiday_starting_sunday) over (partition by source_relation, schedule_id, start_time_utc, schedule_valid_from order by valid_from_index)\n            when holiday_start_or_end = '1_holiday'\n                then holiday_ending_sunday\n            when holiday_start_or_end = 'partition_end'\n                then schedule_ending_sunday\n            else schedule_ending_sunday\n        end as valid_until\n    from add_partition_end_row\n\n), holiday_weeks as(\n    select\n        source_relation,\n        schedule_id,\n        time_zone,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_name,\n        valid_from,\n        valid_until,\n        holiday_name,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        holiday_start_or_end,\n        valid_from_index,\n        case when holiday_start_or_end = '1_holiday'\n            then 'holiday'\n            else change_type\n            end as change_type\n    from adjust_ranges\n    -- filter out irrelevant records after adjusting the ranges\n    where not (valid_from >= valid_until and holiday_date is not null)\n\n-- Converts holiday valid_from and valid_until times into minutes from the start of the week, adjusting for timezones.\n), valid_minutes as(\n    select\n        holiday_weeks.*,\n\n        -- Calculate holiday_valid_from in minutes from week start\n        case when change_type = 'holiday' \n            then (\n\n    datetime_diff(\n        cast(holiday_valid_from as datetime),\n        cast(holiday_starting_sunday as datetime),\n        minute\n    )\n\n  \n                - offset_minutes) -- timezone adjustment\n            else null\n        end as holiday_valid_from_minutes_from_week_start,\n\n        -- Calculate holiday_valid_until in minutes from week start\n        case when change_type = 'holiday' \n            then (\n\n    datetime_diff(\n        cast(holiday_valid_until as datetime),\n        cast(holiday_starting_sunday as datetime),\n        minute\n    )\n\n  \n                + 24 * 60 -- add 1 day to set the upper bound of the holiday\n                - offset_minutes) -- timezone adjustment\n            else null\n        end as holiday_valid_until_minutes_from_week_start\n    from holiday_weeks\n\n-- Identifies whether a schedule overlaps with a holiday by comparing start and end times with holiday minutes.\n), find_holidays as(\n    select \n        source_relation,\n        schedule_id,\n        valid_from,\n        valid_until,\n        start_time_utc,\n        end_time_utc,\n        change_type,\n        case \n            when start_time_utc < holiday_valid_until_minutes_from_week_start\n                and end_time_utc > holiday_valid_from_minutes_from_week_start\n                and change_type = 'holiday' \n            then holiday_name\n            else cast(null as string) \n        end as holiday_name,\n        count(*) over (partition by source_relation, schedule_id, valid_from, valid_until, start_time_utc, end_time_utc) as number_holidays_in_week\n    from valid_minutes\n\n-- Filter out records where holiday overlaps don't match, ensuring each schedule's holiday status is consistent.\n), filter_holidays as(\n    select \n        *,\n        cast(1 as INT64) as number_records_for_schedule_start_end\n    from find_holidays\n    where number_holidays_in_week = 1\n\n    union all\n\n    -- Count the number of records for each schedule start_time_utc and end_time_utc for filtering later.\n    select \n        distinct *,\n        cast(count(*) over (partition by source_relation, schedule_id, valid_from, valid_until, start_time_utc, end_time_utc, holiday_name) \n            as INT64) as number_records_for_schedule_start_end\n    from find_holidays\n    where number_holidays_in_week > 1\n\n), final as(\n    select \n        source_relation,\n        schedule_id,\n        valid_from,\n        valid_until,\n        start_time_utc,\n        end_time_utc,\n        change_type\n    from filter_holidays\n\n    -- This filter ensures that for each schedule, the count of holidays in a week matches the number \n    -- of distinct schedule records with the same start_time_utc and end_time_utc.\n    -- Rows where this count doesn't match indicate overlap with a holiday, so we filter out that record.\n    -- Additionally, schedule records that fall on a holiday are excluded by checking if holiday_name is null.\n    where number_holidays_in_week = number_records_for_schedule_start_end\n    and holiday_name is null\n\n \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__timezone_daylight", "sql": " __dbt__cte__int_zendesk__timezone_daylight as (\n\n\nwith timezone as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`\n\n), daylight_time as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time`\n\n), timezone_with_dt as (\n\n    select \n        timezone.*,\n        daylight_time.daylight_start_utc,\n        daylight_time.daylight_end_utc,\n        daylight_time.daylight_offset_minutes\n\n    from timezone \n    left join daylight_time \n        on timezone.time_zone = daylight_time.time_zone\n        and timezone.source_relation = daylight_time.source_relation\n\n), order_timezone_dt as (\n\n    select \n        *,\n        -- will be null for timezones without any daylight savings records (and the first entry)\n        -- we will coalesce the first entry date with .... the X years ago\n        lag(daylight_end_utc, 1) over (partition by source_relation, time_zone order by daylight_end_utc asc) as last_daylight_end_utc,\n        -- will be null for timezones without any daylight savings records (and the last entry)\n        -- we will coalesce the last entry date with the current date \n        lead(daylight_start_utc, 1) over (partition by source_relation, time_zone order by daylight_start_utc asc) as next_daylight_start_utc\n\n    from timezone_with_dt\n\n), split_timezones as (\n\n    -- standard (includes timezones without DT)\n    -- starts: when the last Daylight Savings ended\n    -- ends: when the next Daylight Savings starts\n    select \n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- last_daylight_end_utc is null for the first record of the time_zone's daylight time, or if the TZ doesn't use DT\n        coalesce(last_daylight_end_utc, cast('1970-01-01' as date)) as valid_from,\n\n        -- daylight_start_utc is null for timezones that don't use DT\n        coalesce(daylight_start_utc, cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date)) as valid_until\n\n    from order_timezone_dt\n\n    union all \n\n    -- DT (excludes timezones without it)\n    -- starts: when this Daylight Savings started\n    -- ends: when this Daylight Savings ends\n    select \n        source_relation,\n        time_zone,\n        -- Pacific Time is -8h during standard time and -7h during DT\n        standard_offset_minutes + daylight_offset_minutes as offset_minutes,\n        daylight_start_utc as valid_from,\n        daylight_end_utc as valid_until\n\n    from order_timezone_dt\n    where daylight_offset_minutes is not null\n\n    union all\n\n    select\n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- Get the latest daylight_end_utc time and set that as the valid_from\n        max(daylight_end_utc) as valid_from,\n\n        -- If the latest_daylight_end_time_utc is less than todays timestamp, that means DST has ended. Therefore, we will make the valid_until in the future.\n        cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date) as valid_until\n\n    from order_timezone_dt\n    group by 1, 2, 3\n    -- We only want to apply this logic to time_zone's that had daylight saving time and it ended at a point. For example, Hong Kong ended DST in 1979.\n    having cast(max(daylight_end_utc) as date) < cast(current_timestamp() as date)\n\n), final as (\n    select\n        source_relation,\n        lower(time_zone) as time_zone,\n        offset_minutes,\n        cast(valid_from as timestamp) as valid_from,\n        cast(valid_until as timestamp) as valid_until\n    from split_timezones\n)\n\nselect * \nfrom final\n)"}, {"id": "model.zendesk.int_zendesk__schedule_timezones", "sql": " __dbt__cte__int_zendesk__schedule_timezones as (\n\n\nwith split_timezones as (\n    select *\n    from __dbt__cte__int_zendesk__timezone_daylight  \n\n), schedule as (\n    select \n        *,\n        max(created_at) over (partition by source_relation, schedule_id) as max_created_at\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`   \n\n\n), schedule_history as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_history`  \n\n-- Select the most recent timezone associated with each schedule based on \n-- the max_created_at timestamp. Historical timezone changes are not yet tracked.\n), schedule_id_timezone as (\n    select\n        distinct schedule_id, source_relation,\n        lower(time_zone) as time_zone,\n        schedule_name\n    from schedule\n    where created_at = max_created_at\n\n-- Combine historical schedules with the most recent timezone data. Filter \n-- out records where the timezone is missing, indicating the schedule has \n-- been deleted.\n), schedule_history_timezones as (\n    select\n        schedule_history.source_relation,\n        schedule_history.schedule_id,\n        schedule_history.schedule_id_index,\n        schedule_history.start_time,\n        schedule_history.end_time,\n        schedule_history.valid_from,\n        schedule_history.valid_until,\n        lower(schedule_id_timezone.time_zone) as time_zone,\n        schedule_id_timezone.schedule_name\n    from schedule_history\n    left join schedule_id_timezone\n        on schedule_id_timezone.schedule_id = schedule_history.schedule_id\n        and schedule_id_timezone.source_relation = schedule_history.source_relation\n    -- We have to filter these records out since time math requires timezone\n    -- revisit later if this becomes a bigger issue\n    where time_zone is not null\n\n-- Combine current schedules with historical schedules. Adjust the valid_from and valid_until dates accordingly.\n), union_schedule_histories as (\n    select\n        source_relation,\n        schedule_id,\n        0 as schedule_id_index, -- set the index as 0 for the current schedule\n        created_at,\n        start_time,\n        end_time,\n        lower(time_zone) as time_zone,\n        schedule_name,\n        cast(null as date) as valid_from, -- created_at is when the schedule was first ever created, so we'll fill this value later\n        cast(\n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 7 day\n        )\n\n as date) as valid_until,\n        False as is_historical\n    from schedule\n\n    union all\n\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        cast(null as timestamp) as created_at,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        cast(valid_from as date) as valid_from,\n        cast(valid_until as date) as valid_until,\n        True as is_historical\n    from schedule_history_timezones\n\n-- Set the schedule_valid_from for current schedules based on the most recent historical row.\n-- This allows the current schedule to pick up where the historical schedule left off.\n), fill_current_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        coalesce(case\n            when schedule_id_index = 0\n            -- get max valid_until from historical rows in the same schedule\n            then max(case when schedule_id_index > 0 then valid_until end) \n                over (partition by source_relation, schedule_id)\n            else valid_from\n            end,\n            cast(created_at as date))\n        as schedule_valid_from,\n        valid_until as schedule_valid_until\n    from union_schedule_histories\n\n-- Detect adjacent time periods by lagging the schedule_valid_until value \n-- to identify effectively unchanged schedules.\n), lag_valid_until as (\n    select \n        fill_current_schedule.*,\n        lag(schedule_valid_until) over (partition by source_relation, schedule_id, start_time, end_time \n            order by schedule_valid_from, schedule_valid_until) as previous_valid_until\n    from fill_current_schedule\n\n-- Identify distinct schedule groupings based on schedule_id, start_time, and end_time.\n-- Consolidate only adjacent schedules; if a schedule changes and later reverts to its original time, \n-- we want to maintain the intermediate schedule change.\n), find_actual_changes as (\n    select \n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n\n    -- The group_id increments only when there is a gap between the previous schedule's \n    -- valid_until and the current schedule's valid_from, signaling the schedules are not adjacent.\n    -- Adjacent schedules with the same start_time and end_time are grouped together, \n    -- while non-adjacent schedules are treated as separate groups.\n        sum(case when previous_valid_until = schedule_valid_from then 0 else 1 end) -- find if this row is adjacent to the previous row\n            over (partition by source_relation, schedule_id, start_time, end_time \n                order by schedule_valid_from\n                rows between unbounded preceding and current row)\n        as group_id\n    from lag_valid_until\n\n-- Consolidate records into continuous periods by finding the minimum \n-- valid_from and maximum valid_until for each group.\n), consolidate_changes as (\n    select \n        source_relation,\n        schedule_id,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        group_id,\n        min(schedule_id_index) as schedule_id_index, --helps with tracking downstream.\n        min(schedule_valid_from) as schedule_valid_from,\n        max(schedule_valid_until) as schedule_valid_until\n    from find_actual_changes\n    group by 1,2,3,4,5,6,7\n\n-- For each schedule_id, reset the earliest schedule_valid_from date to 1970-01-01 for full schedule coverage.\n), reset_schedule_start as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        start_time,\n        end_time,\n        case \n            when schedule_valid_from = min(schedule_valid_from) over (partition by source_relation, schedule_id) then '1970-01-01'\n            else schedule_valid_from\n        end as schedule_valid_from,\n        schedule_valid_until\n    from consolidate_changes\n\n-- Adjust the schedule times to UTC by applying the timezone offset. Join all possible\n-- time_zone matches for each schedule. The erroneous timezones will be filtered next.\n), schedule_timezones as (\n    select \n        reset_schedule_start.source_relation,\n        reset_schedule_start.schedule_id,\n        reset_schedule_start.schedule_id_index,\n        reset_schedule_start.time_zone,\n        reset_schedule_start.schedule_name,\n        coalesce(split_timezones.offset_minutes, 0) as offset_minutes,\n        reset_schedule_start.start_time - coalesce(split_timezones.offset_minutes, 0) as start_time_utc,\n        reset_schedule_start.end_time - coalesce(split_timezones.offset_minutes, 0) as end_time_utc,\n        cast(reset_schedule_start.schedule_valid_from as timestamp) as schedule_valid_from,\n        cast(reset_schedule_start.schedule_valid_until as timestamp) as schedule_valid_until,\n        -- we'll use these to determine which schedule version to associate tickets with.\n        cast(timestamp_trunc(\n        cast(split_timezones.valid_from as timestamp),\n        day\n    ) as timestamp) as timezone_valid_from,\n        cast(timestamp_trunc(\n        cast(split_timezones.valid_until as timestamp),\n        day\n    )  as timestamp) as timezone_valid_until\n    from reset_schedule_start\n    left join split_timezones\n        on split_timezones.time_zone = reset_schedule_start.time_zone\n        and split_timezones.source_relation = reset_schedule_start.source_relation\n\n-- Assemble the final schedule-timezone relationship by determining the correct \n-- schedule_valid_from and schedule_valid_until based on overlapping periods \n-- between the schedule and timezone. \n), final_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        timezone_valid_from,\n        timezone_valid_until,\n    -- Be very careful if changing the order of these case whens--it does matter!\n        case\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then schedule_valid_from\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then timezone_valid_from\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_from\n        end as schedule_valid_from,\n        case\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then schedule_valid_until\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then timezone_valid_until\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_until\n        end as schedule_valid_until\n\n    from schedule_timezones\n\n    -- Filter records based on whether the schedule periods overlap with timezone periods. Capture\n    -- when a schedule start or end falls within a time zone, and also capture timezones that exist\n    -- entirely within the bounds of a schedule. \n    -- timezone that a schedule start falls within\n    where (schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until)\n    -- timezone that a schedule end falls within\n    or (schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until)\n    -- timezones that fall completely within the bounds of the schedule\n    or (timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until)\n\n\n\n), final as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_valid_from,\n        schedule_valid_until,\n        -- use zendesk.fivetran_week_start to ensure we truncate to Sunday\n        cast(cast(timestamp_trunc(\n        cast(schedule_valid_from as timestamp),\n        week\n    ) as date) as timestamp) as schedule_starting_sunday,\n        cast(cast(timestamp_trunc(\n        cast(schedule_valid_until as timestamp),\n        week\n    ) as date) as timestamp) as schedule_ending_sunday,\n        -- Check if the start fo the schedule was from a schedule or timezone change for tracking downstream.\n        case when schedule_valid_from = timezone_valid_from\n            then 'timezone'\n            else 'schedule'\n            end as change_type\n    from final_schedule\n)\n\nselect * \nfrom final\n)"}, {"id": "model.zendesk.int_zendesk__schedule_holiday", "sql": " __dbt__cte__int_zendesk__schedule_holiday as (\n\n\nwith schedule as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`   \n\n), schedule_holiday as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday`  \n\n-- Converts holiday_start_date_at and holiday_end_date_at into daily timestamps and finds the week starts/ends using week_start.\n), schedule_holiday_ranges as (\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        cast(timestamp_trunc(\n        cast(holiday_start_date_at as timestamp),\n        day\n    ) as timestamp) as holiday_valid_from,\n        cast(timestamp_trunc(\n        cast(holiday_end_date_at as timestamp),\n        day\n    )  as timestamp) as holiday_valid_until,\n        cast(cast(timestamp_trunc(\n        cast(holiday_start_date_at as timestamp),\n        week\n    ) as date) as timestamp) as holiday_starting_sunday,\n        cast(cast(timestamp_trunc(\n        cast(\n\n        datetime_add(\n            cast( holiday_end_date_at as datetime),\n        interval 1 week\n        )\n\n as timestamp),\n        week\n    ) as date) as timestamp) as holiday_ending_sunday,\n        -- Since the spine is based on weeks, holidays that span multiple weeks need to be broken up in to weeks. First step is to find those holidays.\n        \n\n    datetime_diff(\n        cast(holiday_end_date_at as datetime),\n        cast(holiday_start_date_at as datetime),\n        week\n    )\n\n   + 1 as holiday_weeks_spanned\n    from schedule_holiday\n\n-- Creates a record for each week of multi-week holidays. Update valid_from and valid_until in the next cte.\n), expanded_holidays as (\n    select\n        schedule_holiday_ranges.*,\n        cast(week_numbers.generated_number as INT64) as holiday_week_number\n    from schedule_holiday_ranges\n    -- Generate a sequence of numbers from 0 to the max number of weeks spanned, assuming a holiday won't span more than 52 weeks\n    cross join (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n) as week_numbers\n    where schedule_holiday_ranges.holiday_weeks_spanned > 1\n    and week_numbers.generated_number <= schedule_holiday_ranges.holiday_weeks_spanned\n\n-- Define start and end times for each segment of a multi-week holiday.\n), split_multiweek_holidays as (\n\n    -- Business as usual for holidays that fall within a single week.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        holiday_weeks_spanned\n    from schedule_holiday_ranges\n    where holiday_weeks_spanned = 1\n\n    union all\n\n    -- Split holidays by week that span multiple weeks since the schedule spine is based on weeks.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_valid_from\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval (holiday_week_number - 1) * 7 day\n        )\n\n as timestamp)\n        end as holiday_valid_from,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_valid_until\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( \n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval holiday_week_number * 7 day\n        )\n\n as datetime),\n        interval -1 day\n        )\n\n as timestamp) -- saturday\n        end as holiday_valid_until,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_starting_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval (holiday_week_number - 1) * 7 day\n        )\n\n as timestamp)\n        end as holiday_starting_sunday,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_ending_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval holiday_week_number * 7 day\n        )\n\n as timestamp)\n        end as holiday_ending_sunday,\n        holiday_weeks_spanned\n    from expanded_holidays\n    where holiday_weeks_spanned > 1\n\n-- Create a record for each the holiday start and holiday end for each week to use downstream.\n), split_holidays as (\n    -- Creates a record that will be used for the time before a holiday\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_from as holiday_date,\n        '0_gap' as holiday_start_or_end\n    from split_multiweek_holidays\n\n    union all\n\n    -- Creates another record that will be used for the holiday itself\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_until as holiday_date,\n        '1_holiday' as holiday_start_or_end\n    from split_multiweek_holidays\n)\n\nselect *\nfrom split_holidays\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_schedules": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_schedules", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__ticket_schedules.sql", "original_file_path": "models/intermediate/int_zendesk__ticket_schedules.sql", "unique_id": "model.zendesk.int_zendesk__ticket_schedules", "fqn": ["zendesk", "intermediate", "int_zendesk__ticket_schedules"], "alias": "int_zendesk__ticket_schedules", "checksum": {"name": "sha256", "checksum": "9c5d0761f6dd88deb2a5f37733cb14a781fbbece0e6711fae8130e9d42372b48"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990096.983285, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_schedules`", "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket as (\n  \n  select *\n  from {{ ref('stg_zendesk__ticket') }}\n\n), ticket_schedule as (\n \n  select *\n  from {{ ref('stg_zendesk__ticket_schedule') }}\n\n), schedule as (\n \n  select *\n  from {{ ref('stg_zendesk__schedule') }}\n\n), default_schedules as (\n-- Goal: understand the working schedules applied to tickets, so that we can then determine the applicable business hours/schedule.\n-- Your default schedule is used for all tickets, unless you set up a trigger to apply a specific schedule to specific tickets.\n\n-- This portion of the query creates ticket_schedules for these \"default\" schedules, as the ticket_schedule table only includes\n-- trigger schedules\n  select \n    schedule_id,\n    source_relation\n  from (\n    \n    select\n      schedule_id,\n      source_relation,\n      row_number() over (partition by source_relation order by created_at) = 1 as is_default_schedule\n    from schedule\n\n  ) as order_schedules\n  where is_default_schedule\n\n), default_schedule_events as (\n\n  select\n    ticket.ticket_id,\n    ticket.source_relation,\n    ticket.created_at as schedule_created_at,\n    default_schedules.schedule_id\n  from ticket\n  join default_schedules\n    on ticket.source_relation = default_schedules.source_relation\n  left join ticket_schedule as first_schedule\n    on first_schedule.ticket_id = ticket.ticket_id\n    and {{ fivetran_utils.timestamp_add('second', -5, 'first_schedule.created_at') }} <= ticket.created_at\n    and first_schedule.created_at >= ticket.created_at   \n    and first_schedule.source_relation = ticket.source_relation\n  where first_schedule.ticket_id is null\n\n), schedule_events as (\n  \n  select\n    *\n  from default_schedule_events\n  \n  union all\n  \n  select \n    ticket_id,\n    source_relation,\n    created_at as schedule_created_at,\n    schedule_id\n  from ticket_schedule\n\n), ticket_schedules as (\n  \n  select \n    ticket_id,\n    source_relation,\n    schedule_id,\n    schedule_created_at,\n    coalesce(lead(schedule_created_at) over (partition by source_relation, ticket_id order by schedule_created_at)\n            , {{ fivetran_utils.timestamp_add(\"hour\", 1000, \"\" ~ dbt.current_timestamp() ~ \"\") }} ) as schedule_invalidated_at\n  from schedule_events\n\n)\nselect\n  *\nfrom ticket_schedules", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "stg_zendesk__ticket_schedule", "package": null, "version": null}, {"name": "stg_zendesk__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.timestamp_add", "macro.dbt.current_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__ticket_schedule", "model.zendesk_source.stg_zendesk__schedule"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__ticket_schedules.sql", "compiled": true, "compiled_code": "\n\nwith ticket as (\n  \n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_schedule as (\n \n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_schedule`\n\n), schedule as (\n \n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`\n\n), default_schedules as (\n-- Goal: understand the working schedules applied to tickets, so that we can then determine the applicable business hours/schedule.\n-- Your default schedule is used for all tickets, unless you set up a trigger to apply a specific schedule to specific tickets.\n\n-- This portion of the query creates ticket_schedules for these \"default\" schedules, as the ticket_schedule table only includes\n-- trigger schedules\n  select \n    schedule_id,\n    source_relation\n  from (\n    \n    select\n      schedule_id,\n      source_relation,\n      row_number() over (partition by source_relation order by created_at) = 1 as is_default_schedule\n    from schedule\n\n  ) as order_schedules\n  where is_default_schedule\n\n), default_schedule_events as (\n\n  select\n    ticket.ticket_id,\n    ticket.source_relation,\n    ticket.created_at as schedule_created_at,\n    default_schedules.schedule_id\n  from ticket\n  join default_schedules\n    on ticket.source_relation = default_schedules.source_relation\n  left join ticket_schedule as first_schedule\n    on first_schedule.ticket_id = ticket.ticket_id\n    and \n\n        timestamp_add(first_schedule.created_at, interval  -5 second)\n\n <= ticket.created_at\n    and first_schedule.created_at >= ticket.created_at   \n    and first_schedule.source_relation = ticket.source_relation\n  where first_schedule.ticket_id is null\n\n), schedule_events as (\n  \n  select\n    *\n  from default_schedule_events\n  \n  union all\n  \n  select \n    ticket_id,\n    source_relation,\n    created_at as schedule_created_at,\n    schedule_id\n  from ticket_schedule\n\n), ticket_schedules as (\n  \n  select \n    ticket_id,\n    source_relation,\n    schedule_id,\n    schedule_created_at,\n    coalesce(lead(schedule_created_at) over (partition by source_relation, ticket_id order by schedule_created_at)\n            , \n\n        timestamp_add(current_timestamp(), interval  1000 hour)\n\n ) as schedule_invalidated_at\n  from schedule_events\n\n)\nselect\n  *\nfrom ticket_schedules", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__assignee_updates": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__assignee_updates", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__assignee_updates.sql", "original_file_path": "models/intermediate/int_zendesk__assignee_updates.sql", "unique_id": "model.zendesk.int_zendesk__assignee_updates", "fqn": ["zendesk", "intermediate", "int_zendesk__assignee_updates"], "alias": "int_zendesk__assignee_updates", "checksum": {"name": "sha256", "checksum": "2667a8eb61fd2c0c3a6bbcba5381b411eab40d4c1dbc99102d24e9216e9b183d"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.9879968, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__assignee_updates`", "raw_code": "with ticket_updates as (\n    select *\n    from {{ ref('int_zendesk__updates') }}\n\n), ticket as (\n    select *\n    from {{ ref('stg_zendesk__ticket') }}\n\n), ticket_requester as (\n    select\n        ticket.source_relation,\n        ticket.ticket_id,\n        ticket.assignee_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.assignee_id\n            and ticket_updates.source_relation = ticket.source_relation\n\n), final as (\n    select \n        source_relation,\n        ticket_id,\n        assignee_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2, 3\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}, {"name": "stg_zendesk__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__updates", "model.zendesk_source.stg_zendesk__ticket"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__assignee_updates.sql", "compiled": true, "compiled_code": "with ticket_updates as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), ticket as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_requester as (\n    select\n        ticket.source_relation,\n        ticket.ticket_id,\n        ticket.assignee_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.assignee_id\n            and ticket_updates.source_relation = ticket.source_relation\n\n), final as (\n    select \n        source_relation,\n        ticket_id,\n        assignee_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2, 3\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__comment_metrics": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__comment_metrics", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__comment_metrics.sql", "original_file_path": "models/intermediate/int_zendesk__comment_metrics.sql", "unique_id": "model.zendesk.int_zendesk__comment_metrics", "fqn": ["zendesk", "intermediate", "int_zendesk__comment_metrics"], "alias": "int_zendesk__comment_metrics", "checksum": {"name": "sha256", "checksum": "665ad943e92a163e3f6fa41e340506b22db667bd5bc55e5a5b3c7576beebeb91"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990096.989811, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__comment_metrics`", "raw_code": "with ticket_comments as (\n\n    select *\n    from {{ ref('int_zendesk__comments_enriched') }}\n),\n\ncomment_counts as (\n    select\n        source_relation,\n        ticket_id,\n        last_comment_added_at,\n        sum(case when commenter_role = 'internal_comment' and is_public = true\n            then 1\n            else 0\n                end) as count_public_agent_comments,\n        sum(case when commenter_role = 'internal_comment'\n            then 1\n            else 0\n                end) as count_agent_comments,\n        sum(case when commenter_role = 'external_comment'\n            then 1\n            else 0\n                end) as count_end_user_comments,\n        sum(case when is_public = true\n            then 1\n            else 0\n                end) as count_public_comments,\n        sum(case when is_public = false\n            then 1\n            else 0\n                end) as count_internal_comments,\n        count(*) as total_comments,\n        count(distinct case when commenter_role = 'internal_comment'\n            then user_id\n                end) as count_ticket_handoffs,\n        sum(case when commenter_role = 'internal_comment' and is_public = true and previous_commenter_role != 'first_comment'\n            then 1\n            else 0\n                end) as count_agent_replies\n    from ticket_comments\n\n    group by 1, 2, 3\n),\n\nfinal as (\n    select\n        *,\n        count_public_agent_comments = 1 as is_one_touch_resolution,\n        count_public_agent_comments = 2 as is_two_touch_resolution\n    from comment_counts\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__comments_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__comments_enriched"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__comment_metrics.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n), ticket_comments as (\n\n    select *\n    from __dbt__cte__int_zendesk__comments_enriched\n),\n\ncomment_counts as (\n    select\n        source_relation,\n        ticket_id,\n        last_comment_added_at,\n        sum(case when commenter_role = 'internal_comment' and is_public = true\n            then 1\n            else 0\n                end) as count_public_agent_comments,\n        sum(case when commenter_role = 'internal_comment'\n            then 1\n            else 0\n                end) as count_agent_comments,\n        sum(case when commenter_role = 'external_comment'\n            then 1\n            else 0\n                end) as count_end_user_comments,\n        sum(case when is_public = true\n            then 1\n            else 0\n                end) as count_public_comments,\n        sum(case when is_public = false\n            then 1\n            else 0\n                end) as count_internal_comments,\n        count(*) as total_comments,\n        count(distinct case when commenter_role = 'internal_comment'\n            then user_id\n                end) as count_ticket_handoffs,\n        sum(case when commenter_role = 'internal_comment' and is_public = true and previous_commenter_role != 'first_comment'\n            then 1\n            else 0\n                end) as count_agent_replies\n    from ticket_comments\n\n    group by 1, 2, 3\n),\n\nfinal as (\n    select\n        *,\n        count_public_agent_comments = 1 as is_one_touch_resolution,\n        count_public_agent_comments = 2 as is_two_touch_resolution\n    from comment_counts\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__comments_enriched", "sql": " __dbt__cte__int_zendesk__comments_enriched as (\n\n\nwith ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__user_role_history`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role in ('not set', 'end-user') then 'external_comment'\n            when commenter.is_internal_role then 'internal_comment'\n            else 'unknown'\n            end as commenter_role\n    \n    from ticket_comment\n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n        and commenter.source_relation = ticket_comment.source_relation\n\n    \n        and ticket_comment.valid_starting_at >= commenter.valid_starting_at\n        and ticket_comment.valid_starting_at < commenter.valid_ending_at \n    \n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by source_relation, ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by source_relation, ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__schedule_timezones": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__schedule_timezones", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__schedule_timezones.sql", "original_file_path": "models/intermediate/int_zendesk__schedule_timezones.sql", "unique_id": "model.zendesk.int_zendesk__schedule_timezones", "fqn": ["zendesk", "intermediate", "int_zendesk__schedule_timezones"], "alias": "int_zendesk__schedule_timezones", "checksum": {"name": "sha256", "checksum": "cdc3a547842d2e5535950ba1d48934cf50a404b129cbe71a1dbf62cf4e3f5c6d"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1751990096.99122, "relation_name": null, "raw_code": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith split_timezones as (\n    select *\n    from {{ ref('int_zendesk__timezone_daylight') }}  \n\n), schedule as (\n    select \n        *,\n        max(created_at) over (partition by source_relation, schedule_id) as max_created_at\n    from {{ var('schedule') }}   \n\n{% if var('using_schedule_histories', True) and var('using_audit_log', False) %}\n), schedule_history as (\n    select *\n    from {{ ref('int_zendesk__schedule_history') }}  \n\n-- Select the most recent timezone associated with each schedule based on \n-- the max_created_at timestamp. Historical timezone changes are not yet tracked.\n), schedule_id_timezone as (\n    select\n        distinct schedule_id, source_relation,\n        lower(time_zone) as time_zone,\n        schedule_name\n    from schedule\n    where created_at = max_created_at\n\n-- Combine historical schedules with the most recent timezone data. Filter \n-- out records where the timezone is missing, indicating the schedule has \n-- been deleted.\n), schedule_history_timezones as (\n    select\n        schedule_history.source_relation,\n        schedule_history.schedule_id,\n        schedule_history.schedule_id_index,\n        schedule_history.start_time,\n        schedule_history.end_time,\n        schedule_history.valid_from,\n        schedule_history.valid_until,\n        lower(schedule_id_timezone.time_zone) as time_zone,\n        schedule_id_timezone.schedule_name\n    from schedule_history\n    left join schedule_id_timezone\n        on schedule_id_timezone.schedule_id = schedule_history.schedule_id\n        and schedule_id_timezone.source_relation = schedule_history.source_relation\n    -- We have to filter these records out since time math requires timezone\n    -- revisit later if this becomes a bigger issue\n    where time_zone is not null\n\n-- Combine current schedules with historical schedules. Adjust the valid_from and valid_until dates accordingly.\n), union_schedule_histories as (\n    select\n        source_relation,\n        schedule_id,\n        0 as schedule_id_index, -- set the index as 0 for the current schedule\n        created_at,\n        start_time,\n        end_time,\n        lower(time_zone) as time_zone,\n        schedule_name,\n        cast(null as date) as valid_from, -- created_at is when the schedule was first ever created, so we'll fill this value later\n        cast({{ dbt.dateadd('day', 7, dbt.current_timestamp()) }} as date) as valid_until,\n        False as is_historical\n    from schedule\n\n    union all\n\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        cast(null as {{ dbt.type_timestamp() }}) as created_at,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        cast(valid_from as date) as valid_from,\n        cast(valid_until as date) as valid_until,\n        True as is_historical\n    from schedule_history_timezones\n\n-- Set the schedule_valid_from for current schedules based on the most recent historical row.\n-- This allows the current schedule to pick up where the historical schedule left off.\n), fill_current_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        coalesce(case\n            when schedule_id_index = 0\n            -- get max valid_until from historical rows in the same schedule\n            then max(case when schedule_id_index > 0 then valid_until end) \n                over (partition by source_relation, schedule_id)\n            else valid_from\n            end,\n            cast(created_at as date))\n        as schedule_valid_from,\n        valid_until as schedule_valid_until\n    from union_schedule_histories\n\n-- Detect adjacent time periods by lagging the schedule_valid_until value \n-- to identify effectively unchanged schedules.\n), lag_valid_until as (\n    select \n        fill_current_schedule.*,\n        lag(schedule_valid_until) over (partition by source_relation, schedule_id, start_time, end_time \n            order by schedule_valid_from, schedule_valid_until) as previous_valid_until\n    from fill_current_schedule\n\n-- Identify distinct schedule groupings based on schedule_id, start_time, and end_time.\n-- Consolidate only adjacent schedules; if a schedule changes and later reverts to its original time, \n-- we want to maintain the intermediate schedule change.\n), find_actual_changes as (\n    select \n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n\n    -- The group_id increments only when there is a gap between the previous schedule's \n    -- valid_until and the current schedule's valid_from, signaling the schedules are not adjacent.\n    -- Adjacent schedules with the same start_time and end_time are grouped together, \n    -- while non-adjacent schedules are treated as separate groups.\n        sum(case when previous_valid_until = schedule_valid_from then 0 else 1 end) -- find if this row is adjacent to the previous row\n            over (partition by source_relation, schedule_id, start_time, end_time \n                order by schedule_valid_from\n                rows between unbounded preceding and current row)\n        as group_id\n    from lag_valid_until\n\n-- Consolidate records into continuous periods by finding the minimum \n-- valid_from and maximum valid_until for each group.\n), consolidate_changes as (\n    select \n        source_relation,\n        schedule_id,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        group_id,\n        min(schedule_id_index) as schedule_id_index, --helps with tracking downstream.\n        min(schedule_valid_from) as schedule_valid_from,\n        max(schedule_valid_until) as schedule_valid_until\n    from find_actual_changes\n    {{ dbt_utils.group_by(7) }}\n\n-- For each schedule_id, reset the earliest schedule_valid_from date to 1970-01-01 for full schedule coverage.\n), reset_schedule_start as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        start_time,\n        end_time,\n        case \n            when schedule_valid_from = min(schedule_valid_from) over (partition by source_relation, schedule_id) then '1970-01-01'\n            else schedule_valid_from\n        end as schedule_valid_from,\n        schedule_valid_until\n    from consolidate_changes\n\n-- Adjust the schedule times to UTC by applying the timezone offset. Join all possible\n-- time_zone matches for each schedule. The erroneous timezones will be filtered next.\n), schedule_timezones as (\n    select \n        reset_schedule_start.source_relation,\n        reset_schedule_start.schedule_id,\n        reset_schedule_start.schedule_id_index,\n        reset_schedule_start.time_zone,\n        reset_schedule_start.schedule_name,\n        coalesce(split_timezones.offset_minutes, 0) as offset_minutes,\n        reset_schedule_start.start_time - coalesce(split_timezones.offset_minutes, 0) as start_time_utc,\n        reset_schedule_start.end_time - coalesce(split_timezones.offset_minutes, 0) as end_time_utc,\n        cast(reset_schedule_start.schedule_valid_from as {{ dbt.type_timestamp() }}) as schedule_valid_from,\n        cast(reset_schedule_start.schedule_valid_until as {{ dbt.type_timestamp() }}) as schedule_valid_until,\n        -- we'll use these to determine which schedule version to associate tickets with.\n        cast({{ dbt.date_trunc('day', 'split_timezones.valid_from') }} as {{ dbt.type_timestamp() }}) as timezone_valid_from,\n        cast({{ dbt.date_trunc('day', 'split_timezones.valid_until') }}  as {{ dbt.type_timestamp() }}) as timezone_valid_until\n    from reset_schedule_start\n    left join split_timezones\n        on split_timezones.time_zone = reset_schedule_start.time_zone\n        and split_timezones.source_relation = reset_schedule_start.source_relation\n\n-- Assemble the final schedule-timezone relationship by determining the correct \n-- schedule_valid_from and schedule_valid_until based on overlapping periods \n-- between the schedule and timezone. \n), final_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        timezone_valid_from,\n        timezone_valid_until,\n    -- Be very careful if changing the order of these case whens--it does matter!\n        case\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then schedule_valid_from\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then timezone_valid_from\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_from\n        end as schedule_valid_from,\n        case\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then schedule_valid_until\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then timezone_valid_until\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_until\n        end as schedule_valid_until\n\n    from schedule_timezones\n\n    -- Filter records based on whether the schedule periods overlap with timezone periods. Capture\n    -- when a schedule start or end falls within a time zone, and also capture timezones that exist\n    -- entirely within the bounds of a schedule. \n    -- timezone that a schedule start falls within\n    where (schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until)\n    -- timezone that a schedule end falls within\n    or (schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until)\n    -- timezones that fall completely within the bounds of the schedule\n    or (timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until)\n\n{% else %} -- when not using schedule histories\n), final_schedule as (\n    select \n        schedule.source_relation,\n        schedule.schedule_id,\n        0 as schedule_id_index,\n        lower(schedule.time_zone) as time_zone,\n        schedule.schedule_name,\n        coalesce(split_timezones.offset_minutes, 0) as offset_minutes,\n        schedule.start_time - coalesce(split_timezones.offset_minutes, 0) as start_time_utc,\n        schedule.end_time - coalesce(split_timezones.offset_minutes, 0) as end_time_utc,\n        cast({{ dbt.date_trunc('day', 'split_timezones.valid_from') }} as {{ dbt.type_timestamp() }}) as schedule_valid_from,\n        cast({{ dbt.date_trunc('day', 'split_timezones.valid_until') }}  as {{ dbt.type_timestamp() }}) as schedule_valid_until,\n        cast({{ dbt.date_trunc('day', 'split_timezones.valid_from') }} as {{ dbt.type_timestamp() }}) as timezone_valid_from,\n        cast({{ dbt.date_trunc('day', 'split_timezones.valid_until') }}  as {{ dbt.type_timestamp() }}) as timezone_valid_until\n    from schedule\n    left join split_timezones\n        on split_timezones.time_zone = lower(schedule.time_zone)\n        and schedule.source_relation = split_timezones.source_relation\n{% endif %}\n\n), final as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_valid_from,\n        schedule_valid_until,\n        -- use zendesk.fivetran_week_start to ensure we truncate to Sunday\n        cast({{ zendesk.fivetran_week_start('schedule_valid_from') }} as {{ dbt.type_timestamp() }}) as schedule_starting_sunday,\n        cast({{ zendesk.fivetran_week_start('schedule_valid_until') }} as {{ dbt.type_timestamp() }}) as schedule_ending_sunday,\n        -- Check if the start fo the schedule was from a schedule or timezone change for tracking downstream.\n        case when schedule_valid_from = timezone_valid_from\n            then 'timezone'\n            else 'schedule'\n            end as change_type\n    from final_schedule\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__timezone_daylight", "package": null, "version": null}, {"name": "stg_zendesk__schedule", "package": null, "version": null}, {"name": "int_zendesk__schedule_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.dateadd", "macro.dbt.type_timestamp", "macro.dbt_utils.group_by", "macro.dbt.date_trunc", "macro.zendesk.fivetran_week_start"], "nodes": ["model.zendesk.int_zendesk__timezone_daylight", "model.zendesk_source.stg_zendesk__schedule", "model.zendesk.int_zendesk__schedule_history"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__schedule_timezones.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_zendesk__timezone_daylight as (\n\n\nwith timezone as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`\n\n), daylight_time as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time`\n\n), timezone_with_dt as (\n\n    select \n        timezone.*,\n        daylight_time.daylight_start_utc,\n        daylight_time.daylight_end_utc,\n        daylight_time.daylight_offset_minutes\n\n    from timezone \n    left join daylight_time \n        on timezone.time_zone = daylight_time.time_zone\n        and timezone.source_relation = daylight_time.source_relation\n\n), order_timezone_dt as (\n\n    select \n        *,\n        -- will be null for timezones without any daylight savings records (and the first entry)\n        -- we will coalesce the first entry date with .... the X years ago\n        lag(daylight_end_utc, 1) over (partition by source_relation, time_zone order by daylight_end_utc asc) as last_daylight_end_utc,\n        -- will be null for timezones without any daylight savings records (and the last entry)\n        -- we will coalesce the last entry date with the current date \n        lead(daylight_start_utc, 1) over (partition by source_relation, time_zone order by daylight_start_utc asc) as next_daylight_start_utc\n\n    from timezone_with_dt\n\n), split_timezones as (\n\n    -- standard (includes timezones without DT)\n    -- starts: when the last Daylight Savings ended\n    -- ends: when the next Daylight Savings starts\n    select \n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- last_daylight_end_utc is null for the first record of the time_zone's daylight time, or if the TZ doesn't use DT\n        coalesce(last_daylight_end_utc, cast('1970-01-01' as date)) as valid_from,\n\n        -- daylight_start_utc is null for timezones that don't use DT\n        coalesce(daylight_start_utc, cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date)) as valid_until\n\n    from order_timezone_dt\n\n    union all \n\n    -- DT (excludes timezones without it)\n    -- starts: when this Daylight Savings started\n    -- ends: when this Daylight Savings ends\n    select \n        source_relation,\n        time_zone,\n        -- Pacific Time is -8h during standard time and -7h during DT\n        standard_offset_minutes + daylight_offset_minutes as offset_minutes,\n        daylight_start_utc as valid_from,\n        daylight_end_utc as valid_until\n\n    from order_timezone_dt\n    where daylight_offset_minutes is not null\n\n    union all\n\n    select\n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- Get the latest daylight_end_utc time and set that as the valid_from\n        max(daylight_end_utc) as valid_from,\n\n        -- If the latest_daylight_end_time_utc is less than todays timestamp, that means DST has ended. Therefore, we will make the valid_until in the future.\n        cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date) as valid_until\n\n    from order_timezone_dt\n    group by 1, 2, 3\n    -- We only want to apply this logic to time_zone's that had daylight saving time and it ended at a point. For example, Hong Kong ended DST in 1979.\n    having cast(max(daylight_end_utc) as date) < cast(current_timestamp() as date)\n\n), final as (\n    select\n        source_relation,\n        lower(time_zone) as time_zone,\n        offset_minutes,\n        cast(valid_from as timestamp) as valid_from,\n        cast(valid_until as timestamp) as valid_until\n    from split_timezones\n)\n\nselect * \nfrom final\n), split_timezones as (\n    select *\n    from __dbt__cte__int_zendesk__timezone_daylight  \n\n), schedule as (\n    select \n        *,\n        max(created_at) over (partition by source_relation, schedule_id) as max_created_at\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`   \n\n\n), schedule_history as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_history`  \n\n-- Select the most recent timezone associated with each schedule based on \n-- the max_created_at timestamp. Historical timezone changes are not yet tracked.\n), schedule_id_timezone as (\n    select\n        distinct schedule_id, source_relation,\n        lower(time_zone) as time_zone,\n        schedule_name\n    from schedule\n    where created_at = max_created_at\n\n-- Combine historical schedules with the most recent timezone data. Filter \n-- out records where the timezone is missing, indicating the schedule has \n-- been deleted.\n), schedule_history_timezones as (\n    select\n        schedule_history.source_relation,\n        schedule_history.schedule_id,\n        schedule_history.schedule_id_index,\n        schedule_history.start_time,\n        schedule_history.end_time,\n        schedule_history.valid_from,\n        schedule_history.valid_until,\n        lower(schedule_id_timezone.time_zone) as time_zone,\n        schedule_id_timezone.schedule_name\n    from schedule_history\n    left join schedule_id_timezone\n        on schedule_id_timezone.schedule_id = schedule_history.schedule_id\n        and schedule_id_timezone.source_relation = schedule_history.source_relation\n    -- We have to filter these records out since time math requires timezone\n    -- revisit later if this becomes a bigger issue\n    where time_zone is not null\n\n-- Combine current schedules with historical schedules. Adjust the valid_from and valid_until dates accordingly.\n), union_schedule_histories as (\n    select\n        source_relation,\n        schedule_id,\n        0 as schedule_id_index, -- set the index as 0 for the current schedule\n        created_at,\n        start_time,\n        end_time,\n        lower(time_zone) as time_zone,\n        schedule_name,\n        cast(null as date) as valid_from, -- created_at is when the schedule was first ever created, so we'll fill this value later\n        cast(\n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 7 day\n        )\n\n as date) as valid_until,\n        False as is_historical\n    from schedule\n\n    union all\n\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        cast(null as timestamp) as created_at,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        cast(valid_from as date) as valid_from,\n        cast(valid_until as date) as valid_until,\n        True as is_historical\n    from schedule_history_timezones\n\n-- Set the schedule_valid_from for current schedules based on the most recent historical row.\n-- This allows the current schedule to pick up where the historical schedule left off.\n), fill_current_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        coalesce(case\n            when schedule_id_index = 0\n            -- get max valid_until from historical rows in the same schedule\n            then max(case when schedule_id_index > 0 then valid_until end) \n                over (partition by source_relation, schedule_id)\n            else valid_from\n            end,\n            cast(created_at as date))\n        as schedule_valid_from,\n        valid_until as schedule_valid_until\n    from union_schedule_histories\n\n-- Detect adjacent time periods by lagging the schedule_valid_until value \n-- to identify effectively unchanged schedules.\n), lag_valid_until as (\n    select \n        fill_current_schedule.*,\n        lag(schedule_valid_until) over (partition by source_relation, schedule_id, start_time, end_time \n            order by schedule_valid_from, schedule_valid_until) as previous_valid_until\n    from fill_current_schedule\n\n-- Identify distinct schedule groupings based on schedule_id, start_time, and end_time.\n-- Consolidate only adjacent schedules; if a schedule changes and later reverts to its original time, \n-- we want to maintain the intermediate schedule change.\n), find_actual_changes as (\n    select \n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        schedule_valid_from,\n        schedule_valid_until,\n\n    -- The group_id increments only when there is a gap between the previous schedule's \n    -- valid_until and the current schedule's valid_from, signaling the schedules are not adjacent.\n    -- Adjacent schedules with the same start_time and end_time are grouped together, \n    -- while non-adjacent schedules are treated as separate groups.\n        sum(case when previous_valid_until = schedule_valid_from then 0 else 1 end) -- find if this row is adjacent to the previous row\n            over (partition by source_relation, schedule_id, start_time, end_time \n                order by schedule_valid_from\n                rows between unbounded preceding and current row)\n        as group_id\n    from lag_valid_until\n\n-- Consolidate records into continuous periods by finding the minimum \n-- valid_from and maximum valid_until for each group.\n), consolidate_changes as (\n    select \n        source_relation,\n        schedule_id,\n        start_time,\n        end_time,\n        time_zone,\n        schedule_name,\n        group_id,\n        min(schedule_id_index) as schedule_id_index, --helps with tracking downstream.\n        min(schedule_valid_from) as schedule_valid_from,\n        max(schedule_valid_until) as schedule_valid_until\n    from find_actual_changes\n    group by 1,2,3,4,5,6,7\n\n-- For each schedule_id, reset the earliest schedule_valid_from date to 1970-01-01 for full schedule coverage.\n), reset_schedule_start as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        start_time,\n        end_time,\n        case \n            when schedule_valid_from = min(schedule_valid_from) over (partition by source_relation, schedule_id) then '1970-01-01'\n            else schedule_valid_from\n        end as schedule_valid_from,\n        schedule_valid_until\n    from consolidate_changes\n\n-- Adjust the schedule times to UTC by applying the timezone offset. Join all possible\n-- time_zone matches for each schedule. The erroneous timezones will be filtered next.\n), schedule_timezones as (\n    select \n        reset_schedule_start.source_relation,\n        reset_schedule_start.schedule_id,\n        reset_schedule_start.schedule_id_index,\n        reset_schedule_start.time_zone,\n        reset_schedule_start.schedule_name,\n        coalesce(split_timezones.offset_minutes, 0) as offset_minutes,\n        reset_schedule_start.start_time - coalesce(split_timezones.offset_minutes, 0) as start_time_utc,\n        reset_schedule_start.end_time - coalesce(split_timezones.offset_minutes, 0) as end_time_utc,\n        cast(reset_schedule_start.schedule_valid_from as timestamp) as schedule_valid_from,\n        cast(reset_schedule_start.schedule_valid_until as timestamp) as schedule_valid_until,\n        -- we'll use these to determine which schedule version to associate tickets with.\n        cast(timestamp_trunc(\n        cast(split_timezones.valid_from as timestamp),\n        day\n    ) as timestamp) as timezone_valid_from,\n        cast(timestamp_trunc(\n        cast(split_timezones.valid_until as timestamp),\n        day\n    )  as timestamp) as timezone_valid_until\n    from reset_schedule_start\n    left join split_timezones\n        on split_timezones.time_zone = reset_schedule_start.time_zone\n        and split_timezones.source_relation = reset_schedule_start.source_relation\n\n-- Assemble the final schedule-timezone relationship by determining the correct \n-- schedule_valid_from and schedule_valid_until based on overlapping periods \n-- between the schedule and timezone. \n), final_schedule as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        timezone_valid_from,\n        timezone_valid_until,\n    -- Be very careful if changing the order of these case whens--it does matter!\n        case\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then schedule_valid_from\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then timezone_valid_from\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_from\n        end as schedule_valid_from,\n        case\n            -- timezone that a schedule end falls within\n            when schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until\n            then schedule_valid_until\n            -- timezone that a schedule start falls within\n            when schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until\n            then timezone_valid_until\n            -- timezones that fall completely within the bounds of the schedule\n            when timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until\n            then timezone_valid_until\n        end as schedule_valid_until\n\n    from schedule_timezones\n\n    -- Filter records based on whether the schedule periods overlap with timezone periods. Capture\n    -- when a schedule start or end falls within a time zone, and also capture timezones that exist\n    -- entirely within the bounds of a schedule. \n    -- timezone that a schedule start falls within\n    where (schedule_valid_from >= timezone_valid_from and schedule_valid_from < timezone_valid_until)\n    -- timezone that a schedule end falls within\n    or (schedule_valid_until >= timezone_valid_from and schedule_valid_until < timezone_valid_until)\n    -- timezones that fall completely within the bounds of the schedule\n    or (timezone_valid_from >= schedule_valid_from and timezone_valid_until < schedule_valid_until)\n\n\n\n), final as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        time_zone,\n        schedule_name,\n        offset_minutes,\n        start_time_utc,\n        end_time_utc,\n        schedule_valid_from,\n        schedule_valid_until,\n        -- use zendesk.fivetran_week_start to ensure we truncate to Sunday\n        cast(cast(timestamp_trunc(\n        cast(schedule_valid_from as timestamp),\n        week\n    ) as date) as timestamp) as schedule_starting_sunday,\n        cast(cast(timestamp_trunc(\n        cast(schedule_valid_until as timestamp),\n        week\n    ) as date) as timestamp) as schedule_ending_sunday,\n        -- Check if the start fo the schedule was from a schedule or timezone change for tracking downstream.\n        case when schedule_valid_from = timezone_valid_from\n            then 'timezone'\n            else 'schedule'\n            end as change_type\n    from final_schedule\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.zendesk.int_zendesk__timezone_daylight", "sql": " __dbt__cte__int_zendesk__timezone_daylight as (\n\n\nwith timezone as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`\n\n), daylight_time as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time`\n\n), timezone_with_dt as (\n\n    select \n        timezone.*,\n        daylight_time.daylight_start_utc,\n        daylight_time.daylight_end_utc,\n        daylight_time.daylight_offset_minutes\n\n    from timezone \n    left join daylight_time \n        on timezone.time_zone = daylight_time.time_zone\n        and timezone.source_relation = daylight_time.source_relation\n\n), order_timezone_dt as (\n\n    select \n        *,\n        -- will be null for timezones without any daylight savings records (and the first entry)\n        -- we will coalesce the first entry date with .... the X years ago\n        lag(daylight_end_utc, 1) over (partition by source_relation, time_zone order by daylight_end_utc asc) as last_daylight_end_utc,\n        -- will be null for timezones without any daylight savings records (and the last entry)\n        -- we will coalesce the last entry date with the current date \n        lead(daylight_start_utc, 1) over (partition by source_relation, time_zone order by daylight_start_utc asc) as next_daylight_start_utc\n\n    from timezone_with_dt\n\n), split_timezones as (\n\n    -- standard (includes timezones without DT)\n    -- starts: when the last Daylight Savings ended\n    -- ends: when the next Daylight Savings starts\n    select \n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- last_daylight_end_utc is null for the first record of the time_zone's daylight time, or if the TZ doesn't use DT\n        coalesce(last_daylight_end_utc, cast('1970-01-01' as date)) as valid_from,\n\n        -- daylight_start_utc is null for timezones that don't use DT\n        coalesce(daylight_start_utc, cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date)) as valid_until\n\n    from order_timezone_dt\n\n    union all \n\n    -- DT (excludes timezones without it)\n    -- starts: when this Daylight Savings started\n    -- ends: when this Daylight Savings ends\n    select \n        source_relation,\n        time_zone,\n        -- Pacific Time is -8h during standard time and -7h during DT\n        standard_offset_minutes + daylight_offset_minutes as offset_minutes,\n        daylight_start_utc as valid_from,\n        daylight_end_utc as valid_until\n\n    from order_timezone_dt\n    where daylight_offset_minutes is not null\n\n    union all\n\n    select\n        source_relation,\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- Get the latest daylight_end_utc time and set that as the valid_from\n        max(daylight_end_utc) as valid_from,\n\n        -- If the latest_daylight_end_time_utc is less than todays timestamp, that means DST has ended. Therefore, we will make the valid_until in the future.\n        cast( \n\n        datetime_add(\n            cast( current_timestamp() as datetime),\n        interval 1 year\n        )\n\n as date) as valid_until\n\n    from order_timezone_dt\n    group by 1, 2, 3\n    -- We only want to apply this logic to time_zone's that had daylight saving time and it ended at a point. For example, Hong Kong ended DST in 1979.\n    having cast(max(daylight_end_utc) as date) < cast(current_timestamp() as date)\n\n), final as (\n    select\n        source_relation,\n        lower(time_zone) as time_zone,\n        offset_minutes,\n        cast(valid_from as timestamp) as valid_from,\n        cast(valid_until as timestamp) as valid_until\n    from split_timezones\n)\n\nselect * \nfrom final\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_historical_group": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_historical_group", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__ticket_historical_group.sql", "original_file_path": "models/intermediate/int_zendesk__ticket_historical_group.sql", "unique_id": "model.zendesk.int_zendesk__ticket_historical_group", "fqn": ["zendesk", "intermediate", "int_zendesk__ticket_historical_group"], "alias": "int_zendesk__ticket_historical_group", "checksum": {"name": "sha256", "checksum": "9987ade50027a4f99d3d2bbc96e74bd3e8427b7bc3afdc55cd5f21ad35fac44f"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.000708, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_group`", "raw_code": "with ticket_group_history as (\n\n    select *\n    from {{ ref('int_zendesk__updates') }}\n    where field_name = 'group_id'\n\n), group_breakdown as (\n    select\n        source_relation,\n        ticket_id,\n        valid_starting_at,\n        valid_ending_at,\n        value as group_id\n    from ticket_group_history\n\n), final as (\n    select\n        source_relation,\n        ticket_id,\n        count(group_id) as group_stations_count\n    from group_breakdown\n\n    group by 1, 2\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__updates"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__ticket_historical_group.sql", "compiled": true, "compiled_code": "with ticket_group_history as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name = 'group_id'\n\n), group_breakdown as (\n    select\n        source_relation,\n        ticket_id,\n        valid_starting_at,\n        valid_ending_at,\n        value as group_id\n    from ticket_group_history\n\n), final as (\n    select\n        source_relation,\n        ticket_id,\n        count(group_id) as group_stations_count\n    from group_breakdown\n\n    group by 1, 2\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__schedule_history": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__schedule_history", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__schedule_history.sql", "original_file_path": "models/intermediate/int_zendesk__schedule_history.sql", "unique_id": "model.zendesk.int_zendesk__schedule_history", "fqn": ["zendesk", "intermediate", "int_zendesk__schedule_history"], "alias": "int_zendesk__schedule_history", "checksum": {"name": "sha256", "checksum": "4c0332d16e245fde3e8c12b9061f6e28a1a41e6a354ede4815c9058115e6a0bd"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990097.0020869, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__schedule_history`", "raw_code": "{{ config(enabled=var('using_schedules', True) and var('using_schedule_histories', True) and var('using_audit_log', False)) }}\n\nwith audit_logs as (\n    select\n        source_relation,\n        cast(source_id as {{ dbt.type_string() }}) as schedule_id,\n        created_at,\n        lower(change_description) as change_description\n    from {{ var('audit_log') }}\n    where lower(change_description) like '%workweek changed from%'\n\n-- the formats for change_description vary, so it needs to be cleaned\n), audit_logs_enhanced as (\n    select \n        source_relation,\n        schedule_id,\n        rank() over (partition by schedule_id, source_relation order by created_at desc) as schedule_id_index,\n        created_at,\n        -- Clean up the change_description, sometimes has random html stuff in it\n        replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(change_description,\n            'workweek changed from', ''), \n            '&quot;', '\"'), \n            'amp;', ''), \n            '=&gt;', ':'), ':mon:', '\"mon\":'), ':tue:', '\"tue\":'), ':wed:', '\"wed\":'), ':thu:', '\"thu\":'), ':fri:', '\"fri\":'), ':sat:', '\"sat\":'), ':sun:', '\"sun\":')\n            as change_description_cleaned\n    from audit_logs\n\n), split_to_from as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        created_at,\n        cast(created_at as date) as valid_from,\n        -- each change_description has two parts: 1-from the old schedule 2-to the new schedule.\n        {{ dbt.split_part('change_description_cleaned', \"' to '\", 1) }} as schedule_change_from,\n        {{ dbt.split_part('change_description_cleaned', \"' to '\", 2) }} as schedule_change\n    from audit_logs_enhanced\n\n), find_same_day_changes as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        created_at,\n        valid_from,\n        schedule_change_from,\n        schedule_change,\n        row_number() over (\n            partition by source_relation, schedule_id, valid_from -- valid from is type date\n            -- ordering to get the latest change when there are multiple on one day\n            order by schedule_id_index, schedule_change_from -- use the length of schedule_change_from to tie break, which will deprioritize empty \"from\" schedules\n        ) as row_number\n    from split_to_from\n\n-- multiple changes can occur on one day, so we will keep only the latest change in a day.\n), consolidate_same_day_changes as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        created_at,\n        valid_from,\n        lead(valid_from) over (\n            partition by source_relation, schedule_id order by schedule_id_index desc) as valid_until,\n        schedule_change\n    from find_same_day_changes\n    where row_number = 1\n\n-- Creates a record for each day of the week for each schedule_change event.\n-- This is done by iterating over the days of the week, extracting the corresponding \n-- schedule data for each day, and unioning the results after each iteration.\n), split_days as (\n    {% set days_of_week = {'sun': 0, 'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5, 'sat': 6} %}\n    {% for day, day_number in days_of_week.items() %}\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        '{{ day }}' as day_of_week,\n        cast('{{ day_number }}' as {{ dbt.type_int() }}) as day_of_week_number,\n        {{ zendesk.extract_schedule_day('schedule_change', day) }} as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n-- A single day may contain multiple start and stop times, so we need to generate a separate record for each.\n-- The day_of_week_schedule is structured like a JSON string, requiring warehouse-specific logic to flatten it into individual records.\n{% if target.type == 'redshift' %}\n-- using PartiQL syntax to work with redshift's SUPER types, which requires an extra CTE\n), redshift_parse_schedule as (\n    -- Redshift requires another CTE for unnesting \n    select \n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        day_of_week,\n        day_of_week_number,\n        day_of_week_schedule,\n        json_parse('[' || replace(replace(day_of_week_schedule, ', ', ','), ',', '},{') || ']') as json_schedule\n\n    from split_days\n    where day_of_week_schedule != '{}' -- exclude when the day_of_week_schedule in empty. \n\n), unnested_schedules as (\n    select \n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        day_of_week,\n        day_of_week_number,\n        -- go back to strings\n        cast(day_of_week_schedule as {{ dbt.type_string() }}) as day_of_week_schedule,\n        {{ clean_schedule('JSON_SERIALIZE(unnested_schedule)') }} as cleaned_unnested_schedule\n    \n    from redshift_parse_schedule as schedules, schedules.json_schedule as unnested_schedule\n\n{% else %}\n), unnested_schedules as (\n    select\n        split_days.*,\n\n    {%- if target.type == 'bigquery' %}\n        {{ clean_schedule('unnested_schedule') }} as cleaned_unnested_schedule\n    from split_days\n    cross join unnest(json_extract_array('[' || replace(day_of_week_schedule, ',', '},{') || ']', '$')) as unnested_schedule\n\n    {%- elif target.type == 'snowflake' %}\n        unnested_schedule.key || ':' || unnested_schedule.value as cleaned_unnested_schedule\n    from split_days\n    cross join lateral flatten(input => parse_json(replace(replace(day_of_week_schedule, '\\}\\}', '\\}'), '\\{\\{', '\\{'))) as unnested_schedule\n\n    {%- elif target.type == 'postgres' %}\n        {{ clean_schedule('unnested_schedule::text') }} as cleaned_unnested_schedule\n    from split_days\n    cross join lateral jsonb_array_elements(('[' || replace(day_of_week_schedule, ',', '},{') || ']')::jsonb) as unnested_schedule\n\n    {%- elif target.type in ('databricks', 'spark') %}\n        {{ clean_schedule('unnested_schedule') }} as cleaned_unnested_schedule\n    from split_days\n    lateral view explode(from_json(concat('[', replace(day_of_week_schedule, ',', '},{'), ']'), 'array<string>')) as unnested_schedule\n\n    {% else %}\n        cast(null as {{ dbt.type_string() }}) as cleaned_unnested_schedule\n    from split_days\n    {%- endif %}\n\n{% endif %}\n\n-- Each cleaned_unnested_schedule will have the format hh:mm:hh:mm, so we can extract each time part. \n), split_times as (\n    select \n        unnested_schedules.*,\n        cast(nullif({{ dbt.split_part('cleaned_unnested_schedule', \"':'\", 1) }}, ' ') as {{ dbt.type_int() }}) as start_time_hh, \n        cast(nullif({{ dbt.split_part('cleaned_unnested_schedule', \"':'\", 2) }}, ' ') as {{ dbt.type_int() }}) as start_time_mm, \n        cast(nullif({{ dbt.split_part('cleaned_unnested_schedule', \"':'\", 3) }}, ' ') as {{ dbt.type_int() }}) as end_time_hh, \n        cast(nullif({{ dbt.split_part('cleaned_unnested_schedule', \"':'\", 4) }}, ' ') as {{ dbt.type_int() }}) as end_time_mm\n    from unnested_schedules\n\n-- Calculate the start_time and end_time as minutes from Sunday\n), calculate_start_end_times as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time_hh * 60 + start_time_mm + 24 * 60 * day_of_week_number as start_time,\n        end_time_hh * 60 + end_time_mm + 24 * 60 * day_of_week_number as end_time,\n        valid_from,\n        valid_until,\n        day_of_week,\n        day_of_week_number\n    from split_times\n)\n\nselect * \nfrom calculate_start_end_times", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__audit_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.split_part", "macro.dbt.type_int", "macro.zendesk.extract_schedule_day", "macro.zendesk.clean_schedule"], "nodes": ["model.zendesk_source.stg_zendesk__audit_log"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__schedule_history.sql", "compiled": true, "compiled_code": "\n\nwith audit_logs as (\n    select\n        source_relation,\n        cast(source_id as string) as schedule_id,\n        created_at,\n        lower(change_description) as change_description\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__audit_log`\n    where lower(change_description) like '%workweek changed from%'\n\n-- the formats for change_description vary, so it needs to be cleaned\n), audit_logs_enhanced as (\n    select \n        source_relation,\n        schedule_id,\n        rank() over (partition by schedule_id, source_relation order by created_at desc) as schedule_id_index,\n        created_at,\n        -- Clean up the change_description, sometimes has random html stuff in it\n        replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(change_description,\n            'workweek changed from', ''), \n            '&quot;', '\"'), \n            'amp;', ''), \n            '=&gt;', ':'), ':mon:', '\"mon\":'), ':tue:', '\"tue\":'), ':wed:', '\"wed\":'), ':thu:', '\"thu\":'), ':fri:', '\"fri\":'), ':sat:', '\"sat\":'), ':sun:', '\"sun\":')\n            as change_description_cleaned\n    from audit_logs\n\n), split_to_from as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        created_at,\n        cast(created_at as date) as valid_from,\n        -- each change_description has two parts: 1-from the old schedule 2-to the new schedule.\n        \n\n  \n    split(\n        change_description_cleaned,\n        ' to '\n        )[safe_offset(0)]\n  \n\n as schedule_change_from,\n        \n\n  \n    split(\n        change_description_cleaned,\n        ' to '\n        )[safe_offset(1)]\n  \n\n as schedule_change\n    from audit_logs_enhanced\n\n), find_same_day_changes as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        created_at,\n        valid_from,\n        schedule_change_from,\n        schedule_change,\n        row_number() over (\n            partition by source_relation, schedule_id, valid_from -- valid from is type date\n            -- ordering to get the latest change when there are multiple on one day\n            order by schedule_id_index, schedule_change_from -- use the length of schedule_change_from to tie break, which will deprioritize empty \"from\" schedules\n        ) as row_number\n    from split_to_from\n\n-- multiple changes can occur on one day, so we will keep only the latest change in a day.\n), consolidate_same_day_changes as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        created_at,\n        valid_from,\n        lead(valid_from) over (\n            partition by source_relation, schedule_id order by schedule_id_index desc) as valid_until,\n        schedule_change\n    from find_same_day_changes\n    where row_number = 1\n\n-- Creates a record for each day of the week for each schedule_change event.\n-- This is done by iterating over the days of the week, extracting the corresponding \n-- schedule data for each day, and unioning the results after each iteration.\n), split_days as (\n    \n    \n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        'sun' as day_of_week,\n        cast('0' as INT64) as day_of_week_number,\n        \n    \n    regexp_extract(schedule_change, '.*?sun.*?({.*?})' ) as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    union all\n    \n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        'mon' as day_of_week,\n        cast('1' as INT64) as day_of_week_number,\n        \n    \n    regexp_extract(schedule_change, '.*?mon.*?({.*?})' ) as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    union all\n    \n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        'tue' as day_of_week,\n        cast('2' as INT64) as day_of_week_number,\n        \n    \n    regexp_extract(schedule_change, '.*?tue.*?({.*?})' ) as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    union all\n    \n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        'wed' as day_of_week,\n        cast('3' as INT64) as day_of_week_number,\n        \n    \n    regexp_extract(schedule_change, '.*?wed.*?({.*?})' ) as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    union all\n    \n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        'thu' as day_of_week,\n        cast('4' as INT64) as day_of_week_number,\n        \n    \n    regexp_extract(schedule_change, '.*?thu.*?({.*?})' ) as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    union all\n    \n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        'fri' as day_of_week,\n        cast('5' as INT64) as day_of_week_number,\n        \n    \n    regexp_extract(schedule_change, '.*?fri.*?({.*?})' ) as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    union all\n    \n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        valid_from,\n        valid_until,\n        schedule_change,\n        'sat' as day_of_week,\n        cast('6' as INT64) as day_of_week_number,\n        \n    \n    regexp_extract(schedule_change, '.*?sat.*?({.*?})' ) as day_of_week_schedule -- Extracts the schedule data specific to the current day from the schedule_change field.\n    from consolidate_same_day_changes\n    -- Exclude records with a null valid_until, which indicates it is the current schedule. \n    -- We will to pull in the live schedule downstream, which is necessary when not using schedule histories.\n    where valid_until is not null\n\n    \n    \n\n-- A single day may contain multiple start and stop times, so we need to generate a separate record for each.\n-- The day_of_week_schedule is structured like a JSON string, requiring warehouse-specific logic to flatten it into individual records.\n\n), unnested_schedules as (\n    select\n        split_days.*,\n        replace(replace(replace(replace(cast(unnested_schedule as string), '{', ''), '}', ''), '\"', ''), ' ', '') as cleaned_unnested_schedule\n    from split_days\n    cross join unnest(json_extract_array('[' || replace(day_of_week_schedule, ',', '},{') || ']', '$')) as unnested_schedule\n\n\n\n-- Each cleaned_unnested_schedule will have the format hh:mm:hh:mm, so we can extract each time part. \n), split_times as (\n    select \n        unnested_schedules.*,\n        cast(nullif(\n\n  \n    split(\n        cleaned_unnested_schedule,\n        ':'\n        )[safe_offset(0)]\n  \n\n, ' ') as INT64) as start_time_hh, \n        cast(nullif(\n\n  \n    split(\n        cleaned_unnested_schedule,\n        ':'\n        )[safe_offset(1)]\n  \n\n, ' ') as INT64) as start_time_mm, \n        cast(nullif(\n\n  \n    split(\n        cleaned_unnested_schedule,\n        ':'\n        )[safe_offset(2)]\n  \n\n, ' ') as INT64) as end_time_hh, \n        cast(nullif(\n\n  \n    split(\n        cleaned_unnested_schedule,\n        ':'\n        )[safe_offset(3)]\n  \n\n, ' ') as INT64) as end_time_mm\n    from unnested_schedules\n\n-- Calculate the start_time and end_time as minutes from Sunday\n), calculate_start_end_times as (\n    select\n        source_relation,\n        schedule_id,\n        schedule_id_index,\n        start_time_hh * 60 + start_time_mm + 24 * 60 * day_of_week_number as start_time,\n        end_time_hh * 60 + end_time_mm + 24 * 60 * day_of_week_number as end_time,\n        valid_from,\n        valid_until,\n        day_of_week,\n        day_of_week_number\n    from split_times\n)\n\nselect * \nfrom calculate_start_end_times", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__schedule_holiday": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__schedule_holiday", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__schedule_holiday.sql", "original_file_path": "models/intermediate/int_zendesk__schedule_holiday.sql", "unique_id": "model.zendesk.int_zendesk__schedule_holiday", "fqn": ["zendesk", "intermediate", "int_zendesk__schedule_holiday"], "alias": "int_zendesk__schedule_holiday", "checksum": {"name": "sha256", "checksum": "3cba05f5ed807ebfb10a982d8ae05868df02c28d5772a7feb2b2a1bb2b9998d8"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1751990097.0184479, "relation_name": null, "raw_code": "{{ config(enabled=var('using_schedules', True) and var('using_holidays', True)) }}\n\nwith schedule as (\n    select *\n    from {{ var('schedule') }}   \n\n), schedule_holiday as (\n    select *\n    from {{ var('schedule_holiday') }}  \n\n-- Converts holiday_start_date_at and holiday_end_date_at into daily timestamps and finds the week starts/ends using week_start.\n), schedule_holiday_ranges as (\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        cast({{ dbt.date_trunc('day', 'holiday_start_date_at') }} as {{ dbt.type_timestamp() }}) as holiday_valid_from,\n        cast({{ dbt.date_trunc('day', 'holiday_end_date_at') }}  as {{ dbt.type_timestamp() }}) as holiday_valid_until,\n        cast({{ zendesk.fivetran_week_start('holiday_start_date_at') }} as {{ dbt.type_timestamp() }}) as holiday_starting_sunday,\n        cast({{ zendesk.fivetran_week_start(dbt.dateadd('week', 1, 'holiday_end_date_at')) }} as {{ dbt.type_timestamp() }}) as holiday_ending_sunday,\n        -- Since the spine is based on weeks, holidays that span multiple weeks need to be broken up in to weeks. First step is to find those holidays.\n        {{ dbt.datediff('holiday_start_date_at', 'holiday_end_date_at', 'week') }} + 1 as holiday_weeks_spanned\n    from schedule_holiday\n\n-- Creates a record for each week of multi-week holidays. Update valid_from and valid_until in the next cte.\n), expanded_holidays as (\n    select\n        schedule_holiday_ranges.*,\n        cast(week_numbers.generated_number as {{ dbt.type_int() }}) as holiday_week_number\n    from schedule_holiday_ranges\n    -- Generate a sequence of numbers from 0 to the max number of weeks spanned, assuming a holiday won't span more than 52 weeks\n    cross join ({{ dbt_utils.generate_series(upper_bound=52) }}) as week_numbers\n    where schedule_holiday_ranges.holiday_weeks_spanned > 1\n    and week_numbers.generated_number <= schedule_holiday_ranges.holiday_weeks_spanned\n\n-- Define start and end times for each segment of a multi-week holiday.\n), split_multiweek_holidays as (\n\n    -- Business as usual for holidays that fall within a single week.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        holiday_weeks_spanned\n    from schedule_holiday_ranges\n    where holiday_weeks_spanned = 1\n\n    union all\n\n    -- Split holidays by week that span multiple weeks since the schedule spine is based on weeks.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_valid_from\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast({{ dbt.dateadd('day', '(holiday_week_number - 1) * 7', 'holiday_starting_sunday') }} as {{ dbt.type_timestamp() }})\n        end as holiday_valid_from,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_valid_until\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast({{ dbt.dateadd('day', -1, dbt.dateadd('day', 'holiday_week_number * 7', 'holiday_starting_sunday')) }} as {{ dbt.type_timestamp() }}) -- saturday\n        end as holiday_valid_until,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_starting_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast({{ dbt.dateadd('day', '(holiday_week_number - 1) * 7', 'holiday_starting_sunday') }} as {{ dbt.type_timestamp() }})\n        end as holiday_starting_sunday,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_ending_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast({{ dbt.dateadd('day', 'holiday_week_number * 7', 'holiday_starting_sunday') }} as {{ dbt.type_timestamp() }})\n        end as holiday_ending_sunday,\n        holiday_weeks_spanned\n    from expanded_holidays\n    where holiday_weeks_spanned > 1\n\n-- Create a record for each the holiday start and holiday end for each week to use downstream.\n), split_holidays as (\n    -- Creates a record that will be used for the time before a holiday\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_from as holiday_date,\n        '0_gap' as holiday_start_or_end\n    from split_multiweek_holidays\n\n    union all\n\n    -- Creates another record that will be used for the holiday itself\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_until as holiday_date,\n        '1_holiday' as holiday_start_or_end\n    from split_multiweek_holidays\n)\n\nselect *\nfrom split_holidays", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__schedule", "package": null, "version": null}, {"name": "stg_zendesk__schedule_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.type_timestamp", "macro.zendesk.fivetran_week_start", "macro.dbt.dateadd", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt_utils.generate_series"], "nodes": ["model.zendesk_source.stg_zendesk__schedule", "model.zendesk_source.stg_zendesk__schedule_holiday"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__schedule_holiday.sql", "compiled": true, "compiled_code": "\n\nwith schedule as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`   \n\n), schedule_holiday as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday`  \n\n-- Converts holiday_start_date_at and holiday_end_date_at into daily timestamps and finds the week starts/ends using week_start.\n), schedule_holiday_ranges as (\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        cast(timestamp_trunc(\n        cast(holiday_start_date_at as timestamp),\n        day\n    ) as timestamp) as holiday_valid_from,\n        cast(timestamp_trunc(\n        cast(holiday_end_date_at as timestamp),\n        day\n    )  as timestamp) as holiday_valid_until,\n        cast(cast(timestamp_trunc(\n        cast(holiday_start_date_at as timestamp),\n        week\n    ) as date) as timestamp) as holiday_starting_sunday,\n        cast(cast(timestamp_trunc(\n        cast(\n\n        datetime_add(\n            cast( holiday_end_date_at as datetime),\n        interval 1 week\n        )\n\n as timestamp),\n        week\n    ) as date) as timestamp) as holiday_ending_sunday,\n        -- Since the spine is based on weeks, holidays that span multiple weeks need to be broken up in to weeks. First step is to find those holidays.\n        \n\n    datetime_diff(\n        cast(holiday_end_date_at as datetime),\n        cast(holiday_start_date_at as datetime),\n        week\n    )\n\n   + 1 as holiday_weeks_spanned\n    from schedule_holiday\n\n-- Creates a record for each week of multi-week holidays. Update valid_from and valid_until in the next cte.\n), expanded_holidays as (\n    select\n        schedule_holiday_ranges.*,\n        cast(week_numbers.generated_number as INT64) as holiday_week_number\n    from schedule_holiday_ranges\n    -- Generate a sequence of numbers from 0 to the max number of weeks spanned, assuming a holiday won't span more than 52 weeks\n    cross join (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 52\n    order by generated_number\n\n) as week_numbers\n    where schedule_holiday_ranges.holiday_weeks_spanned > 1\n    and week_numbers.generated_number <= schedule_holiday_ranges.holiday_weeks_spanned\n\n-- Define start and end times for each segment of a multi-week holiday.\n), split_multiweek_holidays as (\n\n    -- Business as usual for holidays that fall within a single week.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        holiday_valid_from,\n        holiday_valid_until,\n        holiday_starting_sunday,\n        holiday_ending_sunday,\n        holiday_weeks_spanned\n    from schedule_holiday_ranges\n    where holiday_weeks_spanned = 1\n\n    union all\n\n    -- Split holidays by week that span multiple weeks since the schedule spine is based on weeks.\n    select\n        source_relation,\n        holiday_name,\n        schedule_id,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_valid_from\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval (holiday_week_number - 1) * 7 day\n        )\n\n as timestamp)\n        end as holiday_valid_from,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_valid_until\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( \n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval holiday_week_number * 7 day\n        )\n\n as datetime),\n        interval -1 day\n        )\n\n as timestamp) -- saturday\n        end as holiday_valid_until,\n        case \n            when holiday_week_number = 1 -- first week in multiweek holiday\n            then holiday_starting_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval (holiday_week_number - 1) * 7 day\n        )\n\n as timestamp)\n        end as holiday_starting_sunday,\n        case \n            when holiday_week_number = holiday_weeks_spanned -- last week in multiweek holiday\n            then holiday_ending_sunday\n            -- We have to use days in case warehouse does not truncate to Sunday.\n            else cast(\n\n        datetime_add(\n            cast( holiday_starting_sunday as datetime),\n        interval holiday_week_number * 7 day\n        )\n\n as timestamp)\n        end as holiday_ending_sunday,\n        holiday_weeks_spanned\n    from expanded_holidays\n    where holiday_weeks_spanned > 1\n\n-- Create a record for each the holiday start and holiday end for each week to use downstream.\n), split_holidays as (\n    -- Creates a record that will be used for the time before a holiday\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_from as holiday_date,\n        '0_gap' as holiday_start_or_end\n    from split_multiweek_holidays\n\n    union all\n\n    -- Creates another record that will be used for the holiday itself\n    select\n        split_multiweek_holidays.*,\n        holiday_valid_until as holiday_date,\n        '1_holiday' as holiday_start_or_end\n    from split_multiweek_holidays\n)\n\nselect *\nfrom split_holidays", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__requester_updates": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__requester_updates", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__requester_updates.sql", "original_file_path": "models/intermediate/int_zendesk__requester_updates.sql", "unique_id": "model.zendesk.int_zendesk__requester_updates", "fqn": ["zendesk", "intermediate", "int_zendesk__requester_updates"], "alias": "int_zendesk__requester_updates", "checksum": {"name": "sha256", "checksum": "b6219f3f0cb3b17f1c6fdef4937703790a02fe5bbbe892f783e11df0b34bd6f3"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.02823, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__requester_updates`", "raw_code": "with ticket_updates as (\n    select *\n    from {{ ref('int_zendesk__updates') }}\n\n), ticket as (\n    select *\n    from {{ ref('stg_zendesk__ticket') }}\n\n), ticket_requester as (\n    select\n        ticket.source_relation,\n        ticket.ticket_id,\n        ticket.requester_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.requester_id\n            and ticket_updates.source_relation = ticket.source_relation\n\n), final as (\n    select \n        source_relation,\n        ticket_id,\n        requester_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2, 3\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}, {"name": "stg_zendesk__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.int_zendesk__updates", "model.zendesk_source.stg_zendesk__ticket"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__requester_updates.sql", "compiled": true, "compiled_code": "with ticket_updates as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n\n), ticket as (\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_requester as (\n    select\n        ticket.source_relation,\n        ticket.ticket_id,\n        ticket.requester_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.requester_id\n            and ticket_updates.source_relation = ticket.source_relation\n\n), final as (\n    select \n        source_relation,\n        ticket_id,\n        requester_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2, 3\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_historical_satisfaction": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_historical_satisfaction", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__ticket_historical_satisfaction.sql", "original_file_path": "models/intermediate/int_zendesk__ticket_historical_satisfaction.sql", "unique_id": "model.zendesk.int_zendesk__ticket_historical_satisfaction", "fqn": ["zendesk", "intermediate", "int_zendesk__ticket_historical_satisfaction"], "alias": "int_zendesk__ticket_historical_satisfaction", "checksum": {"name": "sha256", "checksum": "a866c5147b1b29e168fbccb6ef695cabf3249bf0ed614536b04c7b2c3edd8b1d"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.029768, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_historical_satisfaction`", "raw_code": "with satisfaction_updates as (\n\n    select *\n    from {{ ref('int_zendesk__updates') }}\n    where field_name in ('satisfaction_score', 'satisfaction_comment', 'satisfaction_reason_code') \n\n), latest_reason as (\n    select\n        source_relation,\n        ticket_id,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_reason\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_reason_code'\n\n), latest_comment as (\n    select\n        source_relation,\n        ticket_id,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_comment\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_comment'\n\n), first_and_latest_score as (\n    select\n        source_relation,\n        ticket_id,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_satisfaction_score,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_score\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_score' and value != 'offered'\n\n), satisfaction_scores as (\n    select\n        source_relation,\n        ticket_id,\n        count(value) over (partition by source_relation, ticket_id) as count_satisfaction_scores,\n        case when lag(value) over (partition by source_relation, ticket_id order by valid_starting_at desc) = 'good' and value = 'bad'\n            then 1\n            else 0\n                end as good_to_bad_score,\n        case when lag(value) over (partition by source_relation, ticket_id order by valid_starting_at desc) = 'bad' and value = 'good'\n            then 1\n            else 0\n                end as bad_to_good_score\n    from satisfaction_updates\n    where field_name = 'satisfaction_score'\n\n), score_group as (\n    select\n        source_relation, \n        ticket_id,\n        count_satisfaction_scores,\n        sum(good_to_bad_score) as total_good_to_bad_score,\n        sum(bad_to_good_score) as total_bad_to_good_score\n    from satisfaction_scores\n\n    group by 1, 2, 3\n\n), window_group as (\n    select\n        satisfaction_updates.source_relation,\n        satisfaction_updates.ticket_id,\n        latest_reason.latest_satisfaction_reason,\n        latest_comment.latest_satisfaction_comment,\n        first_and_latest_score.first_satisfaction_score,\n        first_and_latest_score.latest_satisfaction_score,\n        score_group.count_satisfaction_scores,\n        score_group.total_good_to_bad_score,\n        score_group.total_bad_to_good_score\n\n    from satisfaction_updates\n\n    left join latest_reason\n        on satisfaction_updates.ticket_id = latest_reason.ticket_id\n        and satisfaction_updates.source_relation = latest_reason.source_relation\n\n    left join latest_comment\n        on satisfaction_updates.ticket_id = latest_comment.ticket_id\n        and satisfaction_updates.source_relation = latest_comment.source_relation\n\n    left join first_and_latest_score\n        on satisfaction_updates.ticket_id = first_and_latest_score.ticket_id\n        and satisfaction_updates.source_relation = first_and_latest_score.source_relation\n\n    left join score_group\n        on satisfaction_updates.ticket_id = score_group.ticket_id\n        and satisfaction_updates.source_relation = score_group.source_relation\n\n    {{ dbt_utils.group_by(n=9) }}\n\n), final as (\n    select\n        source_relation,\n        ticket_id,\n        latest_satisfaction_reason,\n        latest_satisfaction_comment,\n        first_satisfaction_score,\n        latest_satisfaction_score,\n        case when count_satisfaction_scores > 0\n            then (count_satisfaction_scores - 1) --Subtracting one as the first score is always \"offered\".\n            else count_satisfaction_scores\n                end as count_satisfaction_scores,\n        case when total_good_to_bad_score > 0\n            then true\n            else false\n                end as is_good_to_bad_satisfaction_score,\n        case when total_bad_to_good_score > 0\n            then true\n            else false\n                end as is_bad_to_good_satisfaction_score\n    from window_group\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_zendesk__updates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.zendesk.int_zendesk__updates"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__ticket_historical_satisfaction.sql", "compiled": true, "compiled_code": "with satisfaction_updates as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__updates`\n    where field_name in ('satisfaction_score', 'satisfaction_comment', 'satisfaction_reason_code') \n\n), latest_reason as (\n    select\n        source_relation,\n        ticket_id,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_reason\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_reason_code'\n\n), latest_comment as (\n    select\n        source_relation,\n        ticket_id,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_comment\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_comment'\n\n), first_and_latest_score as (\n    select\n        source_relation,\n        ticket_id,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_satisfaction_score,\n        first_value(value) over (partition by source_relation, ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_score\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_score' and value != 'offered'\n\n), satisfaction_scores as (\n    select\n        source_relation,\n        ticket_id,\n        count(value) over (partition by source_relation, ticket_id) as count_satisfaction_scores,\n        case when lag(value) over (partition by source_relation, ticket_id order by valid_starting_at desc) = 'good' and value = 'bad'\n            then 1\n            else 0\n                end as good_to_bad_score,\n        case when lag(value) over (partition by source_relation, ticket_id order by valid_starting_at desc) = 'bad' and value = 'good'\n            then 1\n            else 0\n                end as bad_to_good_score\n    from satisfaction_updates\n    where field_name = 'satisfaction_score'\n\n), score_group as (\n    select\n        source_relation, \n        ticket_id,\n        count_satisfaction_scores,\n        sum(good_to_bad_score) as total_good_to_bad_score,\n        sum(bad_to_good_score) as total_bad_to_good_score\n    from satisfaction_scores\n\n    group by 1, 2, 3\n\n), window_group as (\n    select\n        satisfaction_updates.source_relation,\n        satisfaction_updates.ticket_id,\n        latest_reason.latest_satisfaction_reason,\n        latest_comment.latest_satisfaction_comment,\n        first_and_latest_score.first_satisfaction_score,\n        first_and_latest_score.latest_satisfaction_score,\n        score_group.count_satisfaction_scores,\n        score_group.total_good_to_bad_score,\n        score_group.total_bad_to_good_score\n\n    from satisfaction_updates\n\n    left join latest_reason\n        on satisfaction_updates.ticket_id = latest_reason.ticket_id\n        and satisfaction_updates.source_relation = latest_reason.source_relation\n\n    left join latest_comment\n        on satisfaction_updates.ticket_id = latest_comment.ticket_id\n        and satisfaction_updates.source_relation = latest_comment.source_relation\n\n    left join first_and_latest_score\n        on satisfaction_updates.ticket_id = first_and_latest_score.ticket_id\n        and satisfaction_updates.source_relation = first_and_latest_score.source_relation\n\n    left join score_group\n        on satisfaction_updates.ticket_id = score_group.ticket_id\n        and satisfaction_updates.source_relation = score_group.source_relation\n\n    group by 1,2,3,4,5,6,7,8,9\n\n), final as (\n    select\n        source_relation,\n        ticket_id,\n        latest_satisfaction_reason,\n        latest_satisfaction_comment,\n        first_satisfaction_score,\n        latest_satisfaction_score,\n        case when count_satisfaction_scores > 0\n            then (count_satisfaction_scores - 1) --Subtracting one as the first score is always \"offered\".\n            else count_satisfaction_scores\n                end as count_satisfaction_scores,\n        case when total_good_to_bad_score > 0\n            then true\n            else false\n                end as is_good_to_bad_satisfaction_score,\n        case when total_bad_to_good_score > 0\n            then true\n            else false\n                end as is_bad_to_good_satisfaction_score\n    from window_group\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__latest_ticket_form": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__latest_ticket_form", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__latest_ticket_form.sql", "original_file_path": "models/intermediate/int_zendesk__latest_ticket_form.sql", "unique_id": "model.zendesk.int_zendesk__latest_ticket_form", "fqn": ["zendesk", "intermediate", "int_zendesk__latest_ticket_form"], "alias": "int_zendesk__latest_ticket_form", "checksum": {"name": "sha256", "checksum": "cfb5bf97deaef1221206dd1a74ae8d08d480ec4ade23f4322684a7af5711a035"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990097.033834, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__latest_ticket_form`", "raw_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_ticket_form_history', True)) }}\n\nwith ticket_form_history as (\n  select *\n  from {{ ref('stg_zendesk__ticket_form_history') }}\n),\n\nlatest_ticket_form as (\n    select\n      *,\n      row_number() over(partition by ticket_form_id, source_relation order by updated_at desc) as latest_form_index\n    from ticket_form_history\n),\n\nfinal as (\n    select \n        source_relation,\n        ticket_form_id,\n        created_at,\n        updated_at,\n        display_name,\n        is_active,\n        name,\n        latest_form_index\n    from latest_ticket_form\n\n    where latest_form_index = 1\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_form_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zendesk_source.stg_zendesk__ticket_form_history"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__latest_ticket_form.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nwith ticket_form_history as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_form_history`\n),\n\nlatest_ticket_form as (\n    select\n      *,\n      row_number() over(partition by ticket_form_id, source_relation order by updated_at desc) as latest_form_index\n    from ticket_form_history\n),\n\nfinal as (\n    select \n        source_relation,\n        ticket_form_id,\n        created_at,\n        updated_at,\n        display_name,\n        is_active,\n        name,\n        latest_form_index\n    from latest_ticket_form\n\n    where latest_form_index = 1\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__ticket_aggregates": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__ticket_aggregates", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__ticket_aggregates.sql", "original_file_path": "models/intermediate/int_zendesk__ticket_aggregates.sql", "unique_id": "model.zendesk.int_zendesk__ticket_aggregates", "fqn": ["zendesk", "intermediate", "int_zendesk__ticket_aggregates"], "alias": "int_zendesk__ticket_aggregates", "checksum": {"name": "sha256", "checksum": "8c1aeaba35d5d3fb24df8cd84fff051c986cb0b24113307ee0301f1e16fa4db3"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.0375218, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__ticket_aggregates`", "raw_code": "with tickets as (\n  select *\n  from {{ ref('stg_zendesk__ticket') }}\n\n), ticket_tags as (\n\n  select *\n  from {{ ref('stg_zendesk__ticket_tag') }}\n\n--If you use using_brands this will be included, if not it will be ignored.\n{% if var('using_brands', True) %}\n), brands as (\n\n  select *\n  from {{ ref('stg_zendesk__brand') }}\n{% endif %}\n  \n), ticket_tag_aggregate as (\n  select\n    source_relation,\n    ticket_tags.ticket_id,\n    {{ fivetran_utils.string_agg( 'ticket_tags.tags', \"', '\" )}} as ticket_tags\n  from ticket_tags\n  group by 1, 2\n\n), final as (\n  select \n    tickets.*,\n    case when lower(tickets.type) = 'incident'\n      then true\n      else false\n        end as is_incident,\n    {% if var('using_brands', True) %}\n    brands.name as ticket_brand_name,\n    {% endif %}\n    ticket_tag_aggregate.ticket_tags\n  from tickets\n\n  left join ticket_tag_aggregate\n    on tickets.ticket_id = ticket_tag_aggregate.ticket_id \n    and tickets.source_relation = ticket_tag_aggregate.source_relation\n\n  {% if var('using_brands', True) %}\n  left join brands\n    on brands.brand_id = tickets.brand_id\n    and brands.source_relation = tickets.source_relation\n  {% endif %}    \n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "stg_zendesk__ticket_tag", "package": null, "version": null}, {"name": "stg_zendesk__brand", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__ticket_tag", "model.zendesk_source.stg_zendesk__brand"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__ticket_aggregates.sql", "compiled": true, "compiled_code": "with tickets as (\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n\n), ticket_tags as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_tag`\n\n--If you use using_brands this will be included, if not it will be ignored.\n\n), brands as (\n\n  select *\n  from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__brand`\n\n  \n), ticket_tag_aggregate as (\n  select\n    source_relation,\n    ticket_tags.ticket_id,\n    \n    string_agg(ticket_tags.tags, ', ')\n\n as ticket_tags\n  from ticket_tags\n  group by 1, 2\n\n), final as (\n  select \n    tickets.*,\n    case when lower(tickets.type) = 'incident'\n      then true\n      else false\n        end as is_incident,\n    \n    brands.name as ticket_brand_name,\n    \n    ticket_tag_aggregate.ticket_tags\n  from tickets\n\n  left join ticket_tag_aggregate\n    on tickets.ticket_id = ticket_tag_aggregate.ticket_id \n    and tickets.source_relation = ticket_tag_aggregate.source_relation\n\n  \n  left join brands\n    on brands.brand_id = tickets.brand_id\n    and brands.source_relation = tickets.source_relation\n      \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk.int_zendesk__organization_aggregates": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "int_zendesk__organization_aggregates", "resource_type": "model", "package_name": "zendesk", "path": "intermediate/int_zendesk__organization_aggregates.sql", "original_file_path": "models/intermediate/int_zendesk__organization_aggregates.sql", "unique_id": "model.zendesk.int_zendesk__organization_aggregates", "fqn": ["zendesk", "intermediate", "int_zendesk__organization_aggregates"], "alias": "int_zendesk__organization_aggregates", "checksum": {"name": "sha256", "checksum": "efcda13049c3bda7489558ce34dff4121a3fd329003d3811497992f91950127b"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1751990097.04251, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`int_zendesk__organization_aggregates`", "raw_code": "{{ config(enabled=var('using_organizations', True)) }}\n\nwith organizations as (\n    select * \n    from {{ ref('stg_zendesk__organization') }}\n\n--If you use organization tags, this will be included, if not it will be ignored.\n{% if var('using_organization_tags', True) %}\n), organization_tags as (\n    select * \n    from {{ ref('stg_zendesk__organization_tag') }}\n\n), tag_aggregates as (\n    select\n        organizations.organization_id,\n        organizations.source_relation,\n        {{ fivetran_utils.string_agg('organization_tags.tags', \"', '\" ) }} as organization_tags\n    from organizations\n\n    left join organization_tags\n        on organizations.organization_id = organization_tags.organization_id \n        and organizations.source_relation = organization_tags.source_relation\n\n\n    group by 1, 2\n{% endif %}\n\n--If you use using_domain_names tags this will be included, if not it will be ignored.\n{% if var('using_domain_names', True) %}\n), domain_names as (\n\n    select *\n    from {{ ref('stg_zendesk__domain_name') }}\n\n), domain_aggregates as (\n    select\n        organizations.organization_id,\n        organizations.source_relation,\n        {{ fivetran_utils.string_agg('domain_names.domain_name', \"', '\" ) }} as domain_names\n    from organizations\n\n    left join domain_names\n        on organizations.organization_id = domain_names.organization_id \n        and organizations.source_relation = domain_names.source_relation\n\n    group by 1, 2\n{% endif %}\n\n\n), final as (\n    select\n        organizations.*\n\n        --If you use organization tags this will be included, if not it will be ignored.\n        {% if var('using_organization_tags', True) %}\n        ,tag_aggregates.organization_tags\n        {% endif %}\n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        {% if var('using_domain_names', True) %}\n        ,domain_aggregates.domain_names\n        {% endif %}\n\n    from organizations\n\n    --If you use using_domain_names tags this will be included, if not it will be ignored.\n    {% if var('using_domain_names', True) %}\n    left join domain_aggregates\n        on organizations.organization_id = domain_aggregates.organization_id \n        and organizations.source_relation = domain_aggregates.source_relation\n    {% endif %}\n\n    --If you use organization tags this will be included, if not it will be ignored.\n    {% if var('using_organization_tags', True) %}\n    left join tag_aggregates\n        on organizations.organization_id = tag_aggregates.organization_id \n        and organizations.source_relation = tag_aggregates.source_relation\n    {% endif %}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__organization", "package": null, "version": null}, {"name": "stg_zendesk__organization_tag", "package": null, "version": null}, {"name": "stg_zendesk__domain_name", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.zendesk_source.stg_zendesk__organization", "model.zendesk_source.stg_zendesk__organization_tag", "model.zendesk_source.stg_zendesk__domain_name"]}, "compiled_path": "target/compiled/zendesk/models/intermediate/int_zendesk__organization_aggregates.sql", "compiled": true, "compiled_code": "\n\nwith organizations as (\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization`\n\n--If you use organization tags, this will be included, if not it will be ignored.\n\n), organization_tags as (\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization_tag`\n\n), tag_aggregates as (\n    select\n        organizations.organization_id,\n        organizations.source_relation,\n        \n    string_agg(organization_tags.tags, ', ')\n\n as organization_tags\n    from organizations\n\n    left join organization_tags\n        on organizations.organization_id = organization_tags.organization_id \n        and organizations.source_relation = organization_tags.source_relation\n\n\n    group by 1, 2\n\n\n--If you use using_domain_names tags this will be included, if not it will be ignored.\n\n), domain_names as (\n\n    select *\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__domain_name`\n\n), domain_aggregates as (\n    select\n        organizations.organization_id,\n        organizations.source_relation,\n        \n    string_agg(domain_names.domain_name, ', ')\n\n as domain_names\n    from organizations\n\n    left join domain_names\n        on organizations.organization_id = domain_names.organization_id \n        and organizations.source_relation = domain_names.source_relation\n\n    group by 1, 2\n\n\n\n), final as (\n    select\n        organizations.*\n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n        ,tag_aggregates.organization_tags\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,domain_aggregates.domain_names\n        \n\n    from organizations\n\n    --If you use using_domain_names tags this will be included, if not it will be ignored.\n    \n    left join domain_aggregates\n        on organizations.organization_id = domain_aggregates.organization_id \n        and organizations.source_relation = domain_aggregates.source_relation\n    \n\n    --If you use organization tags this will be included, if not it will be ignored.\n    \n    left join tag_aggregates\n        on organizations.organization_id = tag_aggregates.organization_id \n        and organizations.source_relation = tag_aggregates.source_relation\n    \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "operation.zendesk.zendesk-on-run-start-0": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "zendesk-on-run-start-0", "resource_type": "operation", "package_name": "zendesk", "path": "hooks/zendesk-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.zendesk.zendesk-on-run-start-0", "fqn": ["zendesk", "hooks", "zendesk-on-run-start-0"], "alias": "zendesk-on-run-start-0", "checksum": {"name": "sha256", "checksum": "59156d83b9cc9be566a091242fe9bf54f437d3aa7e9fdc37772f1d10afdbbc76"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zendesk_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1751990097.119999, "relation_name": null, "raw_code": "{{ fivetran_utils.empty_variable_warning(\"ticket_field_history_columns\", \"zendesk_ticket_field_history\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.empty_variable_warning"], "nodes": []}, "compiled_path": "target/compiled/zendesk/./dbt_project.yml/hooks/zendesk-on-run-start-0.sql", "compiled": true, "compiled_code": "\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "model.zendesk_source.stg_zendesk__user_tag": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__user_tag", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__user_tag.sql", "original_file_path": "models/stg_zendesk__user_tag.sql", "unique_id": "model.zendesk_source.stg_zendesk__user_tag", "fqn": ["zendesk_source", "stg_zendesk__user_tag"], "alias": "stg_zendesk__user_tag", "checksum": {"name": "sha256", "checksum": "6fda4bc917674d5651ead121c99945c56e6413d89e8534628a3b9388a3ab90d0"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Table containing all tags associated with a user. Only present if your account has user tagging enabled.", "columns": {"user_id": {"name": "user_id", "description": "Reference to the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tags": {"name": "tags", "description": "Tag associated with the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.5512938, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user_tag`", "raw_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_user_tags', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__user_tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__user_tag_tmp')),\n                staging_columns=get_user_tag_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        user_id,\n        {% if target.type == 'redshift' %}\n        'tag'\n        {% else %}\n        tag\n        {% endif %}\n        as tags,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__user_tag_tmp", "package": null, "version": null}, {"name": "stg_zendesk__user_tag_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_user_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__user_tag_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__user_tag.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user_tag_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    tag\n    \n as \n    \n    tag\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        user_id,\n        \n        tag\n        \n        as tags,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_chat": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_chat", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket_chat.sql", "original_file_path": "models/stg_zendesk__ticket_chat.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_chat", "fqn": ["zendesk_source", "stg_zendesk__ticket_chat"], "alias": "stg_zendesk__ticket_chat", "checksum": {"name": "sha256", "checksum": "6442faa2fd9b8794a58c09d62e0acf7c20d034235ec9a07d391eadd110fd0de8"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Information about ticket chat conversations.", "columns": {"chat_id": {"name": "chat_id", "description": "Unique ID of the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_authenticated": {"name": "is_authenticated", "description": "Boolean indicating whether the user has been given access to restricted Help Center content and authenticated Chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "backend": {"name": "backend", "description": "Indicates the underlying system or technology that is processing and managing the chat session associated with a ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "channel": {"name": "channel", "description": "The channel the conversation was created from. Likely `native_messaging` or `chat`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversation_id": {"name": "conversation_id", "description": "ID of the conversation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "integration_id": {"name": "integration_id", "description": "Identifier for the specific integration that created or is associated with the chat ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "ID of the associated ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "ID of the customer user who initiated the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "visitor_id": {"name": "visitor_id", "description": "Uniquely identify a visitor who is engaged in a chat session. This ID is typically assigned when a visitor starts a chat session on a platform integrated with Zendesk Chat.  It helps track the visitor's interactions across different chat sessions and can be used to re-associate returning visits or sessions with the same visitor.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.560676, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat`", "raw_code": "{{ config(enabled=var('using_ticket_chat', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_chat_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_chat_tmp')),\n                staging_columns=get_ticket_chat_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        authenticated as is_authenticated,\n        backend,\n        channel,\n        chat_id,\n        conversation_id,\n        integration_id,\n        ticket_id,\n        user_id,\n        visitor_id\n\n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_chat_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_chat_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_chat_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_chat_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket_chat.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    authenticated\n    \n as \n    \n    authenticated\n    \n, \n    \n    \n    backend\n    \n as \n    \n    backend\n    \n, \n    \n    \n    channel\n    \n as \n    \n    channel\n    \n, \n    \n    \n    chat_id\n    \n as \n    \n    chat_id\n    \n, \n    \n    \n    conversation_id\n    \n as \n    \n    conversation_id\n    \n, \n    \n    \n    initiator\n    \n as \n    \n    initiator\n    \n, \n    \n    \n    integration_id\n    \n as \n    \n    integration_id\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    visitor_id\n    \n as \n    \n    visitor_id\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        authenticated as is_authenticated,\n        backend,\n        channel,\n        chat_id,\n        conversation_id,\n        integration_id,\n        ticket_id,\n        user_id,\n        visitor_id\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["chat_id", "source_relation"], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_tag": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_tag", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket_tag.sql", "original_file_path": "models/stg_zendesk__ticket_tag.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag", "fqn": ["zendesk_source", "stg_zendesk__ticket_tag"], "alias": "stg_zendesk__ticket_tag", "checksum": {"name": "sha256", "checksum": "c5f1471cfe3e78fc74e2e4db1e61423f2b2531d7432415b4486025f08f2e45e1"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Tags are words, or combinations of words, you can use to add more context to tickets. The table lists all tags currently associated with a ticket.\n", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the tag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tags": {"name": "tags", "description": "The tag, or word(s), associated with the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.5552452, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_tag`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_tag_tmp')),\n                staging_columns=get_ticket_tag_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        {% if target.type == 'redshift' %}\n        \"tag\"\n        {% else %}\n        tag\n        {% endif %} as tags,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_tag_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_tag_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_tag_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket_tag.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_tag_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    tag\n    \n as \n    \n    tag\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        \n        tag\n         as tags,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_field_history": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_field_history", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket_field_history.sql", "original_file_path": "models/stg_zendesk__ticket_field_history.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history", "fqn": ["zendesk_source", "stg_zendesk__ticket_field_history"], "alias": "stg_zendesk__ticket_field_history", "checksum": {"name": "sha256", "checksum": "f75335f56946549c5012d093e2f037357cdf7eebce21540f50894aa4055304b2"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "All fields and field values associated with tickets.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "field_name": {"name": "field_name", "description": "The name of the ticket field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_starting_at": {"name": "valid_starting_at", "description": "The time the ticket field value became valid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_ending_at": {"name": "valid_ending_at", "description": "The time the ticket field value became invalidated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "value": {"name": "value", "description": "The value of the field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "The id of the user who made the update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.556179, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_field_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_field_history_tmp')),\n                staging_columns=get_ticket_field_history_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        field_name,\n        cast(updated as {{ dbt.type_timestamp() }}) as valid_starting_at,\n        cast(lead(updated) over (partition by ticket_id, field_name {{ ', source_relation' if var('zendesk_sources', [])|length > 1 }} order by updated) as {{ dbt.type_timestamp() }}) as valid_ending_at,\n        value,\n        user_id,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_field_history_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_field_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_field_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_field_history_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket_field_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_name\n    \n as \n    \n    field_name\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        field_name,\n        cast(updated as timestamp) as valid_starting_at,\n        cast(lead(updated) over (partition by ticket_id, field_name  order by updated) as timestamp) as valid_ending_at,\n        value,\n        user_id,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__schedule_holiday": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__schedule_holiday", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__schedule_holiday.sql", "original_file_path": "models/stg_zendesk__schedule_holiday.sql", "unique_id": "model.zendesk_source.stg_zendesk__schedule_holiday", "fqn": ["zendesk_source", "stg_zendesk__schedule_holiday"], "alias": "stg_zendesk__schedule_holiday", "checksum": {"name": "sha256", "checksum": "34a9e93156abf06c0bb42548d4eae41ddd2964d5b79456957d771a1eb113ef5a"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Information about holidays for each specified schedule.", "columns": {"end_date_at": {"name": "end_date_at", "description": "ISO 8601 representation of the holiday end date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "holiday_id": {"name": "holiday_id", "description": "The ID of the scheduled holiday.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "holiday_name": {"name": "holiday_name", "description": "Name of the holiday.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "schedule_id": {"name": "schedule_id", "description": "The ID of the schedule.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_date_at": {"name": "start_date_at", "description": "ISO 8601 representation of the holiday start date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.559221, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday`", "raw_code": "--To disable this model, set the using_schedules or using_holidays variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True) and var('using_holidays', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__schedule_holiday_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__schedule_holiday_tmp')),\n                staging_columns=get_schedule_holiday_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }} ) as _fivetran_synced,\n        cast(end_date as {{ dbt.type_timestamp() }} ) as holiday_end_date_at,\n        cast(id as {{ dbt.type_string() }} ) as holiday_id,\n        name as holiday_name,\n        cast(schedule_id as {{ dbt.type_string() }} ) as schedule_id,\n        cast(start_date as {{ dbt.type_timestamp() }} ) as holiday_start_date_at,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__schedule_holiday_tmp", "package": null, "version": null}, {"name": "stg_zendesk__schedule_holiday_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_schedule_holiday_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_timestamp", "macro.dbt.type_string"], "nodes": ["model.zendesk_source.stg_zendesk__schedule_holiday_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__schedule_holiday.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules or using_holidays variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    schedule_id\n    \n as \n    \n    schedule_id\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_deleted,\n        cast(_fivetran_synced as timestamp ) as _fivetran_synced,\n        cast(end_date as timestamp ) as holiday_end_date_at,\n        cast(id as string ) as holiday_id,\n        name as holiday_name,\n        cast(schedule_id as string ) as schedule_id,\n        cast(start_date as timestamp ) as holiday_start_date_at,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["holiday_id"], "time_spine": null}, "model.zendesk_source.stg_zendesk__daylight_time": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__daylight_time", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__daylight_time.sql", "original_file_path": "models/stg_zendesk__daylight_time.sql", "unique_id": "model.zendesk_source.stg_zendesk__daylight_time", "fqn": ["zendesk_source", "stg_zendesk__daylight_time"], "alias": "stg_zendesk__daylight_time", "checksum": {"name": "sha256", "checksum": "745d8fda8bef6ad3fea858e48c4a9f5202b31096729433a847e5fa7d1d03a764"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Appropriate offsets (from UTC) for timezones that engage or have engaged with Daylight Savings at some point since 1970.\n", "columns": {"daylight_end_utc": {"name": "daylight_end_utc", "description": "UTC timestamp of when Daylight Time ended in this year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daylight_offset": {"name": "daylight_offset", "description": "Number of **hours** added during Daylight Savings Time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daylight_start_utc": {"name": "daylight_start_utc", "description": "UTC timestamp of when Daylight Time began in this year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_zone": {"name": "time_zone", "description": "Name of the timezone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "year": {"name": "year", "description": "Year in which daylight savings occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daylight_offset_minutes": {"name": "daylight_offset_minutes", "description": "Number of **minutes** added during Daylight Savings Time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.557301, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__daylight_time_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__daylight_time_tmp')),\n                staging_columns=get_daylight_time_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        daylight_end_utc,\n        daylight_offset,\n        daylight_start_utc,\n        time_zone,\n        year,\n        daylight_offset * 60 as daylight_offset_minutes,\n        source_relation\n        \n    from fields\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__daylight_time_tmp", "package": null, "version": null}, {"name": "stg_zendesk__daylight_time_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_daylight_time_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__daylight_time_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__daylight_time.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    daylight_end_utc\n    \n as \n    \n    daylight_end_utc\n    \n, \n    \n    \n    daylight_offset\n    \n as \n    \n    daylight_offset\n    \n, \n    \n    \n    daylight_start_utc\n    \n as \n    \n    daylight_start_utc\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    year\n    \n as \n    \n    year\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        daylight_end_utc,\n        daylight_offset,\n        daylight_start_utc,\n        time_zone,\n        year,\n        daylight_offset * 60 as daylight_offset_minutes,\n        source_relation\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["source_relation", "time_zone", "year"], "time_spine": null}, "model.zendesk_source.stg_zendesk__organization": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__organization", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__organization.sql", "original_file_path": "models/stg_zendesk__organization.sql", "unique_id": "model.zendesk_source.stg_zendesk__organization", "fqn": ["zendesk_source", "stg_zendesk__organization"], "alias": "stg_zendesk__organization", "checksum": {"name": "sha256", "checksum": "774753321bbb37addac64b4482c32fea30e5e5067eedcf9b791fbf7e5a1b7f64"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Just as agents can be segmented into groups in Zendesk Support, your customers (end-users) can be segmented into  organizations. You can manually assign customers to an organization or automatically assign them to an organization  by their email address domain. Organizations can be used in business rules to route tickets to groups of agents or  to send email notifications.\n", "columns": {"organization_id": {"name": "organization_id", "description": "Automatically assigned when the organization is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "A unique name for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "details": {"name": "details", "description": "Any details obout the organization, such as the address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.549441, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization`", "raw_code": "{{ config(enabled=var('using_organizations', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__organization_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__organization_tmp')),\n                staging_columns=get_organization_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        created_at,\n        updated_at,\n        details,\n        name,\n        external_id,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('zendesk__organization_passthrough_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__organization_tmp", "package": null, "version": null}, {"name": "stg_zendesk__organization_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_organization_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zendesk_source.stg_zendesk__organization_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__organization.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    details\n    \n as \n    \n    details\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    shared_comments\n    \n as \n    \n    shared_comments\n    \n, \n    \n    \n    shared_tickets\n    \n as \n    \n    shared_tickets\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        created_at,\n        updated_at,\n        details,\n        name,\n        external_id,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["organization_id"], "time_spine": null}, "model.zendesk_source.stg_zendesk__time_zone": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__time_zone", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__time_zone.sql", "original_file_path": "models/stg_zendesk__time_zone.sql", "unique_id": "model.zendesk_source.stg_zendesk__time_zone", "fqn": ["zendesk_source", "stg_zendesk__time_zone"], "alias": "stg_zendesk__time_zone", "checksum": {"name": "sha256", "checksum": "27abff1b1fc6d8e83a660520245da59e62a9981c4fe67a12ff7333d0d3c22609"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Offsets (from UTC) for each timezone.", "columns": {"time_zone": {"name": "time_zone", "description": "Name of the time zone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "standard_offset": {"name": "standard_offset", "description": "Standard offset of the timezone (non-daylight savings hours). In `+/-hh:mm` format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "standard_offset_minutes": {"name": "standard_offset_minutes", "description": "Standard offset of the timezone (non-daylight savings hours) in minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.557944, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__time_zone_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__time_zone_tmp')),\n                staging_columns=get_time_zone_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        standard_offset,\n        time_zone,\n        -- the standard_offset is a string written as [+/-]HH:MM\n        -- let's convert it to an integer value of minutes\n        cast( {{ dbt.split_part(string_text='standard_offset', delimiter_text=\"':'\", part_number=1) }} as {{ dbt.type_int() }} ) * 60 +\n            (cast( {{ dbt.split_part(string_text='standard_offset', delimiter_text=\"':'\", part_number=2) }} as {{ dbt.type_int() }} ) *\n                (case when standard_offset like '-%' then -1 else 1 end) ) as standard_offset_minutes,\n        source_relation\n    \n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__time_zone_tmp", "package": null, "version": null}, {"name": "stg_zendesk__time_zone_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_time_zone_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.split_part", "macro.dbt.type_int"], "nodes": ["model.zendesk_source.stg_zendesk__time_zone_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__time_zone.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    standard_offset\n    \n as \n    \n    standard_offset\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        standard_offset,\n        time_zone,\n        -- the standard_offset is a string written as [+/-]HH:MM\n        -- let's convert it to an integer value of minutes\n        cast( \n\n  \n    split(\n        standard_offset,\n        ':'\n        )[safe_offset(0)]\n  \n\n as INT64 ) * 60 +\n            (cast( \n\n  \n    split(\n        standard_offset,\n        ':'\n        )[safe_offset(1)]\n  \n\n as INT64 ) *\n                (case when standard_offset like '-%' then -1 else 1 end) ) as standard_offset_minutes,\n        source_relation\n    \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["time_zone"], "time_spine": null}, "model.zendesk_source.stg_zendesk__group": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__group", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__group.sql", "original_file_path": "models/stg_zendesk__group.sql", "unique_id": "model.zendesk_source.stg_zendesk__group", "fqn": ["zendesk_source", "stg_zendesk__group"], "alias": "stg_zendesk__group", "checksum": {"name": "sha256", "checksum": "72237eef17ba53d8b8f876abc8044eef8f8204888f60a6e5a34d5d474d9a7319"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "When support requests arrive in Zendesk Support, they can be assigned to a Group. Groups serve as the core element of ticket workflow; support agents are organized into Groups and tickets can be assigned to a Group only, or to an assigned agent within a Group. A ticket can never be assigned to an agent without also being  assigned to a Group.\n", "columns": {"group_id": {"name": "group_id", "description": "Automatically assigned when creating groups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "A unique external id to associate organizations to an external record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the organization was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The time of the last update of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.548486, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__group`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zendesk__group_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__group_tmp')),\n                staging_columns=get_group_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as group_id,\n        name,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__group_tmp", "package": null, "version": null}, {"name": "stg_zendesk__group_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_group_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__group_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__group.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__group_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as group_id,\n        name,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["group_id"], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_comment": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_comment", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket_comment.sql", "original_file_path": "models/stg_zendesk__ticket_comment.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment", "fqn": ["zendesk_source", "stg_zendesk__ticket_comment"], "alias": "stg_zendesk__ticket_comment", "checksum": {"name": "sha256", "checksum": "46ce181e87191a6c59bc31ad6672f9365a40d85883b230a5608cf72d1b3a3477"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Ticket comments represent the conversation between requesters, collaborators, and agents. Comments can be public or private.", "columns": {"ticket_comment_id": {"name": "ticket_comment_id", "description": "Automatically assigned when the comment is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "body": {"name": "body", "description": "The comment string", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the comment was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_public": {"name": "is_public", "description": "Boolean field indicating if the comment is public (true), or if it is an internal note (false)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "The ticket id associated with this comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "The id of the comment author", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_facebook_comment": {"name": "is_facebook_comment", "description": "Boolean field indicating if the comment is a facebook comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_tweet": {"name": "is_tweet", "description": "Boolean field indicating if the comment is a twitter tweet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_voice_comment": {"name": "is_voice_comment", "description": "Boolean field indicating if the comment is a voice comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.550842, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_comment`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_comment_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_comment_tmp')),\n                staging_columns=get_ticket_comment_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_comment_id,\n        _fivetran_synced,\n        _fivetran_deleted,\n        body,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        public as is_public,\n        ticket_id,\n        user_id,\n        facebook_comment as is_facebook_comment,\n        tweet as is_tweet,\n        voice_comment as is_voice_comment,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_comment_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_comment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_comment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_comment_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket_comment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_comment_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    cast(null as INT64) as \n    \n    call_duration\n    \n , \n    cast(null as INT64) as \n    \n    call_id\n    \n , \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    facebook_comment\n    \n as \n    \n    facebook_comment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as INT64) as \n    \n    location\n    \n , \n    \n    \n    public\n    \n as \n    \n    public\n    \n, \n    cast(null as INT64) as \n    \n    recording_url\n    \n , \n    cast(null as timestamp) as \n    \n    started_at\n    \n , \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    cast(null as INT64) as \n    \n    transcription_status\n    \n , \n    cast(null as INT64) as \n    \n    transcription_text\n    \n , \n    cast(null as INT64) as \n    \n    trusted\n    \n , \n    \n    \n    tweet\n    \n as \n    \n    tweet\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    voice_comment\n    \n as \n    \n    voice_comment\n    \n, \n    cast(null as INT64) as \n    \n    voice_comment_transcription_visible\n    \n \n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_comment_id,\n        _fivetran_synced,\n        _fivetran_deleted,\n        body,\n        cast(created as timestamp) as created_at,\n        public as is_public,\n        ticket_id,\n        user_id,\n        facebook_comment as is_facebook_comment,\n        tweet as is_tweet,\n        voice_comment as is_voice_comment,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ticket_comment_id"], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_schedule": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_schedule", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket_schedule.sql", "original_file_path": "models/stg_zendesk__ticket_schedule.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_schedule", "fqn": ["zendesk_source", "stg_zendesk__ticket_schedule"], "alias": "stg_zendesk__ticket_schedule", "checksum": {"name": "sha256", "checksum": "b4e1a6de6d5729bf896019025d4899ba32462466413b59cb0e05498f27d76abd"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The schedules applied to tickets through a trigger.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket assigned to the schedule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the schedule was assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "schedule_id": {"name": "schedule_id", "description": "The ID of the schedule applied to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.554386, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_schedule`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_schedule_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_schedule_tmp')),\n                staging_columns=get_ticket_schedule_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(schedule_id as {{ dbt.type_string() }}) as schedule_id, --need to convert from numeric to string for downstream models to work properly\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_schedule_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_schedule_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_schedule_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_timestamp", "macro.dbt.type_string"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_schedule_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket_schedule.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_schedule_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    schedule_id\n    \n as \n    \n    schedule_id\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        cast(created_at as timestamp) as created_at,\n        cast(schedule_id as string) as schedule_id, --need to convert from numeric to string for downstream models to work properly\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__schedule": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__schedule", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__schedule.sql", "original_file_path": "models/stg_zendesk__schedule.sql", "unique_id": "model.zendesk_source.stg_zendesk__schedule", "fqn": ["zendesk_source", "stg_zendesk__schedule"], "alias": "stg_zendesk__schedule", "checksum": {"name": "sha256", "checksum": "006c8897889b39d7dd4cfd04f028a61c9b14b696092dd95a4668ca76f8cea353"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The support schedules created with different business hours and holidays.", "columns": {"schedule_id": {"name": "schedule_id", "description": "ID automatically assigned to the schedule upon creation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "schedule_name": {"name": "schedule_name", "description": "Name of the schedule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Time the schedule was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_time": {"name": "start_time", "description": "Start time of the schedule, in the schedule's time zone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_time": {"name": "end_time", "description": "End time of the schedule, in the schedule's time zone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_zone": {"name": "time_zone", "description": "Timezone in which the schedule operates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.554027, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__schedule_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__schedule_tmp')),\n                staging_columns=get_schedule_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as schedule_id, --need to convert from numeric to string for downstream models to work properly\n        end_time,\n        start_time,\n        name as schedule_name,\n        created_at,\n        time_zone,\n        source_relation\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__schedule_tmp", "package": null, "version": null}, {"name": "stg_zendesk__schedule_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_schedule_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_string"], "nodes": ["model.zendesk_source.stg_zendesk__schedule_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__schedule.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    end_time_utc\n    \n as \n    \n    end_time_utc\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    start_time_utc\n    \n as \n    \n    start_time_utc\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as schedule_id, --need to convert from numeric to string for downstream models to work properly\n        end_time,\n        start_time,\n        name as schedule_name,\n        created_at,\n        time_zone,\n        source_relation\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__user": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__user", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__user.sql", "original_file_path": "models/stg_zendesk__user.sql", "unique_id": "model.zendesk_source.stg_zendesk__user", "fqn": ["zendesk_source", "stg_zendesk__user"], "alias": "stg_zendesk__user", "checksum": {"name": "sha256", "checksum": "4bc33dfae8a1d307b204b6d98ba8d762d58e7bcd4fa5dd79bc360c25aab56199"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Zendesk Support has three types of users, end-users (your customers), agents, and administrators.", "columns": {"user_id": {"name": "user_id", "description": "Automatically assigned when the user is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "email": {"name": "email", "description": "The user's primary email address. *Writeable on create only. On update, a secondary email is added. See Email Address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The user's name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "false if the user has been deleted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the user was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_id": {"name": "organization_id", "description": "The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "User's phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "role": {"name": "role", "description": "The user's role. Possible values are \"end-user\", \"agent\", or \"admin\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_zone": {"name": "time_zone", "description": "The user's time zone. See Time Zone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_restriction": {"name": "ticket_restriction", "description": "Specifies which tickets the user has access to. Possible values are organization, groups, assigned, requested and null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_suspended": {"name": "is_suspended", "description": "Boolean representing whether the user has been suspended, meaning that they can no longer sign in and any new support requests you receive from them are sent to the suspended tickets queue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "A unique identifier from another system. The API treats the id as case insensitive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The time the user was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_login_at": {"name": "last_login_at", "description": "Last time the user signed in to Zendesk Support or made an API request using an API token or basic authentication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "locale": {"name": "locale", "description": "The user's locale. A BCP-47 compliant tag for the locale. If both \"locale\" and \"locale_id\" are present on create or update, \"locale_id\" is ignored and only \"locale\" is used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.55307, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zendesk__user_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__user_tmp')),\n                staging_columns=get_user_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as ( \n    \n    select \n        id as user_id,\n        external_id,\n        _fivetran_synced,\n        _fivetran_deleted,\n        cast(last_login_at as {{ dbt.type_timestamp() }}) as last_login_at,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        email,\n        name,\n        organization_id,\n        phone,\n        {% if var('internal_user_criteria', false) -%}\n            case \n                when role in ('admin', 'agent') then role\n                when {{ var('internal_user_criteria', false) }} then 'agent'\n            else role end as role,\n        {% else -%}\n        role,\n        {% endif -%}\n        ticket_restriction,\n        time_zone,\n        locale,\n        active as is_active,\n        suspended as is_suspended,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('zendesk__user_passthrough_columns') }}\n        \n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__user_tmp", "package": null, "version": null}, {"name": "stg_zendesk__user_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_user_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zendesk_source.stg_zendesk__user_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__user.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alias\n    \n as \n    \n    alias\n    \n, \n    \n    \n    authenticity_token\n    \n as \n    \n    authenticity_token\n    \n, \n    \n    \n    chat_only\n    \n as \n    \n    chat_only\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    details\n    \n as \n    \n    details\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_login_at\n    \n as \n    \n    last_login_at\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    locale_id\n    \n as \n    \n    locale_id\n    \n, \n    \n    \n    moderator\n    \n as \n    \n    moderator\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    only_private_comments\n    \n as \n    \n    only_private_comments\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    remote_photo_url\n    \n as \n    \n    remote_photo_url\n    \n, \n    \n    \n    restricted_agent\n    \n as \n    \n    restricted_agent\n    \n, \n    \n    \n    role\n    \n as \n    \n    role\n    \n, \n    \n    \n    shared\n    \n as \n    \n    shared\n    \n, \n    \n    \n    shared_agent\n    \n as \n    \n    shared_agent\n    \n, \n    \n    \n    signature\n    \n as \n    \n    signature\n    \n, \n    \n    \n    suspended\n    \n as \n    \n    suspended\n    \n, \n    \n    \n    ticket_restriction\n    \n as \n    \n    ticket_restriction\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    two_factor_auth_enabled\n    \n as \n    \n    two_factor_auth_enabled\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    verified\n    \n as \n    \n    verified\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as ( \n    \n    select \n        id as user_id,\n        external_id,\n        _fivetran_synced,\n        _fivetran_deleted,\n        cast(last_login_at as timestamp) as last_login_at,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        email,\n        name,\n        organization_id,\n        phone,\n        role,\n        ticket_restriction,\n        time_zone,\n        locale,\n        active as is_active,\n        suspended as is_suspended,\n        source_relation\n\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__brand": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__brand", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__brand.sql", "original_file_path": "models/stg_zendesk__brand.sql", "unique_id": "model.zendesk_source.stg_zendesk__brand", "fqn": ["zendesk_source", "stg_zendesk__brand"], "alias": "stg_zendesk__brand", "checksum": {"name": "sha256", "checksum": "903b142cce43d0b88b492400465b5880c52bf6318f141c0cc40c5d277c728b72"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Brands are your customer-facing identities. They might represent multiple products or services, or they  might literally be multiple brands owned and represented by your company.\n", "columns": {"brand_id": {"name": "brand_id", "description": "The ID automatically assigned when the brand is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_url": {"name": "brand_url", "description": "The url of the brand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the brand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subdomain": {"name": "subdomain", "description": "The subdomain of the brand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "If the brand is set as active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.5473769, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__brand`", "raw_code": "{{ config(enabled=var('using_brands', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__brand_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__brand_tmp')),\n                staging_columns=get_brand_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as brand_id,\n        brand_url,\n        name,\n        subdomain,\n        active as is_active,\n        source_relation\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__brand_tmp", "package": null, "version": null}, {"name": "stg_zendesk__brand_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_brand_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__brand_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__brand.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__brand_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    brand_url\n    \n as \n    \n    brand_url\n    \n, \n    \n    \n    has_help_center\n    \n as \n    \n    has_help_center\n    \n, \n    \n    \n    help_center_state\n    \n as \n    \n    help_center_state\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    logo_content_type\n    \n as \n    \n    logo_content_type\n    \n, \n    \n    \n    logo_content_url\n    \n as \n    \n    logo_content_url\n    \n, \n    \n    \n    logo_deleted\n    \n as \n    \n    logo_deleted\n    \n, \n    \n    \n    logo_file_name\n    \n as \n    \n    logo_file_name\n    \n, \n    \n    \n    logo_height\n    \n as \n    \n    logo_height\n    \n, \n    \n    \n    logo_id\n    \n as \n    \n    logo_id\n    \n, \n    \n    \n    logo_inline\n    \n as \n    \n    logo_inline\n    \n, \n    \n    \n    logo_mapped_content_url\n    \n as \n    \n    logo_mapped_content_url\n    \n, \n    \n    \n    logo_size\n    \n as \n    \n    logo_size\n    \n, \n    \n    \n    logo_url\n    \n as \n    \n    logo_url\n    \n, \n    \n    \n    logo_width\n    \n as \n    \n    logo_width\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subdomain\n    \n as \n    \n    subdomain\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as brand_id,\n        brand_url,\n        name,\n        subdomain,\n        active as is_active,\n        source_relation\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["brand_id"], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_form_history": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_form_history", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket_form_history.sql", "original_file_path": "models/stg_zendesk__ticket_form_history.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history", "fqn": ["zendesk_source", "stg_zendesk__ticket_form_history"], "alias": "stg_zendesk__ticket_form_history", "checksum": {"name": "sha256", "checksum": "424f0243d92024bac05623dd02bc3895d4f27556537ab691d02244a97841cf50"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Ticket forms allow an admin to define a subset of ticket fields for display to both agents and end users.", "columns": {"ticket_form_id": {"name": "ticket_form_id", "description": "Automatically assigned when creating ticket form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the ticket form was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The time of the last update of the ticket form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "display_name": {"name": "display_name", "description": "The name of the form that is displayed to an end user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "If the form is set as active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.554944, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_form_history`", "raw_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_ticket_form_history', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_form_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_form_history_tmp')),\n                staging_columns=get_ticket_form_history_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_form_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        display_name,\n        active as is_active,\n        name,\n        source_relation\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n    \n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_form_history_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_form_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_form_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_form_history_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket_form_history.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_form_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    end_user_visible\n    \n as \n    \n    end_user_visible\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_form_id,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        display_name,\n        active as is_active,\n        name,\n        source_relation\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n    \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__audit_log": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__audit_log", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__audit_log.sql", "original_file_path": "models/stg_zendesk__audit_log.sql", "unique_id": "model.zendesk_source.stg_zendesk__audit_log", "fqn": ["zendesk_source", "stg_zendesk__audit_log"], "alias": "stg_zendesk__audit_log", "checksum": {"name": "sha256", "checksum": "3d789054bc0914223139d81db2cc9cd2c3aa8576e093629f6c1bafc85ae02ecc"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The `audit_log` table captures historical changes and actions within Zendesk. It provides a record of modifications  made to tickets, schedules, and other objects, allowing for a detailed audit trail. Each row represents an action  performed by an actor, including the time of the action, the affected entity, and a description of the changes. This  table is especially useful for tracking schedule modifications and maintaining a history of schedule changes.\n", "columns": {"audit_log_id": {"name": "audit_log_id", "description": "The unique identifier for each audit log entry, representing a distinct action or change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "action": {"name": "action", "description": "Describes the specific action performed within Zendesk, such as ticket updates or schedule modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "actor_id": {"name": "actor_id", "description": "The unique identifier of the user or system responsible for performing the action.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "change_description": {"name": "change_description", "description": "A detailed description of the changes made during the action, capturing what was altered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The timestamp indicating when the action was performed and recorded in the audit log.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_id": {"name": "source_id", "description": "The unique identifier of the entity affected by the action, such as a ticket or schedule.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_label": {"name": "source_label", "description": "A label that provides additional context about the affected entity, typically related to its type or name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_type": {"name": "source_type", "description": "Specifies the type of entity impacted by the action, such as a ticket, schedule, or user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.545392, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__audit_log`", "raw_code": "{{ config(enabled=var('using_audit_log', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__audit_log_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__audit_log_tmp')),\n                staging_columns=get_audit_log_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    select \n        cast(id as {{ dbt.type_string() }}) as audit_log_id,\n        action,\n        actor_id,\n        change_description,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        source_id,\n        source_label,\n        source_type,\n        _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__audit_log_tmp", "package": null, "version": null}, {"name": "stg_zendesk__audit_log_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_audit_log_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__audit_log_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__audit_log.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__audit_log_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    action\n    \n as \n    \n    action\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    change_description\n    \n as \n    \n    change_description\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_label\n    \n as \n    \n    source_label\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    select \n        cast(id as string) as audit_log_id,\n        action,\n        actor_id,\n        change_description,\n        cast(created_at as timestamp) as created_at,\n        source_id,\n        source_label,\n        source_type,\n        _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_chat_event": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_chat_event", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket_chat_event.sql", "original_file_path": "models/stg_zendesk__ticket_chat_event.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_chat_event", "fqn": ["zendesk_source", "stg_zendesk__ticket_chat_event"], "alias": "stg_zendesk__ticket_chat_event", "checksum": {"name": "sha256", "checksum": "d7680d16917efa0db41edc8208bdae798d77db15dda0f6eab1a7a6e01d8b61f1"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Information about chat and messaging events on tickets. Excludes records in which the `actor_id` is either `__trigger` or `__system`.", "columns": {"chat_id": {"name": "chat_id", "description": "The ID of the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp of the chat event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "actor_id": {"name": "actor_id", "description": "Zendesk user id for the user or system that triggered the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "chat_index": {"name": "chat_index", "description": "Index of the chat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_message_id": {"name": "external_message_id", "description": "External identifier of the chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "filename": {"name": "filename", "description": "Name of an attached file for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_history_context": {"name": "is_history_context", "description": "Boolean that signifies whether a specific chat event is part of the historical context being constructed within the table. This implies that the event is being recorded as a  part of the historical data collection process, where previous interactions or statuses are captured to provide a complete view of changes over time.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "message": {"name": "message", "description": "Body of the chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "message_id": {"name": "message_id", "description": "id of the chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "message_source": {"name": "message_source", "description": "Where the message originated from (e.g. `NATIVE_MESSAGING`)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mime_type": {"name": "mime_type", "description": "MIME type of the document for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_message": {"name": "original_message", "description": "JSON storing information about the message event object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_message_type": {"name": "original_message_type", "description": "Type of message. Including but not limited to - `file`, `text`, `form_response`, `form`, and `image`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "parent_message_id": {"name": "parent_message_id", "description": "id of the parent chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reason": {"name": "reason", "description": "The underlying cause or justification for a specific event (such as the session ending) within the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "size": {"name": "size", "description": "Size of an attached file for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "Status of the chat - including but not limited to `READ`, `SEND_SUCCESS`, and `DELIVERY_SUCCESS`. Populated for `ChatMessageStatus` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status_updated_at": {"name": "status_updated_at", "description": "Timestamp at which the status was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "Type of chat event. Including but not limited to - `ChatMessage`, `ChatJoin`, `ChatLeave`, `ChatMessageStatus`, `ChatFileAttachment`, `ChatAcdSkillsDetected`, `ChatDepartmentTransfer`, `ChatEmailChanged`, `ChatNameChanged`, `ChatRatingChanged`, and `ChatRatingCommentChanged`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "URL of the attached file for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.663755, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat_event`", "raw_code": "{{ config(enabled=var('using_ticket_chat', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_chat_event_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_chat_event_tmp')),\n                staging_columns=get_ticket_chat_event_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        {# Very infrequently, the actor_id field may look like agent:####### instead of just ####### #}\n        cast( (case when actor_id like 'agent%' then {{ dbt.split_part('actor_id', \"'agent:'\", 2) }} else actor_id end) as {{ dbt.type_bigint() }}) as actor_id,\n        chat_id,\n        chat_index,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        external_message_id,\n        filename,\n        is_history_context,\n        message,\n        message_id,\n        message_source,\n        mime_type,\n        original_message_type,\n        parent_message_id,\n        reason,\n        size,\n        status,\n        cast(status_updated_at as {{ dbt.type_timestamp() }}) as status_updated_at,\n        type,\n        url\n\n    from fields\n    {# Exclude these types of chat events from downstream metrics #}\n    where actor_id not in ('__trigger', '__system')\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_chat_event_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_chat_event_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_chat_event_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.split_part", "macro.dbt.type_bigint", "macro.dbt.type_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_chat_event_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket_chat_event.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat_event_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    chat_id\n    \n as \n    \n    chat_id\n    \n, \n    \n    \n    chat_index\n    \n as \n    \n    chat_index\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    external_message_id\n    \n as \n    \n    external_message_id\n    \n, \n    \n    \n    filename\n    \n as \n    \n    filename\n    \n, \n    \n    \n    is_history_context\n    \n as \n    \n    is_history_context\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_source\n    \n as \n    \n    message_source\n    \n, \n    \n    \n    mime_type\n    \n as \n    \n    mime_type\n    \n, \n    \n    \n    original_message_type\n    \n as \n    \n    original_message_type\n    \n, \n    \n    \n    parent_message_id\n    \n as \n    \n    parent_message_id\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    size\n    \n as \n    \n    size\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_updated_at\n    \n as \n    \n    status_updated_at\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        \n        cast( (case when actor_id like 'agent%' then \n\n  \n    split(\n        actor_id,\n        'agent:'\n        )[safe_offset(1)]\n  \n\n else actor_id end) as bigint) as actor_id,\n        chat_id,\n        chat_index,\n        cast(created_at as timestamp) as created_at,\n        external_message_id,\n        filename,\n        is_history_context,\n        message,\n        message_id,\n        message_source,\n        mime_type,\n        original_message_type,\n        parent_message_id,\n        reason,\n        size,\n        status,\n        cast(status_updated_at as timestamp) as status_updated_at,\n        type,\n        url\n\n    from fields\n    \n    where actor_id not in ('__trigger', '__system')\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["chat_id", "created_at", "source_relation"], "time_spine": null}, "model.zendesk_source.stg_zendesk__domain_name": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__domain_name", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__domain_name.sql", "original_file_path": "models/stg_zendesk__domain_name.sql", "unique_id": "model.zendesk_source.stg_zendesk__domain_name", "fqn": ["zendesk_source", "stg_zendesk__domain_name"], "alias": "stg_zendesk__domain_name", "checksum": {"name": "sha256", "checksum": "9664f623e0fc77550b7669744f5df97c65f4225e1632cae125c579dfff5eb967"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Domain names associated with an organization. An organization may have multiple domain names.", "columns": {"organization_id": {"name": "organization_id", "description": "Reference to the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "domain_name": {"name": "domain_name", "description": "The name of the domain associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "index": {"name": "index", "description": "Index number of the domain name associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.548019, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__domain_name`", "raw_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_domain_names', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__domain_name_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__domain_name_tmp')),\n                staging_columns=get_domain_name_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        domain_name,\n        index,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__domain_name_tmp", "package": null, "version": null}, {"name": "stg_zendesk__domain_name_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_domain_name_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__domain_name_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__domain_name.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__domain_name_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    domain_name\n    \n as \n    \n    domain_name\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        domain_name,\n        index,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__organization_tag": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__organization_tag", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__organization_tag.sql", "original_file_path": "models/stg_zendesk__organization_tag.sql", "unique_id": "model.zendesk_source.stg_zendesk__organization_tag", "fqn": ["zendesk_source", "stg_zendesk__organization_tag"], "alias": "stg_zendesk__organization_tag", "checksum": {"name": "sha256", "checksum": "86125d9cdd28f9af7748e8d4e45bfccff74d7f6455fd4e209ec13a1fc24156d4"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The tags associated with an organization. An organization may have multiple tags.", "columns": {"organization_id": {"name": "organization_id", "description": "Reference to the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tag": {"name": "tag", "description": "Tag associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.548929, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization_tag`", "raw_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_organization_tags', True) and var('using_organizations', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zendesk__organization_tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__organization_tag_tmp')),\n                staging_columns=get_organization_tag_columns()\n            )\n        }}\n        \n        {{ zendesk_source.apply_source_relation() }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        {% if target.type == 'redshift' %}\n        'tag'\n        {% else %}\n        tag\n        {% endif %}\n        as tags,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__organization_tag_tmp", "package": null, "version": null}, {"name": "stg_zendesk__organization_tag_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_organization_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation"], "nodes": ["model.zendesk_source.stg_zendesk__organization_tag_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__organization_tag.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization_tag_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    tag\n    \n as \n    \n    tag\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        \n        tag\n        \n        as tags,\n        source_relation\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket", "resource_type": "model", "package_name": "zendesk_source", "path": "stg_zendesk__ticket.sql", "original_file_path": "models/stg_zendesk__ticket.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket", "fqn": ["zendesk_source", "stg_zendesk__ticket"], "alias": "stg_zendesk__ticket", "checksum": {"name": "sha256", "checksum": "921d19b6b6e95dd169582a0e370b8cb548047cb1125de64d06e1d592aaa5f0aa"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Tickets are the means through which your end users (customers) communicate with agents in Zendesk Support. Tickets can  originate from a number of channels, including email, Help Center, chat, phone call, Twitter, Facebook, or the API.\n", "columns": {"ticket_id": {"name": "ticket_id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_channel": {"name": "created_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_from_id": {"name": "source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_from_title": {"name": "source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_rel": {"name": "source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_to_address": {"name": "source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_to_name": {"name": "source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "problem_id": {"name": "problem_id", "description": "For tickets of type \"incident\", the ID of the problem the incident is linked to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "An id you can use to link Zendesk Support tickets to local records.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are unioning multiple Zendesk connectors together in this package. Empty string if you are not.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zendesk_source://models/stg_zendesk.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.546381, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zendesk__ticket_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zendesk__ticket_tmp')),\n                staging_columns=get_ticket_columns()\n            )\n        }}\n\n        {{ zendesk_source.apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_id,\n        _fivetran_synced,\n        _fivetran_deleted,\n        assignee_id,\n        brand_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        description,\n        due_at,\n        group_id,\n        external_id,\n        is_public,\n        organization_id,\n        priority,\n        recipient,\n        requester_id,\n        status,\n        subject,\n        problem_id,\n        submitter_id,\n        ticket_form_id,\n        type,\n        url,\n        via_channel as created_channel,\n        via_source_from_id as source_from_id,\n        via_source_from_title as source_from_title,\n        via_source_rel as source_rel,\n        via_source_to_address as source_to_address,\n        via_source_to_name as source_to_name,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('zendesk__ticket_passthrough_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_tmp", "package": null, "version": null}, {"name": "stg_zendesk__ticket_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.get_ticket_columns", "macro.fivetran_utils.fill_staging_columns", "macro.zendesk_source.apply_source_relation", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_tmp"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk__ticket.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    allow_channelback\n    \n as \n    \n    allow_channelback\n    \n, \n    \n    \n    assignee_id\n    \n as \n    \n    assignee_id\n    \n, \n    \n    \n    brand_id\n    \n as \n    \n    brand_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    forum_topic_id\n    \n as \n    \n    forum_topic_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    has_incidents\n    \n as \n    \n    has_incidents\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    merged_ticket_ids\n    \n as \n    \n    merged_ticket_ids\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    problem_id\n    \n as \n    \n    problem_id\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    requester_id\n    \n as \n    \n    requester_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    submitter_id\n    \n as \n    \n    submitter_id\n    \n, \n    cast(null as INT64) as \n    \n    system_ccs\n    \n , \n    \n    \n    system_client\n    \n as \n    \n    system_client\n    \n, \n    cast(null as string) as \n    \n    system_ip_address\n    \n , \n    cast(null as INT64) as \n    \n    system_json_email_identifier\n    \n , \n    cast(null as FLOAT64) as \n    \n    system_latitude\n    \n , \n    cast(null as string) as \n    \n    system_location\n    \n , \n    cast(null as FLOAT64) as \n    \n    system_longitude\n    \n , \n    cast(null as INT64) as \n    \n    system_machine_generated\n    \n , \n    cast(null as INT64) as \n    \n    system_message_id\n    \n , \n    cast(null as INT64) as \n    \n    system_raw_email_identifier\n    \n , \n    \n    \n    ticket_form_id\n    \n as \n    \n    ticket_form_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    via_channel\n    \n as \n    \n    via_channel\n    \n, \n    \n    \n    via_source_from_address\n    \n as \n    \n    via_source_from_address\n    \n, \n    \n    \n    via_source_from_id\n    \n as \n    \n    via_source_from_id\n    \n, \n    \n    \n    via_source_from_title\n    \n as \n    \n    via_source_from_title\n    \n, \n    \n    \n    via_source_rel\n    \n as \n    \n    via_source_rel\n    \n, \n    \n    \n    via_source_to_address\n    \n as \n    \n    via_source_to_address\n    \n, \n    \n    \n    via_source_to_name\n    \n as \n    \n    via_source_to_name\n    \n\n\n\n\n        \n, 'dbt-package-testing' || '.'|| 'zendesk_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_id,\n        _fivetran_synced,\n        _fivetran_deleted,\n        assignee_id,\n        brand_id,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        description,\n        due_at,\n        group_id,\n        external_id,\n        is_public,\n        organization_id,\n        priority,\n        recipient,\n        requester_id,\n        status,\n        subject,\n        problem_id,\n        submitter_id,\n        ticket_form_id,\n        type,\n        url,\n        via_channel as created_channel,\n        via_source_from_id as source_from_id,\n        via_source_from_title as source_from_title,\n        via_source_rel as source_rel,\n        via_source_to_address as source_to_address,\n        via_source_to_name as source_to_name,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ticket_id"], "time_spine": null}, "model.zendesk_source.stg_zendesk__daylight_time_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__daylight_time_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__daylight_time_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__daylight_time_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__daylight_time_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__daylight_time_tmp"], "alias": "stg_zendesk__daylight_time_tmp", "checksum": {"name": "sha256", "checksum": "b6c1a76fcadb15a05544da895c8fd2d907057dce952694a0de60e0a8501a7741"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.314, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time_tmp`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='daylight_time'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "daylight_time"], ["zendesk", "daylight_time"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.daylight_time"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__daylight_time_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `time_zone`,\n  `year`,\n  `_fivetran_synced`,\n  `daylight_end_utc`,\n  `daylight_offset`,\n  `daylight_start_utc`\n        from `dbt-package-testing`.`zendesk_tests`.`daylight_time_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__user_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__user_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__user_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__user_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__user_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__user_tmp"], "alias": "stg_zendesk__user_tmp", "checksum": {"name": "sha256", "checksum": "54dc4d3526b3a230d9ba5e8933934bf1052c28730eb4af30cd146b8466e45529"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.325071, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user_tmp`", "raw_code": "{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='user'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "user"], ["zendesk", "user"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.user"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__user_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    select\n            `id`,\n  `_fivetran_synced`,\n  `active`,\n  `alias`,\n  `authenticity_token`,\n  `chat_only`,\n  `created_at`,\n  `details`,\n  `email`,\n  `external_id`,\n  `last_login_at`,\n  `locale`,\n  `locale_id`,\n  `moderator`,\n  `name`,\n  `notes`,\n  `only_private_comments`,\n  `organization_id`,\n  `phone`,\n  `remote_photo_url`,\n  `restricted_agent`,\n  `role`,\n  `shared`,\n  `shared_agent`,\n  `signature`,\n  `suspended`,\n  `ticket_restriction`,\n  `time_zone`,\n  `two_factor_auth_enabled`,\n  `updated_at`,\n  `url`,\n  `verified`\n        from `dbt-package-testing`.`zendesk_tests`.`user_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__group_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__group_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__group_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__group_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__group_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__group_tmp"], "alias": "stg_zendesk__group_tmp", "checksum": {"name": "sha256", "checksum": "2d23defb793ae0d70c46a5a0a4d08fd5fe7c9634b60ddd1c17cb5f96d5428fc3"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.3285918, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__group_tmp`", "raw_code": "{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='group'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "group"], ["zendesk", "group"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.group"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__group_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    select\n            `id`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `created_at`,\n  `name`,\n  `updated_at`,\n  `url`\n        from `dbt-package-testing`.`zendesk_tests`.`group_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_tmp"], "alias": "stg_zendesk__ticket_tmp", "checksum": {"name": "sha256", "checksum": "81a6833edf343fa32aa78a3d4d4d15d8e86b1cdeb5804785fbc941a5b01853d7"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.332549, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_tmp`", "raw_code": "{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket"], ["zendesk", "ticket"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    select\n            `id`,\n  `_fivetran_synced`,\n  `allow_channelback`,\n  `assignee_id`,\n  `brand_id`,\n  `created_at`,\n  `description`,\n  `due_at`,\n  `external_id`,\n  `forum_topic_id`,\n  `group_id`,\n  `has_incidents`,\n  `is_public`,\n  `organization_id`,\n  `priority`,\n  `problem_id`,\n  `recipient`,\n  `requester_id`,\n  `status`,\n  `subject`,\n  `submitter_id`,\n  `system_client`,\n  `ticket_form_id`,\n  `type`,\n  `updated_at`,\n  `url`,\n  `via_channel`,\n  `via_source_from_id`,\n  `via_source_from_title`,\n  `via_source_rel`,\n  `via_source_to_address`,\n  `via_source_to_name`,\n  `merged_ticket_ids`,\n  `via_source_from_address`,\n  `followup_ids`,\n  `via_followup_source_id`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__brand_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__brand_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__brand_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__brand_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__brand_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__brand_tmp"], "alias": "stg_zendesk__brand_tmp", "checksum": {"name": "sha256", "checksum": "2aafad6a4854cda43bbae3f5293d3f3f75113dcc7cacec3e391453b97c2b9704"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.336235, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__brand_tmp`", "raw_code": "{{ config(enabled=var('using_brands', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='brand'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "brand"], ["zendesk", "brand"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.brand"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__brand_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n    select\n            `id`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `active`,\n  `brand_url`,\n  `default`,\n  `has_help_center`,\n  `help_center_state`,\n  `logo_content_type`,\n  `logo_content_url`,\n  `logo_deleted`,\n  `logo_file_name`,\n  `logo_height`,\n  `logo_id`,\n  `logo_inline`,\n  `logo_mapped_content_url`,\n  `logo_size`,\n  `logo_url`,\n  `logo_width`,\n  `name`,\n  `subdomain`,\n  `url`\n        from `dbt-package-testing`.`zendesk_tests`.`brand_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_tag_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_tag_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_tag_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_tag_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_tag_tmp"], "alias": "stg_zendesk__ticket_tag_tmp", "checksum": {"name": "sha256", "checksum": "fc31c812a4f38a50bdc49d69ce5de5142f759bc0b15fa2bbaf6c35ffec690c02"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.34034, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_tag_tmp`", "raw_code": "{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket_tag'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket_tag"], ["zendesk", "ticket_tag"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket_tag"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_tag_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    select\n            `tag`,\n  `ticket_id`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_tag_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__schedule_holiday_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__schedule_holiday_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__schedule_holiday_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__schedule_holiday_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__schedule_holiday_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__schedule_holiday_tmp"], "alias": "stg_zendesk__schedule_holiday_tmp", "checksum": {"name": "sha256", "checksum": "c0011686627cdbec351fae766522093c0bb03b81c5b293a05037179eb534e7b7"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.344309, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday_tmp`", "raw_code": "--To disable this model, set the using_schedules or using_holidays variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True) and var('using_holidays', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='schedule_holiday'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "schedule_holiday"], ["zendesk", "schedule_holiday"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.schedule_holiday"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__schedule_holiday_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules or using_holidays variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `id`,\n  `schedule_id`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `end_date`,\n  `name`,\n  `start_date`\n        from `dbt-package-testing`.`zendesk_tests`.`schedule_holiday_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__user_tag_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__user_tag_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__user_tag_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__user_tag_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__user_tag_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__user_tag_tmp"], "alias": "stg_zendesk__user_tag_tmp", "checksum": {"name": "sha256", "checksum": "90c1cec2640e197f160f3c6ac9d31e1f71d8bee7da688c59d4dc2b820f955b79"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.34931, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user_tag_tmp`", "raw_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_user_tags', True)) }}\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='user_tag'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "user_tag"], ["zendesk", "user_tag"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.user_tag"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__user_tag_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n    select\n            `tag`,\n  `user_id`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`zendesk_tests`.`user_tag_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_field_history_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_field_history_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_field_history_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_field_history_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_field_history_tmp"], "alias": "stg_zendesk__ticket_field_history_tmp", "checksum": {"name": "sha256", "checksum": "83e678e437914b144a3815997b12822908d1cfca770a4ba381d1f53883f62142"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.35341, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_field_history_tmp`", "raw_code": "{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket_field_history'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket_field_history"], ["zendesk", "ticket_field_history"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket_field_history"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_field_history_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    select\n            `field_name`,\n  `ticket_id`,\n  `updated`,\n  `_fivetran_synced`,\n  `user_id`,\n  `value`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_field_history_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_chat_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_chat_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_chat_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_chat_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_chat_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_chat_tmp"], "alias": "stg_zendesk__ticket_chat_tmp", "checksum": {"name": "sha256", "checksum": "798a684af1395c53647ea808da13444f1995a6027a6675a54902a06245c9f0e1"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.35695, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat_tmp`", "raw_code": "{{ config(enabled=var('using_ticket_chat', False)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket_chat'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket_chat"], ["zendesk", "ticket_chat"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket_chat"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_chat_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n    select\n            `chat_id`,\n  `_fivetran_synced`,\n  `authenticated`,\n  `backend`,\n  `channel`,\n  `conversation_id`,\n  `initiator`,\n  `integration_id`,\n  `tags`,\n  `ticket_id`,\n  `user_id`,\n  `visitor_id`,\n  `webpath`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_chat_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_form_history_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_form_history_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_form_history_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_form_history_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_form_history_tmp"], "alias": "stg_zendesk__ticket_form_history_tmp", "checksum": {"name": "sha256", "checksum": "d04762c2c84fa5debe0552fe9cc1e4f355a09ee3cfebf8ec9764fadfec3d6156"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.360569, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_form_history_tmp`", "raw_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_ticket_form_history', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket_form_history'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket_form_history"], ["zendesk", "ticket_form_history"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket_form_history"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_form_history_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `id`,\n  `updated_at`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `active`,\n  `created_at`,\n  `display_name`,\n  `end_user_visible`,\n  `name`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_form_history_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_comment_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_comment_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_comment_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_comment_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_comment_tmp"], "alias": "stg_zendesk__ticket_comment_tmp", "checksum": {"name": "sha256", "checksum": "738bb5a35e93f2b68f57812dba0f3ff35b8e7d186061da66f6a4c3f916d7190b"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}"}, "created_at": 1751990097.364241, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_comment_tmp`", "raw_code": "{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket_comment'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket_comment"], ["zendesk", "ticket_comment"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket_comment"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_comment_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    select\n            `id`,\n  `_fivetran_synced`,\n  `body`,\n  `created`,\n  `facebook_comment`,\n  `public`,\n  `ticket_id`,\n  `tweet`,\n  `user_id`,\n  `voice_comment`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_comment_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__organization_tag_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__organization_tag_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__organization_tag_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__organization_tag_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__organization_tag_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__organization_tag_tmp"], "alias": "stg_zendesk__organization_tag_tmp", "checksum": {"name": "sha256", "checksum": "80df1fbf49d4b6709c0b86561711b5a031deb6f2703b2efc6ca091e8c9244e7f"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.368267, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization_tag_tmp`", "raw_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_organization_tags', True) and var('using_organizations', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='organization_tag'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "organization_tag"], ["zendesk", "organization_tag"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.organization_tag"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__organization_tag_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `organization_id`,\n  `tag`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`zendesk_tests`.`organization_tag_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__audit_log_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__audit_log_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__audit_log_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__audit_log_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__audit_log_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__audit_log_tmp"], "alias": "stg_zendesk__audit_log_tmp", "checksum": {"name": "sha256", "checksum": "e266a3630dd9a6198bfd160fb8c25bf5ce1b89d45b7c379aad7b82f6e9b07585"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.372121, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__audit_log_tmp`", "raw_code": "{{ config(enabled=var('using_audit_log', False)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='audit_log'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "audit_log"], ["zendesk", "audit_log"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.audit_log"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__audit_log_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n    select\n            `id`,\n  `_fivetran_synced`,\n  `action`,\n  `actor_id`,\n  `change_description`,\n  `created_at`,\n  `source_id`,\n  `source_label`,\n  `source_type`\n        from `dbt-package-testing`.`zendesk_tests`.`audit_log_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__schedule_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__schedule_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__schedule_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__schedule_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__schedule_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__schedule_tmp"], "alias": "stg_zendesk__schedule_tmp", "checksum": {"name": "sha256", "checksum": "3ba82dbd3341d8d400542f2b5b35e5bf20837225443d6b60836037b0534d4eec"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.375797, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_tmp`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='schedule'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "schedule"], ["zendesk", "schedule"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.schedule"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__schedule_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `end_time`,\n  `id`,\n  `start_time`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `end_time_utc`,\n  `name`,\n  `start_time_utc`,\n  `time_zone`,\n  `created_at`\n        from `dbt-package-testing`.`zendesk_tests`.`schedule_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__organization_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__organization_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__organization_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__organization_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__organization_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__organization_tmp"], "alias": "stg_zendesk__organization_tmp", "checksum": {"name": "sha256", "checksum": "4405201e6ec767c6eb712bf87ec231f02fb984da054aef0bc7a4efd267a33658"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.3794591, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization_tmp`", "raw_code": "{{ config(enabled=var('using_organizations', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='organization'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "organization"], ["zendesk", "organization"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.organization"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__organization_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n    select\n            `id`,\n  `_fivetran_synced`,\n  `created_at`,\n  `details`,\n  `external_id`,\n  `group_id`,\n  `name`,\n  `notes`,\n  `shared_comments`,\n  `shared_tickets`,\n  `updated_at`,\n  `url`\n        from `dbt-package-testing`.`zendesk_tests`.`organization_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_schedule_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_schedule_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_schedule_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_schedule_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_schedule_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_schedule_tmp"], "alias": "stg_zendesk__ticket_schedule_tmp", "checksum": {"name": "sha256", "checksum": "e26098ade5648943f197a532ec7cb0bc09a04ac837a656d803cd45bc5e9c3c5b"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.3837, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_schedule_tmp`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket_schedule'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket_schedule"], ["zendesk", "ticket_schedule"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket_schedule"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_schedule_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `created_at`,\n  `ticket_id`,\n  `_fivetran_synced`,\n  `schedule_id`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_schedule_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__domain_name_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__domain_name_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__domain_name_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__domain_name_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__domain_name_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__domain_name_tmp"], "alias": "stg_zendesk__domain_name_tmp", "checksum": {"name": "sha256", "checksum": "046af7e647d6e7336c5080c8f5df1134f1106eb6c123d721c66d6fc6669d9c67"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.3873038, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__domain_name_tmp`", "raw_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_domain_names', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='domain_name'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "domain_name"], ["zendesk", "domain_name"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.domain_name"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__domain_name_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `index`,\n  `organization_id`,\n  `_fivetran_synced`,\n  `domain_name`\n        from `dbt-package-testing`.`zendesk_tests`.`domain_name_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__ticket_chat_event_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__ticket_chat_event_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__ticket_chat_event_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__ticket_chat_event_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__ticket_chat_event_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__ticket_chat_event_tmp"], "alias": "stg_zendesk__ticket_chat_event_tmp", "checksum": {"name": "sha256", "checksum": "39d8f90379942d4be9f372b1ee09d11eed61b1a48bab38a044869bf55c126118"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.390965, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat_event_tmp`", "raw_code": "{{ config(enabled=var('using_ticket_chat', False)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='ticket_chat_event'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "ticket_chat_event"], ["zendesk", "ticket_chat_event"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.ticket_chat_event"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__ticket_chat_event_tmp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n    select\n            `chat_id`,\n  `created_at`,\n  `_Company_synced`,\n  `actor_id`,\n  `chat_index`,\n  `external_message_id`,\n  `filename`,\n  `is_history_context`,\n  `message`,\n  `message_id`,\n  `message_source`,\n  `mime_type`,\n  `original_message`,\n  `original_message_type`,\n  `parent_message_id`,\n  `reason`,\n  `size`,\n  `status`,\n  `status_updated_at`,\n  `type`,\n  `url`\n        from `dbt-package-testing`.`zendesk_tests`.`ticket_chat_event_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.zendesk_source.stg_zendesk__time_zone_tmp": {"database": "dbt-package-testing", "schema": "zendesk_tests_zendesk_dev", "name": "stg_zendesk__time_zone_tmp", "resource_type": "model", "package_name": "zendesk_source", "path": "tmp/stg_zendesk__time_zone_tmp.sql", "original_file_path": "models/tmp/stg_zendesk__time_zone_tmp.sql", "unique_id": "model.zendesk_source.stg_zendesk__time_zone_tmp", "fqn": ["zendesk_source", "tmp", "stg_zendesk__time_zone_tmp"], "alias": "stg_zendesk__time_zone_tmp", "checksum": {"name": "sha256", "checksum": "113efdc3053bca15962b25a4312b745e4fa0c3b61b721afdadb2c0917e736f45"}, "config": {"enabled": true, "alias": null, "schema": "zendesk_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "zendesk_{{ var('directed_schema','dev') }}", "enabled": true}, "created_at": 1751990097.394665, "relation_name": "`dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone_tmp`", "raw_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_schedules', True)) }}\n\n{{\n    zendesk_source.union_zendesk_connections(\n        connection_dictionary=var('zendesk_sources'), \n        single_source_name='zendesk', \n        single_table_name='time_zone'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["zendesk", "time_zone"], ["zendesk", "time_zone"]], "metrics": [], "depends_on": {"macros": ["macro.zendesk_source.union_zendesk_connections"], "nodes": ["source.zendesk_source.zendesk.time_zone"]}, "compiled_path": "target/compiled/zendesk_source/models/tmp/stg_zendesk__time_zone_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n\n\n\n    select\n            `time_zone`,\n  `_fivetran_synced`,\n  `standard_offset`\n        from `dbt-package-testing`.`zendesk_tests`.`time_zone_data` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.zendesk.not_null_zendesk__ticket_enriched_ticket_id.e3efc5bf0a": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_zendesk__ticket_enriched_ticket_id", "resource_type": "test", "package_name": "zendesk", "path": "not_null_zendesk__ticket_enriched_ticket_id.sql", "original_file_path": "models/zendesk.yml", "unique_id": "test.zendesk.not_null_zendesk__ticket_enriched_ticket_id.e3efc5bf0a", "fqn": ["zendesk", "not_null_zendesk__ticket_enriched_ticket_id"], "alias": "not_null_zendesk__ticket_enriched_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.514328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk.zendesk__ticket_enriched"]}, "compiled_path": "target/compiled/zendesk/models/zendesk.yml/not_null_zendesk__ticket_enriched_ticket_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_enriched`\nwhere ticket_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ticket_id", "file_key_name": "models.zendesk__ticket_enriched", "attached_node": "model.zendesk.zendesk__ticket_enriched", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('zendesk__ticket_enriched')) }}"}, "namespace": null}}, "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_enriched_ticket_id__source_relation.be39bf8b5c": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_zendesk__ticket_enriched_ticket_id__source_relation", "resource_type": "test", "package_name": "zendesk", "path": "dbt_utils_unique_combination_o_18c1038f92ce0f007bc18bbec5ef155b.sql", "original_file_path": "models/zendesk.yml", "unique_id": "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_enriched_ticket_id__source_relation.be39bf8b5c", "fqn": ["zendesk", "dbt_utils_unique_combination_of_columns_zendesk__ticket_enriched_ticket_id__source_relation"], "alias": "dbt_utils_unique_combination_o_18c1038f92ce0f007bc18bbec5ef155b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_18c1038f92ce0f007bc18bbec5ef155b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_18c1038f92ce0f007bc18bbec5ef155b"}, "created_at": 1751990097.515559, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_18c1038f92ce0f007bc18bbec5ef155b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk.zendesk__ticket_enriched"]}, "compiled_path": "target/compiled/zendesk/models/zendesk.yml/dbt_utils_unique_combination_o_18c1038f92ce0f007bc18bbec5ef155b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ticket_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_enriched`\n    group by ticket_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.zendesk__ticket_enriched", "attached_node": "model.zendesk.zendesk__ticket_enriched", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ticket_id", "source_relation"], "model": "{{ get_where_subquery(ref('zendesk__ticket_enriched')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__sla_policies_sla_event_id__source_relation.5f9ad499dc": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_zendesk__sla_policies_sla_event_id__source_relation", "resource_type": "test", "package_name": "zendesk", "path": "dbt_utils_unique_combination_o_4487220cac0b6fdbab2173fc923b764d.sql", "original_file_path": "models/zendesk.yml", "unique_id": "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__sla_policies_sla_event_id__source_relation.5f9ad499dc", "fqn": ["zendesk", "dbt_utils_unique_combination_of_columns_zendesk__sla_policies_sla_event_id__source_relation"], "alias": "dbt_utils_unique_combination_o_4487220cac0b6fdbab2173fc923b764d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4487220cac0b6fdbab2173fc923b764d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4487220cac0b6fdbab2173fc923b764d"}, "created_at": 1751990097.529133, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4487220cac0b6fdbab2173fc923b764d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__sla_policies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk.zendesk__sla_policies"]}, "compiled_path": "target/compiled/zendesk/models/zendesk.yml/dbt_utils_unique_combination_o_4487220cac0b6fdbab2173fc923b764d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sla_event_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__sla_policies`\n    group by sla_event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.zendesk__sla_policies", "attached_node": "model.zendesk.zendesk__sla_policies", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sla_event_id", "source_relation"], "model": "{{ get_where_subquery(ref('zendesk__sla_policies')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk.not_null_zendesk__ticket_metrics_ticket_id.3466b76bbd": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_zendesk__ticket_metrics_ticket_id", "resource_type": "test", "package_name": "zendesk", "path": "not_null_zendesk__ticket_metrics_ticket_id.sql", "original_file_path": "models/zendesk.yml", "unique_id": "test.zendesk.not_null_zendesk__ticket_metrics_ticket_id.3466b76bbd", "fqn": ["zendesk", "not_null_zendesk__ticket_metrics_ticket_id"], "alias": "not_null_zendesk__ticket_metrics_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.5314019, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk.zendesk__ticket_metrics"]}, "compiled_path": "target/compiled/zendesk/models/zendesk.yml/not_null_zendesk__ticket_metrics_ticket_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_metrics`\nwhere ticket_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ticket_id", "file_key_name": "models.zendesk__ticket_metrics", "attached_node": "model.zendesk.zendesk__ticket_metrics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('zendesk__ticket_metrics')) }}"}, "namespace": null}}, "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_metrics_ticket_id__source_relation.6288a95671": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_zendesk__ticket_metrics_ticket_id__source_relation", "resource_type": "test", "package_name": "zendesk", "path": "dbt_utils_unique_combination_o_68958a6e7b37cbbc15d457419fc8325c.sql", "original_file_path": "models/zendesk.yml", "unique_id": "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_metrics_ticket_id__source_relation.6288a95671", "fqn": ["zendesk", "dbt_utils_unique_combination_of_columns_zendesk__ticket_metrics_ticket_id__source_relation"], "alias": "dbt_utils_unique_combination_o_68958a6e7b37cbbc15d457419fc8325c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_68958a6e7b37cbbc15d457419fc8325c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_68958a6e7b37cbbc15d457419fc8325c"}, "created_at": 1751990097.532363, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_68958a6e7b37cbbc15d457419fc8325c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk.zendesk__ticket_metrics"]}, "compiled_path": "target/compiled/zendesk/models/zendesk.yml/dbt_utils_unique_combination_o_68958a6e7b37cbbc15d457419fc8325c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ticket_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`zendesk__ticket_metrics`\n    group by ticket_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.zendesk__ticket_metrics", "attached_node": "model.zendesk.zendesk__ticket_metrics", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ticket_id", "source_relation"], "model": "{{ get_where_subquery(ref('zendesk__ticket_metrics')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__ticket_ticket_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__ticket_ticket_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981", "fqn": ["zendesk_source", "not_null_stg_zendesk__ticket_ticket_id"], "alias": "not_null_stg_zendesk__ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.664415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__ticket"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__ticket_ticket_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\nwhere ticket_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ticket_id", "file_key_name": "models.stg_zendesk__ticket", "attached_node": "model.zendesk_source.stg_zendesk__ticket", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('stg_zendesk__ticket')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_ticket_id__source_relation.75067aca7d": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_ticket_id__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_07d370bcb1f39f2d000068651e2e570f.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_ticket_id__source_relation.75067aca7d", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_ticket_id__source_relation"], "alias": "dbt_utils_unique_combination_o_07d370bcb1f39f2d000068651e2e570f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_07d370bcb1f39f2d000068651e2e570f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_07d370bcb1f39f2d000068651e2e570f"}, "created_at": 1751990097.6653922, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_07d370bcb1f39f2d000068651e2e570f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__ticket"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_07d370bcb1f39f2d000068651e2e570f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ticket_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket`\n    group by ticket_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__ticket", "attached_node": "model.zendesk_source.stg_zendesk__ticket", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ticket_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__ticket')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__brand_brand_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__brand_brand_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741", "fqn": ["zendesk_source", "not_null_stg_zendesk__brand_brand_id"], "alias": "not_null_stg_zendesk__brand_brand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.667789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__brand", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__brand"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__brand_brand_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect brand_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__brand`\nwhere brand_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "brand_id", "file_key_name": "models.stg_zendesk__brand", "attached_node": "model.zendesk_source.stg_zendesk__brand", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_id", "model": "{{ get_where_subquery(ref('stg_zendesk__brand')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__brand_brand_id__source_relation.1d4af19ac3": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__brand_brand_id__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_628740d515b197fdddbffffad71887ff.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__brand_brand_id__source_relation.1d4af19ac3", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__brand_brand_id__source_relation"], "alias": "dbt_utils_unique_combination_o_628740d515b197fdddbffffad71887ff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_628740d515b197fdddbffffad71887ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_628740d515b197fdddbffffad71887ff"}, "created_at": 1751990097.6687849, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_628740d515b197fdddbffffad71887ff\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__brand", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__brand"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_628740d515b197fdddbffffad71887ff.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        brand_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__brand`\n    group by brand_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__brand", "attached_node": "model.zendesk_source.stg_zendesk__brand", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["brand_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__brand')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__domain_name_organization_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__domain_name_organization_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3", "fqn": ["zendesk_source", "not_null_stg_zendesk__domain_name_organization_id"], "alias": "not_null_stg_zendesk__domain_name_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.671647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__domain_name", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__domain_name"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__domain_name_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__domain_name`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_zendesk__domain_name", "attached_node": "model.zendesk_source.stg_zendesk__domain_name", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_zendesk__domain_name')) }}"}, "namespace": null}}, "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__group_group_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__group_group_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec", "fqn": ["zendesk_source", "not_null_stg_zendesk__group_group_id"], "alias": "not_null_stg_zendesk__group_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.6724741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__group"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__group_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect group_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__group`\nwhere group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "group_id", "file_key_name": "models.stg_zendesk__group", "attached_node": "model.zendesk_source.stg_zendesk__group", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "group_id", "model": "{{ get_where_subquery(ref('stg_zendesk__group')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__group_group_id__source_relation.5c96f83c83": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__group_group_id__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_e0f429c90093862d9da7d761d1348998.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__group_group_id__source_relation.5c96f83c83", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__group_group_id__source_relation"], "alias": "dbt_utils_unique_combination_o_e0f429c90093862d9da7d761d1348998", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e0f429c90093862d9da7d761d1348998", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e0f429c90093862d9da7d761d1348998"}, "created_at": 1751990097.6732988, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e0f429c90093862d9da7d761d1348998\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__group"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_e0f429c90093862d9da7d761d1348998.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        group_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__group`\n    group by group_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__group", "attached_node": "model.zendesk_source.stg_zendesk__group", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["group_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__group')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__organization_organization_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__organization_organization_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a", "fqn": ["zendesk_source", "not_null_stg_zendesk__organization_organization_id"], "alias": "not_null_stg_zendesk__organization_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.6756349, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__organization"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__organization_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_zendesk__organization", "attached_node": "model.zendesk_source.stg_zendesk__organization", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_zendesk__organization')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__organization_organization_id__source_relation.e8b3d0c0b4": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__organization_organization_id__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_960be262632a9d3fc51f097b2f2eaf93.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__organization_organization_id__source_relation.e8b3d0c0b4", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__organization_organization_id__source_relation"], "alias": "dbt_utils_unique_combination_o_960be262632a9d3fc51f097b2f2eaf93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_960be262632a9d3fc51f097b2f2eaf93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_960be262632a9d3fc51f097b2f2eaf93"}, "created_at": 1751990097.676468, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_960be262632a9d3fc51f097b2f2eaf93\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__organization"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_960be262632a9d3fc51f097b2f2eaf93.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__organization`\n    group by organization_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__organization", "attached_node": "model.zendesk_source.stg_zendesk__organization", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__organization')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__ticket_comment_ticket_comment_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__ticket_comment_ticket_comment_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606", "fqn": ["zendesk_source", "not_null_stg_zendesk__ticket_comment_ticket_comment_id"], "alias": "not_null_stg_zendesk__ticket_comment_ticket_comment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.67902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_comment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_comment"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__ticket_comment_ticket_comment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_comment_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_comment`\nwhere ticket_comment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ticket_comment_id", "file_key_name": "models.stg_zendesk__ticket_comment", "attached_node": "model.zendesk_source.stg_zendesk__ticket_comment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_comment_id", "model": "{{ get_where_subquery(ref('stg_zendesk__ticket_comment')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_comment_ticket_comment_id__source_relation.9e0ed5e891": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_comment_ticket_comment_id__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_97e2f14c950ec71a5bc4b2f2dbf6be9c.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_comment_ticket_comment_id__source_relation.9e0ed5e891", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_comment_ticket_comment_id__source_relation"], "alias": "dbt_utils_unique_combination_o_97e2f14c950ec71a5bc4b2f2dbf6be9c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_97e2f14c950ec71a5bc4b2f2dbf6be9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_97e2f14c950ec71a5bc4b2f2dbf6be9c"}, "created_at": 1751990097.680019, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_97e2f14c950ec71a5bc4b2f2dbf6be9c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_comment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_comment"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_97e2f14c950ec71a5bc4b2f2dbf6be9c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ticket_comment_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_comment`\n    group by ticket_comment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__ticket_comment", "attached_node": "model.zendesk_source.stg_zendesk__ticket_comment", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ticket_comment_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__ticket_comment')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__user_user_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__user_user_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926", "fqn": ["zendesk_source", "not_null_stg_zendesk__user_user_id"], "alias": "not_null_stg_zendesk__user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.68283, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__user"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__user_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__user`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_id", "file_key_name": "models.stg_zendesk__user", "attached_node": "model.zendesk_source.stg_zendesk__user", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_zendesk__user')) }}"}, "namespace": null}}, "test.zendesk_source.not_null_stg_zendesk__schedule_schedule_id.fd74fb065d": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__schedule_schedule_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__schedule_schedule_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__schedule_schedule_id.fd74fb065d", "fqn": ["zendesk_source", "not_null_stg_zendesk__schedule_schedule_id"], "alias": "not_null_stg_zendesk__schedule_schedule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.683696, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__schedule"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__schedule_schedule_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect schedule_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule`\nwhere schedule_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "schedule_id", "file_key_name": "models.stg_zendesk__schedule", "attached_node": "model.zendesk_source.stg_zendesk__schedule", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "schedule_id", "model": "{{ get_where_subquery(ref('stg_zendesk__schedule')) }}"}, "namespace": null}}, "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__ticket_form_history_ticket_form_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__ticket_form_history_ticket_form_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17", "fqn": ["zendesk_source", "not_null_stg_zendesk__ticket_form_history_ticket_form_id"], "alias": "not_null_stg_zendesk__ticket_form_history_ticket_form_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.684512, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_form_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_form_history"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__ticket_form_history_ticket_form_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_form_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_form_history`\nwhere ticket_form_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ticket_form_id", "file_key_name": "models.stg_zendesk__ticket_form_history", "attached_node": "model.zendesk_source.stg_zendesk__ticket_form_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_form_id", "model": "{{ get_where_subquery(ref('stg_zendesk__ticket_form_history')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year__source_relation.0621b61b9b": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_5380fd8c5e79118623b819c222415055.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year__source_relation.0621b61b9b", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year__source_relation"], "alias": "dbt_utils_unique_combination_o_5380fd8c5e79118623b819c222415055", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5380fd8c5e79118623b819c222415055", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5380fd8c5e79118623b819c222415055"}, "created_at": 1751990097.68543, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5380fd8c5e79118623b819c222415055\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__daylight_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__daylight_time"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_5380fd8c5e79118623b819c222415055.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        time_zone, year, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__daylight_time`\n    group by time_zone, year, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__daylight_time", "attached_node": "model.zendesk_source.stg_zendesk__daylight_time", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["time_zone", "year", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__daylight_time')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__time_zone_time_zone.b25b3452b1": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__time_zone_time_zone", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__time_zone_time_zone.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__time_zone_time_zone.b25b3452b1", "fqn": ["zendesk_source", "not_null_stg_zendesk__time_zone_time_zone"], "alias": "not_null_stg_zendesk__time_zone_time_zone", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.687755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__time_zone", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__time_zone"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__time_zone_time_zone.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_zone\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`\nwhere time_zone is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_zone", "file_key_name": "models.stg_zendesk__time_zone", "attached_node": "model.zendesk_source.stg_zendesk__time_zone", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_zone", "model": "{{ get_where_subquery(ref('stg_zendesk__time_zone')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__time_zone_time_zone__source_relation.16bb413a39": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__time_zone_time_zone__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_7dd447030d3905620797d17417d3b613.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__time_zone_time_zone__source_relation.16bb413a39", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__time_zone_time_zone__source_relation"], "alias": "dbt_utils_unique_combination_o_7dd447030d3905620797d17417d3b613", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7dd447030d3905620797d17417d3b613", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7dd447030d3905620797d17417d3b613"}, "created_at": 1751990097.688788, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7dd447030d3905620797d17417d3b613\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__time_zone", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__time_zone"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_7dd447030d3905620797d17417d3b613.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        time_zone, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__time_zone`\n    group by time_zone, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__time_zone", "attached_node": "model.zendesk_source.stg_zendesk__time_zone", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["time_zone", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__time_zone')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.not_null_stg_zendesk__schedule_holiday_holiday_id.52eb08f782": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "not_null_stg_zendesk__schedule_holiday_holiday_id", "resource_type": "test", "package_name": "zendesk_source", "path": "not_null_stg_zendesk__schedule_holiday_holiday_id.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.not_null_stg_zendesk__schedule_holiday_holiday_id.52eb08f782", "fqn": ["zendesk_source", "not_null_stg_zendesk__schedule_holiday_holiday_id"], "alias": "not_null_stg_zendesk__schedule_holiday_holiday_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1751990097.6911821, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__schedule_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__schedule_holiday"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/not_null_stg_zendesk__schedule_holiday_holiday_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect holiday_id\nfrom `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday`\nwhere holiday_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "holiday_id", "file_key_name": "models.stg_zendesk__schedule_holiday", "attached_node": "model.zendesk_source.stg_zendesk__schedule_holiday", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "holiday_id", "model": "{{ get_where_subquery(ref('stg_zendesk__schedule_holiday')) }}"}, "namespace": null}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__schedule_holiday_holiday_id__source_relation.74b720785d": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__schedule_holiday_holiday_id__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_d9892f05693409100d4104e960847c80.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__schedule_holiday_holiday_id__source_relation.74b720785d", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__schedule_holiday_holiday_id__source_relation"], "alias": "dbt_utils_unique_combination_o_d9892f05693409100d4104e960847c80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d9892f05693409100d4104e960847c80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d9892f05693409100d4104e960847c80"}, "created_at": 1751990097.6921659, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d9892f05693409100d4104e960847c80\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__schedule_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__schedule_holiday"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_d9892f05693409100d4104e960847c80.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        holiday_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__schedule_holiday`\n    group by holiday_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__schedule_holiday", "attached_node": "model.zendesk_source.stg_zendesk__schedule_holiday", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["holiday_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__schedule_holiday')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_chat_id__source_relation.67284fc71a": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_chat_id__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_a949b037fe3b16d0a4529a90edbc491b.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_chat_id__source_relation.67284fc71a", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_chat_id__source_relation"], "alias": "dbt_utils_unique_combination_o_a949b037fe3b16d0a4529a90edbc491b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a949b037fe3b16d0a4529a90edbc491b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a949b037fe3b16d0a4529a90edbc491b"}, "created_at": 1751990097.6944032, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a949b037fe3b16d0a4529a90edbc491b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_chat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_chat"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_a949b037fe3b16d0a4529a90edbc491b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        chat_id, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat`\n    group by chat_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__ticket_chat", "attached_node": "model.zendesk_source.stg_zendesk__ticket_chat", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["chat_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__ticket_chat')) }}"}, "namespace": "dbt_utils"}}, "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_event_chat_id__created_at__source_relation.3f64974f71": {"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_event_chat_id__created_at__source_relation", "resource_type": "test", "package_name": "zendesk_source", "path": "dbt_utils_unique_combination_o_941631755ad4e9a478f58b979193e93c.sql", "original_file_path": "models/stg_zendesk.yml", "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_event_chat_id__created_at__source_relation.3f64974f71", "fqn": ["zendesk_source", "dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_event_chat_id__created_at__source_relation"], "alias": "dbt_utils_unique_combination_o_941631755ad4e9a478f58b979193e93c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_941631755ad4e9a478f58b979193e93c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_941631755ad4e9a478f58b979193e93c"}, "created_at": 1751990097.6966841, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_941631755ad4e9a478f58b979193e93c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_chat_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.zendesk_source.stg_zendesk__ticket_chat_event"]}, "compiled_path": "target/compiled/zendesk_source/models/stg_zendesk.yml/dbt_utils_unique_combination_o_941631755ad4e9a478f58b979193e93c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        chat_id, created_at, source_relation\n    from `dbt-package-testing`.`zendesk_tests_zendesk_dev`.`stg_zendesk__ticket_chat_event`\n    group by chat_id, created_at, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_zendesk__ticket_chat_event", "attached_node": "model.zendesk_source.stg_zendesk__ticket_chat_event", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["chat_id", "created_at", "source_relation"], "model": "{{ get_where_subquery(ref('stg_zendesk__ticket_chat_event')) }}"}, "namespace": "dbt_utils"}}}, "sources": {"source.zendesk_source.zendesk.audit_log": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "audit_log", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.audit_log", "fqn": ["zendesk_source", "zendesk", "audit_log"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "audit_log_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "The `audit_log` table captures historical changes and actions within Zendesk. It provides a record of modifications  made to tickets, schedules, and other objects, allowing for a detailed audit trail. Each row represents an action  performed by an actor, including the time of the action, the affected entity, and a description of the changes. This  table is especially useful for tracking schedule modifications and maintaining a history of schedule changes.\n", "columns": {"id": {"name": "id", "description": "The unique identifier for each audit log entry, representing a distinct action or change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "action": {"name": "action", "description": "Describes the specific action performed within Zendesk, such as ticket updates or schedule modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "actor_id": {"name": "actor_id", "description": "The unique identifier of the user or system responsible for performing the action.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "change_description": {"name": "change_description", "description": "A detailed description of the changes made during the action, capturing what was altered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The timestamp indicating when the action was performed and recorded in the audit log.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_id": {"name": "source_id", "description": "The unique identifier of the entity affected by the action, such as a ticket or schedule.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_label": {"name": "source_label", "description": "A label that provides additional context about the affected entity, typically related to its type or name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_type": {"name": "source_type", "description": "Specifies the type of entity impacted by the action, such as a ticket, schedule, or user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`audit_log_data`", "created_at": 1751990097.77564, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket", "fqn": ["zendesk_source", "zendesk", "ticket"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Tickets are the means through which your end users (customers) communicate with agents in Zendesk Support. Tickets can  originate from a number of channels, including email, Help Center, chat, phone call, Twitter, Facebook, or the API.\n", "columns": {"id": {"name": "id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "via_channel": {"name": "via_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "via_source_from_id": {"name": "via_source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "via_source_from_title": {"name": "via_source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "via_source_rel": {"name": "via_source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "via_source_to_address": {"name": "via_source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "via_source_to_name": {"name": "via_source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "problem_id": {"name": "problem_id", "description": "For tickets of type \"incident\", the ID of the problem the incident is linked to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "An id you can use to link Zendesk Support tickets to local records.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_data`", "created_at": 1751990097.7766368, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.brand": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "brand", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.brand", "fqn": ["zendesk_source", "zendesk", "brand"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "brand_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Brands are your customer-facing identities. They might represent multiple products or services, or they  might literally be multiple brands owned and represented by your company.\n", "columns": {"id": {"name": "id", "description": "The ID automatically assigned when the brand is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_url": {"name": "brand_url", "description": "The url of the brand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the brand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subdomain": {"name": "subdomain", "description": "The subdomain of the brand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "active": {"name": "active", "description": "If the brand is set as active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`brand_data`", "created_at": 1751990097.776906, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.domain_name": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "domain_name", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.domain_name", "fqn": ["zendesk_source", "zendesk", "domain_name"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "domain_name_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Domain names associated with an organization. An organization may have multiple domain names.", "columns": {"organization_id": {"name": "organization_id", "description": "Reference to the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "domain_name": {"name": "domain_name", "description": "The name of the domain associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "index": {"name": "index", "description": "Index number of the domain name associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`domain_name_data`", "created_at": 1751990097.777162, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.group": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "group", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.group", "fqn": ["zendesk_source", "zendesk", "group"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "group_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "When support requests arrive in Zendesk Support, they can be assigned to a Group. Groups serve as the core element of ticket workflow; support agents are organized into Groups and tickets can be assigned to a Group only, or to an assigned agent within a Group. A ticket can never be assigned to an agent without also being assigned to a Group.\n", "columns": {"id": {"name": "id", "description": "Automatically assigned when creating groups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`group_data`", "created_at": 1751990097.777328, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.organization_tag": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "organization_tag", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.organization_tag", "fqn": ["zendesk_source", "zendesk", "organization_tag"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "organization_tag_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The tags associated with an organization. An organization may have multiple tags.", "columns": {"organization_id": {"name": "organization_id", "description": "Reference to the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tag": {"name": "tag", "description": "Tag associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`organization_tag_data`", "created_at": 1751990097.777573, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.organization": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "organization", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.organization", "fqn": ["zendesk_source", "zendesk", "organization"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "organization_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Just as agents can be segmented into groups in Zendesk Support, your customers (end-users) can be segmented into organizations. You can manually assign customers to an organization or automatically assign them to an organization by their email address domain. Organizations can be used in business rules to route tickets to groups of agents or to send email notifications.\n", "columns": {"id": {"name": "id", "description": "Automatically assigned when the organization is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "A unique name for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "details": {"name": "details", "description": "Any details obout the organization, such as the address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "The API url of this organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "A unique external id to associate organizations to an external record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the organization was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The time of the last update of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "domain_names": {"name": "domain_names", "description": "An array of domain names associated with this organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "notes": {"name": "notes", "description": "Any notes you have about the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_id": {"name": "group_id", "description": "New tickets from users in this organization are automatically put in this group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shared_tickets": {"name": "shared_tickets", "description": "End users in this organization are able to see each other's tickets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shared_comments": {"name": "shared_comments", "description": "End users in this organization are able to see each other's comments on tickets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tags": {"name": "tags", "description": "The tags of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_fields": {"name": "organization_fields", "description": "Custom fields for this organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`organization_data`", "created_at": 1751990097.7778182, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket_comment": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_comment", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket_comment", "fqn": ["zendesk_source", "zendesk", "ticket_comment"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_comment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Ticket comments represent the conversation between requesters, collaborators, and agents. Comments can be public or private.", "columns": {"id": {"name": "id", "description": "Automatically assigned when the comment is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "body": {"name": "body", "description": "The comment string", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created": {"name": "created", "description": "The time the comment was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "public": {"name": "public", "description": "Boolean field indicating if the comment is public (true), or if it is an internal note (false)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "The ticket id associated with this comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "The id of the comment author", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "facebook_comment": {"name": "facebook_comment", "description": "Boolean field indicating if the comment is a facebook comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet": {"name": "tweet", "description": "Boolean field indicating if the comment is a twitter tweet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "voice_comment": {"name": "voice_comment", "description": "Boolean field indicating if the comment is a voice comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_comment_data`", "created_at": 1751990097.778081, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.user_tag": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "user_tag", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.user_tag", "fqn": ["zendesk_source", "zendesk", "user_tag"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "user_tag_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all tags associated with a user. Only present if your account has user tagging enabled.", "columns": {"user_id": {"name": "user_id", "description": "Reference to the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tag": {"name": "tag", "description": "Tag associated with the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`user_tag_data`", "created_at": 1751990097.778324, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.user": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "user", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.user", "fqn": ["zendesk_source", "zendesk", "user"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "user_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Zendesk Support has three types of users, end-users (your customers), agents, and administrators.", "columns": {"id": {"name": "id", "description": "Automatically assigned when the user is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "email": {"name": "email", "description": "The user's primary email address. *Writeable on create only. On update, a secondary email is added. See Email Address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The user's name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "active": {"name": "active", "description": "false if the user has been deleted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the user was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "organization_id": {"name": "organization_id", "description": "The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "User's phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "role": {"name": "role", "description": "The user's role. Possible values are \"end-user\", \"agent\", or \"admin\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_zone": {"name": "time_zone", "description": "The user's time zone. See Time Zone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_restriction": {"name": "ticket_restriction", "description": "Specifies which tickets the user has access to. Possible values are organization, groups, assigned, requested and null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "suspended": {"name": "suspended", "description": "Boolean representing whether the user has been suspended, meaning that they can no longer sign in and any new support requests you receive from them are sent to the suspended tickets queue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_id": {"name": "external_id", "description": "A unique identifier from another system. The API treats the id as case insensitive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The time the user was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_login_at": {"name": "last_login_at", "description": "Last time the user signed in to Zendesk Support or made an API request using an API token or basic authentication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "locale": {"name": "locale", "description": "The user's locale. A BCP-47 compliant tag for the locale. If both \"locale\" and \"locale_id\" are present on create or update, \"locale_id\" is ignored and only \"locale\" is used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`user_data`", "created_at": 1751990097.77852, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.schedule": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "schedule", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.schedule", "fqn": ["zendesk_source", "zendesk", "schedule"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "schedule_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "The support schedules created with different business hours and holidays.", "columns": {"id": {"name": "id", "description": "ID automatically assigned to the schedule upon creation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the schedule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Time the schedule was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_time": {"name": "start_time", "description": "Start time of the schedule, in the schedule's time zone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_time": {"name": "end_time", "description": "End time of the schedule, in the schedule's time zone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_zone": {"name": "time_zone", "description": "Timezone in which the schedule operates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`schedule_data`", "created_at": 1751990097.778689, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket_schedule": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_schedule", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket_schedule", "fqn": ["zendesk_source", "zendesk", "ticket_schedule"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_schedule_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "The schedules applied to tickets through a trigger.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket assigned to the schedule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the schedule was assigned to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "schedule_id": {"name": "schedule_id", "description": "The ID of the schedule applied to the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_schedule_data`", "created_at": 1751990097.77885, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket_form_history": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_form_history", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket_form_history", "fqn": ["zendesk_source", "zendesk", "ticket_form_history"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_form_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Ticket forms allow an admin to define a subset of ticket fields for display to both agents and end users.", "columns": {"id": {"name": "id", "description": "Automatically assigned when creating ticket form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The time the ticket form was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The time of the last update of the ticket form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "display_name": {"name": "display_name", "description": "The name of the form that is displayed to an end user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "active": {"name": "active", "description": "If the form is set as active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_form_history_data`", "created_at": 1751990097.7791018, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket_tag": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_tag", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket_tag", "fqn": ["zendesk_source", "zendesk", "ticket_tag"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_tag_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Tags are words, or combinations of words, you can use to add more context to tickets. The table lists all tags currently associated with a ticket.\n", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the tag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tags": {"name": "tags", "description": "The tag, or word(s), associated with the ticket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_tag_data`", "created_at": 1751990097.7792609, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket_field_history": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_field_history", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket_field_history", "fqn": ["zendesk_source", "zendesk", "ticket_field_history"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_field_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "All fields and field values associated with tickets.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "field_name": {"name": "field_name", "description": "The name of the ticket field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated": {"name": "updated", "description": "The time the ticket field value was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "value": {"name": "value", "description": "The value of the field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "The id of the user who made the update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_field_history_data`", "created_at": 1751990097.779444, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.daylight_time": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "daylight_time", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.daylight_time", "fqn": ["zendesk_source", "zendesk", "daylight_time"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "daylight_time_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Appropriate offsets (from UTC) for timezones that engage or have engaged with Daylight Savings at some point since 1970.\n", "columns": {"daylight_end_utc": {"name": "daylight_end_utc", "description": "UTC timestamp of when Daylight Time ended in this year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daylight_offset": {"name": "daylight_offset", "description": "Number of **hours** added during Daylight Savings Time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daylight_start_utc": {"name": "daylight_start_utc", "description": "UTC timestamp of when Daylight Time began in this year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_zone": {"name": "time_zone", "description": "Name of the timezone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "year": {"name": "year", "description": "Year in which daylight savings occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`daylight_time_data`", "created_at": 1751990097.779607, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.time_zone": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "time_zone", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.time_zone", "fqn": ["zendesk_source", "zendesk", "time_zone"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "time_zone_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Offsets (from UTC) for each timezone.", "columns": {"time_zone": {"name": "time_zone", "description": "Name of the time zone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "standard_offset": {"name": "standard_offset", "description": "Standard offset of the timezone (non-daylight savings hours). In `+/-hh:mm` format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`time_zone_data`", "created_at": 1751990097.779766, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.schedule_holiday": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "schedule_holiday", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.schedule_holiday", "fqn": ["zendesk_source", "zendesk", "schedule_holiday"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "schedule_holiday_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Information about holidays for each specified schedule.", "columns": {"end_date": {"name": "end_date", "description": "ISO 8601 representation of the holiday end date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "The ID of the scheduled holiday.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the holiday.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "schedule_id": {"name": "schedule_id", "description": "The ID of the schedule.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_date": {"name": "start_date", "description": "ISO 8601 representation of the holiday start date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`schedule_holiday_data`", "created_at": 1751990097.779932, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket_chat": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_chat", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket_chat", "fqn": ["zendesk_source", "zendesk", "ticket_chat"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_chat_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Information about ticket chat conversations.", "columns": {"chat_id": {"name": "chat_id", "description": "Unique ID of the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "authenticated": {"name": "authenticated", "description": "Boolean indicating whether the user has been given access to restricted Help Center content and authenticated Chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "backend": {"name": "backend", "description": "Indicates the underlying system or technology that is processing and managing the chat session associated with a ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "channel": {"name": "channel", "description": "The channel the conversation was created from. Likely `native_messaging` or `chat`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversation_id": {"name": "conversation_id", "description": "ID of the conversation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "integration_id": {"name": "integration_id", "description": "Identifier for the specific integration that created or is associated with the chat ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tags": {"name": "tags", "description": "JSON list of tags placed on the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ticket_id": {"name": "ticket_id", "description": "ID of the associated ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "ID of the customer user who initiated the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "visitor_id": {"name": "visitor_id", "description": "Uniquely identify a visitor who is engaged in a chat session. This ID is typically assigned when a visitor starts a chat session on a platform integrated with Zendesk Chat.  It helps track the visitor's interactions across different chat sessions and can be used to re-associate returning visits or sessions with the same visitor.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "webpath": {"name": "webpath", "description": "JSON list of pages the customer navigated to during the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_chat_data`", "created_at": 1751990097.780113, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}, "source.zendesk_source.zendesk.ticket_chat_event": {"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "ticket_chat_event", "resource_type": "source", "package_name": "zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "unique_id": "source.zendesk_source.zendesk.ticket_chat_event", "fqn": ["zendesk_source", "zendesk", "ticket_chat_event"], "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_chat_event_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "loaded_at_query": null, "freshness": null, "external": null, "description": "Information about chat and messaging events on tickets.", "columns": {"chat_id": {"name": "chat_id", "description": "The ID of the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp of the chat event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp when the record was last synchronized by Fivetran, used to track data freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "actor_id": {"name": "actor_id", "description": "Zendesk user id for the user or system that triggered the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "chat_index": {"name": "chat_index", "description": "Index of the chat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "external_message_id": {"name": "external_message_id", "description": "External identifier of the chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "filename": {"name": "filename", "description": "Name of an attached file for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_history_context": {"name": "is_history_context", "description": "Boolean that signifies whether a specific chat event is part of the historical context being constructed within the table. This implies that the event is being recorded as a  part of the historical data collection process, where previous interactions or statuses are captured to provide a complete view of changes over time.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "message": {"name": "message", "description": "Body of the chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "message_id": {"name": "message_id", "description": "id of the chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "message_source": {"name": "message_source", "description": "Where the message originated from (e.g. `NATIVE_MESSAGING`)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mime_type": {"name": "mime_type", "description": "MIME type of the document for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_message": {"name": "original_message", "description": "JSON storing information about the message event object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_message_type": {"name": "original_message_type", "description": "Type of message. Including but not limited to - `file`, `text`, `form_response`, `form`, and `image`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "parent_message_id": {"name": "parent_message_id", "description": "id of the parent chat message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reason": {"name": "reason", "description": "The underlying cause or justification for a specific event (such as the session ending) within the chat.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "size": {"name": "size", "description": "Size of an attached file for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "Status of the chat - including but not limited to `READ`, `SEND_SUCCESS`, and `DELIVERY_SUCCESS`. Populated for `ChatMessageStatus` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status_updated_at": {"name": "status_updated_at", "description": "Timestamp at which the status was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "Type of chat event. Including but not limited to - `ChatMessage`, `ChatJoin`, `ChatLeave`, `ChatMessageStatus`, `ChatFileAttachment`, `ChatAcdSkillsDetected`, `ChatDepartmentTransfer`, `ChatEmailChanged`, `ChatNameChanged`, `ChatRatingChanged`, and `ChatRatingCommentChanged`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "URL of the attached file for `ChatFileAttachment` types of events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {"enabled": true, "freshness": null}, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`ticket_chat_event_data`", "created_at": 1751990097.7803059, "unrendered_database": "{% if target.type != 'spark'%}{{ var('zendesk_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('zendesk_schema', 'zendesk') }}", "doc_blocks": []}}, "macros": {"macro.zendesk_integration_tests.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "zendesk_integration_tests", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.zendesk_integration_tests.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.446083, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.446404, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.446621, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.446888, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {%- set submission_method = config.get(\"submission_method\", \"serverless\") -%}\n    {%- if submission_method in (\"serverless\", \"cluster\") -%}\n      {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- elif submission_method == \"bigframes\" -%}\n      {{ bigframes_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported dataframe syntax, it got %s\" % submission_method) %} {%- endif -%}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table", "macro.dbt_bigquery.bigframes_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.450368, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.450839, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4509718, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.451118, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4512582, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4514072, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.451582, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.45185, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.452115, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.452663, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.453077, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.453782, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.453967, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.454259, "supported_languages": null}, "macro.dbt_bigquery.materialization_materialized_view_bigquery": {"name": "materialization_materialized_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_bigquery.materialization_materialized_view_bigquery", "macro_sql": "{% materialization materialized_view, adapter='bigquery' -%}\n\n    {% set relations = materialization_materialized_view_default() %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {{ return(relations) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.materialization_materialized_view_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.454865, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.455196, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.455371, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.45628, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.456872, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.457682, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.460129, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4614432, "supported_languages": null}, "macro.dbt_bigquery.bigframes_write_table": {"name": "bigframes_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.bigframes_write_table", "macro_sql": "{% macro bigframes_write_table(compiled_code, target_relation) %}\nimport bigframes.pandas as bpd\nbpd.options.compute.extra_query_labels[\"bigframes-dbt-api\"] = \"python-model-table\"\nbpd.options.bigquery.ordering_mode = \"partial\"\nbpd.options.bigquery.project = \"{{ target.project }}\"\n{% if target.location %}\nbpd.options.bigquery.location = \"{{ target.location }}\"\n{% endif %}\nsession = bpd.get_global_session()\n{{ compiled_code }}\ndbt = dbtObj(bpd.read_gbq)\ndf = model(dbt, session)\ndf.to_gbq(\"{{ target_relation }}\", if_exists=\"replace\")\ndf._session.close()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4617128, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.463169, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.46513, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.465439, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4661918, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.467037, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.470997, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.471375, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.471533, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.471668, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4718568, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.47199, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4731221, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4737961, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.474432, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.475272, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.47565, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.477238, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.478519, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.479069, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4800441, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4807281, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4818501, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.482483, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.482877, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4831219, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.483752, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4840908, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.484268, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.484701, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.485162, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4853601, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.486113, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.486262, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.486838, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4870558, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.487545, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.487844, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.488416, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.488568, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4888651, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.489038, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.489268, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4907131, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.490922, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.491141, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.491416, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.491595, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.492555, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.493431, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.493523, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.493618, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.493898, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.494005, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.494279, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.49516, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.495274, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.49548, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.495702, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4958668, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.49605, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.496127, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.496305, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.496504, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.497212, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.4978108, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.497984, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.498484, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.498709, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.499074, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.499564, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.500915, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.501139, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.501308, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.501499, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5016372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.501812, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.50195, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.502444, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.502626, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.50293, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5032, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.50372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.503962, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5041978, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.504472, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.504714, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.50558, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.505769, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.50593, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.50607, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.506212, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5065322, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5068412, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.507204, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.507689, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5086021, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.510793, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.510962, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.511184, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.512139, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.512322, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5124962, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.513858, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.515389, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.517739, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.518045, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.518219, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5183098, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5184572, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.518574, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5187788, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5190358, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.522835, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5230541, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.523631, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.524083, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.524689, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.52512, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.525395, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.525727, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.526295, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.526517, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.526722, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5311859, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.533649, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.534312, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.534623, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5350442, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.535687, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5360541, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.537198, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.539187, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5409741, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.541793, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5420969, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.543477, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5437078, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.544479, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.546766, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.548898, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5497868, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.550356, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.55109, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.551362, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5521212, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.55335, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.555156, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.555422, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5561512, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.556434, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.557151, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.557782, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.558485, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.558728, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.558912, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.559208, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5594041, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5597, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.559885, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.560144, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.560328, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.560483, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.560661, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5608242, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5611, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.565503, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.566865, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.568036, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5691898, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.570017, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.570265, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5703812, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.570681, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5708458, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.573434, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.576069, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.577158, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.578034, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.57827, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.578784, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.578976, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5791092, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.579253, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5793679, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.579533, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.579657, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.580128, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.580318, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5815492, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.58196, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5823302, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5827992, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.583056, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.583333, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.583699, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.583945, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.584405, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.584795, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5849862, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.585186, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.585378, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.585974, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.587268, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.587619, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.587892, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.58818, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.588408, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5887191, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5889332, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5894458, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.58989, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.590146, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.590466, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.590817, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.591135, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.591572, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5920599, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5924852, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.592719, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5929952, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.593122, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5933928, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.593623, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.594079, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5942478, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.594542, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.594696, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.595259, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.595941, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.596247, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.596394, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.596674, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5968251, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5977259, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.597853, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.5983858, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.598552, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.598687, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.60037, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.600706, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.600964, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.601084, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6013482, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.601491, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6017542, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6019, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.602566, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.60275, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6031759, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.603849, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.604301, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.604482, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6046588, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.604914, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6050339, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.605579, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.605727, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.606889, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.607085, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.60733, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.607615, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.607767, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.608166, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6083388, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.608526, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.608978, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.609288, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.609588, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.609826, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6103501, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6116931, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6124969, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.612789, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6135879, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.614749, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.615799, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.616055, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6163058, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6163871, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.616939, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.617536, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6177769, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.61815, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.618479, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.618765, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.619092, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.619264, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.619551, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.619682, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.620151, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.620637, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.620821, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.621322, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6215749, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.621684, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6220002, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6221619, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6223931, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.622485, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.622755, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.622891, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6231701, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.623303, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.623788, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.624193, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6245089, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.62467, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.624959, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6252081, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.625639, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.626074, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.626354, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.626521, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6267781, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.626946, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.62725, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.627389, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.627647, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.627753, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6280441, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6281862, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.628433, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6285381, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.629289, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.629442, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.629619, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.629777, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.629942, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.630089, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6303139, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.630493, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.630655, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.63081, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6309671, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.63111, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.631268, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6314318, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.631837, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.631985, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.632242, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.632349, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.632681, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6329432, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.633093, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.633478, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.633654, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6338701, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6341481, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.634279, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6346629, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.635009, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.635401, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.635541, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6358771, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6360772, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.636238, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6364338, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.636938, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.637098, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.637252, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.637363, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.637814, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6379929, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.63807, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6382341, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.638405, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.638916, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.639054, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.639223, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6397069, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.639938, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.640137, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.640324, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6404638, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.641275, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6414442, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.641846, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6421492, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.642394, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.64271, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.64289, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.643064, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6433148, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6438541, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.644083, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6442292, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.644717, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.645122, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.645407, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6457229, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.646004, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.646226, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6474948, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6476102, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.647776, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6478899, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.648256, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.648444, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.648561, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.64878, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6489909, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6492171, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.649421, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.649642, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.650358, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6505432, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.650789, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.651011, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.652124, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.652533, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.652714, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6529012, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.653346, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6535099, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.653714, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.653878, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6541388, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6545951, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6554902, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.655753, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6559858, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.656262, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6564648, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.656663, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.656954, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.657224, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.657438, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.65776, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.657952, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.658119, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6583118, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6584861, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6586602, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.658825, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.659041, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.65921, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6604748, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6606379, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.660938, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.661152, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.661356, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.661535, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.662763, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.663114, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6633012, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.663651, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.663889, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.664551, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.664813, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6657002, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.668406, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.668993, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.670145, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.670366, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.670466, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.67132, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.671486, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.672488, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.672987, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.673645, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.674272, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.674357, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.674865, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.675125, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.675447, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.675752, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.676082, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.676568, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.676953, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.677613, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6779342, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6782641, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.678893, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.679918, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.680581, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.681868, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.682385, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.682723, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.68327, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6840808, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6844952, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.68494, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.685415, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.685877, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6862972, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.686672, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.68717, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.688017, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6884632, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6890829, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.689486, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6898189, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.690188, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.690794, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.691272, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.692276, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.692929, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.693853, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.695165, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.699371, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.6998222, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.700129, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7010088, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7026849, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.703017, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.703184, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.703645, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7039318, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.704127, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7043881, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.704573, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.705332, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7060711, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.706638, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7072651, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.707508, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7078998, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7082372, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.708864, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7091682, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.709514, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.710009, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.710835, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.711308, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7117162, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7119, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.712405, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.712901, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7137458, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.714139, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.714416, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7152362, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.716741, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7176142, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7194471, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7197492, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.719885, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.721047, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.724489, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.724802, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.725064, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.725708, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7259252, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7260978, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.726285, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.726454, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.72662, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.726797, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.727149, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.727381, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7277179, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.728249, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.728568, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.728899, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.729791, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.730222, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.730887, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.731589, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.732076, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.732845, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.734306, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.735185, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.736009, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7364328, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.737144, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.737623, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7380831, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.738273, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.738625, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7392142, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.739609, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.740277, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.74066, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.740801, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.740969, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.741112, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.741633, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.742338, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7428281, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.743101, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7436569, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.74443, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.746291, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.746968, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7478201, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7485352, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.749235, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.750161, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.750344, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7504609, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.752395, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.75612, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7562711, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.756354, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.756869, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.758079, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.758414, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.758686, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.758952, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.759249, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.759441, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7596438, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.760028, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.760479, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.760642, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7608058, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7609658, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.761107, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.761267, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.76208, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7627, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.763337, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.763576, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.763815, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7640488, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7642822, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7645388, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.764794, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.76503, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.76531, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.765412, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7655108, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7656078, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.765975, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7664251, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.767452, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7680051, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.768682, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.769032, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.769164, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.769292, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.769422, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7695549, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.77036, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.770528, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.770693, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.770852, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.772543, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.773119, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.773265, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.77355, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.773841, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.77397, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.774097, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.774229, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.774358, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.774749, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.775309, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7757068, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7759092, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.77613, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.776397, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.77759, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7804532, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.780809, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.781182, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7822561, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.782795, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7832162, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.783374, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7835279, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.783701, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.783851, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7839959, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7845042, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.785731, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7861671, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.786329, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7864902, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.786655, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.786813, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.786985, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.787231, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7873359, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.787433, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.788024, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.788633, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.788809, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.789647, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.791019, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.795518, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.796844, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.797164, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7973142, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7975092, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.797838, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7979488, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.798062, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.798166, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.798274, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.798528, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.79863, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.79873, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.799115, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7994938, "supported_languages": null}, "macro.zendesk.fivetran_week_end": {"name": "fivetran_week_end", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_end.sql", "original_file_path": "macros/fivetran_week_end.sql", "unique_id": "macro.zendesk.fivetran_week_end", "macro_sql": "{%- macro fivetran_week_end(dt) -%}\n{{ return(adapter.dispatch('fivetran_week_end', 'zendesk') (dt)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.zendesk.default__fivetran_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.7998238, "supported_languages": null}, "macro.zendesk.default__fivetran_week_end": {"name": "default__fivetran_week_end", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_end.sql", "original_file_path": "macros/fivetran_week_end.sql", "unique_id": "macro.zendesk.default__fivetran_week_end", "macro_sql": "{%- macro default__fivetran_week_end(dt) -%}\n{{ dbt.last_day(dt, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.799962, "supported_languages": null}, "macro.zendesk.snowflake__fivetran_week_end": {"name": "snowflake__fivetran_week_end", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_end.sql", "original_file_path": "macros/fivetran_week_end.sql", "unique_id": "macro.zendesk.snowflake__fivetran_week_end", "macro_sql": "\n\n{%- macro snowflake__fivetran_week_end(dt) -%}\ncast({{ dbt.dateadd('day', 6, zendesk.fivetran_week_start(dt)) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.zendesk.fivetran_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.800145, "supported_languages": null}, "macro.zendesk.postgres__fivetran_week_end": {"name": "postgres__fivetran_week_end", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_end.sql", "original_file_path": "macros/fivetran_week_end.sql", "unique_id": "macro.zendesk.postgres__fivetran_week_end", "macro_sql": "\n\n{%- macro postgres__fivetran_week_end(dt) -%}\ncast({{ dbt.dateadd('day', 6, zendesk.fivetran_week_start(dt)) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.zendesk.fivetran_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.800395, "supported_languages": null}, "macro.zendesk.duckdb__fivetran_week_end": {"name": "duckdb__fivetran_week_end", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_end.sql", "original_file_path": "macros/fivetran_week_end.sql", "unique_id": "macro.zendesk.duckdb__fivetran_week_end", "macro_sql": "\n\n{%- macro duckdb__fivetran_week_end(dt) -%}\n{{ return(zendesk.postgres__fivetran_week_end(dt)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk.postgres__fivetran_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.800537, "supported_languages": null}, "macro.zendesk.extract_schedule_day": {"name": "extract_schedule_day", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_schedule_day.sql", "original_file_path": "macros/extract_schedule_day.sql", "unique_id": "macro.zendesk.extract_schedule_day", "macro_sql": "{% macro extract_schedule_day(string, day) -%}\n\n{{ return(adapter.dispatch('extract_schedule_day', 'zendesk') (string, day)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk.bigquery__extract_schedule_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.801067, "supported_languages": null}, "macro.zendesk.default__extract_schedule_day": {"name": "default__extract_schedule_day", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_schedule_day.sql", "original_file_path": "macros/extract_schedule_day.sql", "unique_id": "macro.zendesk.default__extract_schedule_day", "macro_sql": "{% macro default__extract_schedule_day(string, day) %}\n    {% set regex = \"'.*?\" ~ day ~ \".*?({.*?})'\" %}\n    regexp_extract({{ string }}, {{ regex }} )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.801264, "supported_languages": null}, "macro.zendesk.bigquery__extract_schedule_day": {"name": "bigquery__extract_schedule_day", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_schedule_day.sql", "original_file_path": "macros/extract_schedule_day.sql", "unique_id": "macro.zendesk.bigquery__extract_schedule_day", "macro_sql": "{% macro bigquery__extract_schedule_day(string, day) %}\n    {% set regex = \"'.*?\" ~ day ~ \".*?({.*?})'\" %}\n    regexp_extract({{ string }}, {{ regex }} )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8014562, "supported_languages": null}, "macro.zendesk.snowflake__extract_schedule_day": {"name": "snowflake__extract_schedule_day", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_schedule_day.sql", "original_file_path": "macros/extract_schedule_day.sql", "unique_id": "macro.zendesk.snowflake__extract_schedule_day", "macro_sql": "{% macro snowflake__extract_schedule_day(string, day) %}\n    {% set regex = \"'.*?\" ~ day ~ \".*?({.*?})'\" %}\n\n    REGEXP_SUBSTR({{ string }}, {{ regex }}, 1, 1, 'e', 1 )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8016498, "supported_languages": null}, "macro.zendesk.postgres__extract_schedule_day": {"name": "postgres__extract_schedule_day", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_schedule_day.sql", "original_file_path": "macros/extract_schedule_day.sql", "unique_id": "macro.zendesk.postgres__extract_schedule_day", "macro_sql": "{% macro postgres__extract_schedule_day(string, day) %}\n    {% set regex = \"'.*?\" ~ day ~ \".*?({.*?})'\" %}\n\n    (regexp_matches({{ string }}, {{ regex }}))[1]\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.801844, "supported_languages": null}, "macro.zendesk.redshift__extract_schedule_day": {"name": "redshift__extract_schedule_day", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_schedule_day.sql", "original_file_path": "macros/extract_schedule_day.sql", "unique_id": "macro.zendesk.redshift__extract_schedule_day", "macro_sql": "{% macro redshift__extract_schedule_day(string, day) %}\n\n    {% set regex = '\"' ~ day ~ '\"' ~ ':\\\\\\{([^\\\\\\}]*)\\\\\\}' -%}\n\n    '{' || REGEXP_SUBSTR({{ string }}, '{{ regex }}', 1, 1, 'e') || '}'\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.802068, "supported_languages": null}, "macro.zendesk.spark__extract_schedule_day": {"name": "spark__extract_schedule_day", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_schedule_day.sql", "original_file_path": "macros/extract_schedule_day.sql", "unique_id": "macro.zendesk.spark__extract_schedule_day", "macro_sql": "{% macro spark__extract_schedule_day(string, day) %}\n    {% set regex = \"'.*?\" ~ day ~ \".*?({.*?})'\" | replace(\"{\", \"\\\\\\{\") | replace(\"}\", \"\\\\\\}\") %}\n    regexp_extract({{ string }}, {{ regex }}, 1)\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.802349, "supported_languages": null}, "macro.zendesk.coalesce_cast": {"name": "coalesce_cast", "resource_type": "macro", "package_name": "zendesk", "path": "macros/coalesce_cast.sql", "original_file_path": "macros/coalesce_cast.sql", "unique_id": "macro.zendesk.coalesce_cast", "macro_sql": "{% macro coalesce_cast(column_list, datatype) -%}\n  {{ return(adapter.dispatch('coalesce_cast', 'zendesk')(column_list, datatype)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk.default__coalesce_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.802659, "supported_languages": null}, "macro.zendesk.default__coalesce_cast": {"name": "default__coalesce_cast", "resource_type": "macro", "package_name": "zendesk", "path": "macros/coalesce_cast.sql", "original_file_path": "macros/coalesce_cast.sql", "unique_id": "macro.zendesk.default__coalesce_cast", "macro_sql": "{% macro default__coalesce_cast(column_list, datatype) %}\n  coalesce(\n    {%- for column in column_list %}\n      cast({{ column }} as {{ datatype }})\n      {%- if not loop.last -%},{%- endif -%}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.802901, "supported_languages": null}, "macro.zendesk.clean_schedule": {"name": "clean_schedule", "resource_type": "macro", "package_name": "zendesk", "path": "macros/clean_schedule.sql", "original_file_path": "macros/clean_schedule.sql", "unique_id": "macro.zendesk.clean_schedule", "macro_sql": "{% macro clean_schedule(column_name) -%}\n    {{ return(adapter.dispatch('clean_schedule', 'zendesk')(column_name)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk.default__clean_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.803158, "supported_languages": null}, "macro.zendesk.default__clean_schedule": {"name": "default__clean_schedule", "resource_type": "macro", "package_name": "zendesk", "path": "macros/clean_schedule.sql", "original_file_path": "macros/clean_schedule.sql", "unique_id": "macro.zendesk.default__clean_schedule", "macro_sql": "{% macro default__clean_schedule(column_name) -%}\n    replace(replace(replace(replace(cast({{ column_name }} as {{ dbt.type_string() }}), '{', ''), '}', ''), '\"', ''), ' ', '')\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8033001, "supported_languages": null}, "macro.zendesk.fivetran_week_start": {"name": "fivetran_week_start", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_start.sql", "original_file_path": "macros/fivetran_week_start.sql", "unique_id": "macro.zendesk.fivetran_week_start", "macro_sql": "{%- macro fivetran_week_start(dt) -%}\n{{ return(adapter.dispatch('fivetran_week_start', 'zendesk') (dt)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.zendesk.default__fivetran_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.803661, "supported_languages": null}, "macro.zendesk.default__fivetran_week_start": {"name": "default__fivetran_week_start", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_start.sql", "original_file_path": "macros/fivetran_week_start.sql", "unique_id": "macro.zendesk.default__fivetran_week_start", "macro_sql": "{%- macro default__fivetran_week_start(dt) -%}\ncast({{ dbt.date_trunc('week', dt) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.803808, "supported_languages": null}, "macro.zendesk.snowflake__fivetran_week_start": {"name": "snowflake__fivetran_week_start", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_start.sql", "original_file_path": "macros/fivetran_week_start.sql", "unique_id": "macro.zendesk.snowflake__fivetran_week_start", "macro_sql": "\n\n{%- macro snowflake__fivetran_week_start(dt) -%}\n-- Adjust week start to Sunday\ncast(\n    case \n        when dayofweekiso({{ dt }}) = 7 then {{ dt }} -- dayofweekiso returns 7 for Sunday\n        else {{ dbt.dateadd(\"day\", \"-1 * dayofweekiso(\" ~ dt ~ \")\", dt) }}\n    end\nas date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.804033, "supported_languages": null}, "macro.zendesk.postgres__fivetran_week_start": {"name": "postgres__fivetran_week_start", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_start.sql", "original_file_path": "macros/fivetran_week_start.sql", "unique_id": "macro.zendesk.postgres__fivetran_week_start", "macro_sql": "\n\n{%- macro postgres__fivetran_week_start(dt) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, dt))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8042922, "supported_languages": null}, "macro.zendesk.duckdb__fivetran_week_start": {"name": "duckdb__fivetran_week_start", "resource_type": "macro", "package_name": "zendesk", "path": "macros/fivetran_week_start.sql", "original_file_path": "macros/fivetran_week_start.sql", "unique_id": "macro.zendesk.duckdb__fivetran_week_start", "macro_sql": "\n\n{%- macro duckdb__fivetran_week_start(dt) -%}\n{{ return(zendesk.postgres__fivetran_week_start(dt)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk.postgres__fivetran_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8044329, "supported_languages": null}, "macro.zendesk.extract_support_role_changes": {"name": "extract_support_role_changes", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_support_role_changes.sql", "original_file_path": "macros/extract_support_role_changes.sql", "unique_id": "macro.zendesk.extract_support_role_changes", "macro_sql": "{% macro extract_support_role_changes(field) -%}\n{{ return(adapter.dispatch('extract_support_role_changes', 'zendesk') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk.default__extract_support_role_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.804755, "supported_languages": null}, "macro.zendesk.default__extract_support_role_changes": {"name": "default__extract_support_role_changes", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_support_role_changes.sql", "original_file_path": "macros/extract_support_role_changes.sql", "unique_id": "macro.zendesk.default__extract_support_role_changes", "macro_sql": "{% macro default__extract_support_role_changes(field) %}\n    {{ dbt.split_part(\n        dbt.split_part(field, \"'support role changed from '\", 2),\n        \"'\\\\n'\", 1)\n    }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8049762, "supported_languages": null}, "macro.zendesk.postgres__extract_support_role_changes": {"name": "postgres__extract_support_role_changes", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_support_role_changes.sql", "original_file_path": "macros/extract_support_role_changes.sql", "unique_id": "macro.zendesk.postgres__extract_support_role_changes", "macro_sql": "{% macro postgres__extract_support_role_changes(field) %}\n    {{ dbt.split_part(\n        dbt.split_part(field, \"'support role changed from '\", 2),\n        \"'\\n'\", 1)\n    }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8052459, "supported_languages": null}, "macro.zendesk.spark__extract_support_role_changes": {"name": "spark__extract_support_role_changes", "resource_type": "macro", "package_name": "zendesk", "path": "macros/extract_support_role_changes.sql", "original_file_path": "macros/extract_support_role_changes.sql", "unique_id": "macro.zendesk.spark__extract_support_role_changes", "macro_sql": "{% macro spark__extract_support_role_changes(field) %}\n    regexp_extract({{ field }}, 'support role changed from (.*)', 1)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.805349, "supported_languages": null}, "macro.zendesk.count_tokens": {"name": "count_tokens", "resource_type": "macro", "package_name": "zendesk", "path": "macros/count_tokens.sql", "original_file_path": "macros/count_tokens.sql", "unique_id": "macro.zendesk.count_tokens", "macro_sql": "{% macro count_tokens(column_name) -%}\n  {{ return(adapter.dispatch('count_tokens', 'zendesk')(column_name)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk.default__count_tokens"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8056011, "supported_languages": null}, "macro.zendesk.default__count_tokens": {"name": "default__count_tokens", "resource_type": "macro", "package_name": "zendesk", "path": "macros/count_tokens.sql", "original_file_path": "macros/count_tokens.sql", "unique_id": "macro.zendesk.default__count_tokens", "macro_sql": "{% macro default__count_tokens(column_name) %}\n  {{ dbt.length(column_name) }} / 4 -- 1 token is approximately 4 characters, and we only need an approximation here.\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.805732, "supported_languages": null}, "macro.zendesk_source.get_domain_name_columns": {"name": "get_domain_name_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_domain_name_columns.sql", "original_file_path": "macros/get_domain_name_columns.sql", "unique_id": "macro.zendesk_source.get_domain_name_columns", "macro_sql": "{% macro get_domain_name_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"domain_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.806329, "supported_languages": null}, "macro.zendesk_source.get_user_tag_columns": {"name": "get_user_tag_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_user_tag_columns.sql", "original_file_path": "macros/get_user_tag_columns.sql", "unique_id": "macro.zendesk_source.get_user_tag_columns", "macro_sql": "{% macro get_user_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{% if target.type == 'redshift' %}\n    {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n\n{% elif target.type == 'snowflake' %}\n    {{ columns.append( {\"name\": \"TAG\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n\n{% else %}\n    {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string()} ) }}\n\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8073611, "supported_languages": null}, "macro.zendesk_source.get_audit_log_columns": {"name": "get_audit_log_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_audit_log_columns.sql", "original_file_path": "macros/get_audit_log_columns.sql", "unique_id": "macro.zendesk_source.get_audit_log_columns", "macro_sql": "{% macro get_audit_log_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"action\", \"datatype\": dbt.type_string()},\n    {\"name\": \"actor_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"change_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"source_label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.808434, "supported_languages": null}, "macro.zendesk_source.get_ticket_chat_event_columns": {"name": "get_ticket_chat_event_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_chat_event_columns.sql", "original_file_path": "macros/get_ticket_chat_event_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_chat_event_columns", "macro_sql": "{% macro get_ticket_chat_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"actor_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"chat_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"chat_index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"external_message_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"filename\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_history_context\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"message_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"message_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mime_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_message_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_message_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"size\", \"datatype\": dbt.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status_updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.810527, "supported_languages": null}, "macro.zendesk_source.get_ticket_form_history_columns": {"name": "get_ticket_form_history_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_form_history_columns.sql", "original_file_path": "macros/get_ticket_form_history_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_form_history_columns", "macro_sql": "{% macro get_ticket_form_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"display_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"end_user_visible\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.811543, "supported_languages": null}, "macro.zendesk_source.get_schedule_columns": {"name": "get_schedule_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_schedule_columns.sql", "original_file_path": "macros/get_schedule_columns.sql", "unique_id": "macro.zendesk_source.get_schedule_columns", "macro_sql": "{% macro get_schedule_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"end_time\", \"datatype\": dbt.type_int()},\n    {\"name\": \"end_time_utc\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt.type_int()},\n    {\"name\": \"start_time_utc\", \"datatype\": dbt.type_int()},\n    {\"name\": \"time_zone\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.81267, "supported_languages": null}, "macro.zendesk_source.get_daylight_time_columns": {"name": "get_daylight_time_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_daylight_time_columns.sql", "original_file_path": "macros/get_daylight_time_columns.sql", "unique_id": "macro.zendesk_source.get_daylight_time_columns", "macro_sql": "{% macro get_daylight_time_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"daylight_end_utc\", \"datatype\": \"datetime\"},\n    {\"name\": \"daylight_offset\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daylight_start_utc\", \"datatype\": \"datetime\"},\n    {\"name\": \"time_zone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"year\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8134341, "supported_languages": null}, "macro.zendesk_source.get_time_zone_columns": {"name": "get_time_zone_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_time_zone_columns.sql", "original_file_path": "macros/get_time_zone_columns.sql", "unique_id": "macro.zendesk_source.get_time_zone_columns", "macro_sql": "{% macro get_time_zone_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"standard_offset\", \"datatype\": dbt.type_string()},\n    {\"name\": \"time_zone\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.813932, "supported_languages": null}, "macro.zendesk_source.get_ticket_tag_columns": {"name": "get_ticket_tag_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_tag_columns.sql", "original_file_path": "macros/get_ticket_tag_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_tag_columns", "macro_sql": "{% macro get_ticket_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{% if target.type == 'redshift' %}\n    {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n\n{% elif target.type == 'snowflake' %}\n    {{ columns.append( {\"name\": \"TAG\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n\n{% else %}\n    {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string()} ) }}\n\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.815, "supported_languages": null}, "macro.zendesk_source.get_organization_tag_columns": {"name": "get_organization_tag_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_organization_tag_columns.sql", "original_file_path": "macros/get_organization_tag_columns.sql", "unique_id": "macro.zendesk_source.get_organization_tag_columns", "macro_sql": "{% macro get_organization_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{% if target.type == 'redshift' %}\n    {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n\n{% elif target.type == 'snowflake' %}\n    {{ columns.append( {\"name\": \"TAG\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n\n{% else %}\n    {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string()} ) }}\n\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.816073, "supported_languages": null}, "macro.zendesk_source.get_schedule_holiday_columns": {"name": "get_schedule_holiday_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_schedule_holiday_columns.sql", "original_file_path": "macros/get_schedule_holiday_columns.sql", "unique_id": "macro.zendesk_source.get_schedule_holiday_columns", "macro_sql": "{% macro get_schedule_holiday_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"end_date\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"schedule_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"start_date\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.816941, "supported_languages": null}, "macro.zendesk_source.get_group_columns": {"name": "get_group_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_group_columns.sql", "original_file_path": "macros/get_group_columns.sql", "unique_id": "macro.zendesk_source.get_group_columns", "macro_sql": "{% macro get_group_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.817791, "supported_languages": null}, "macro.zendesk_source.get_ticket_chat_columns": {"name": "get_ticket_chat_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_chat_columns.sql", "original_file_path": "macros/get_ticket_chat_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_chat_columns", "macro_sql": "{% macro get_ticket_chat_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"authenticated\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"backend\", \"datatype\": dbt.type_string()},\n    {\"name\": \"channel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"chat_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"conversation_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"initiator\", \"datatype\": dbt.type_string()},\n    {\"name\": \"integration_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"visitor_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.819084, "supported_languages": null}, "macro.zendesk_source.get_user_columns": {"name": "get_user_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_user_columns.sql", "original_file_path": "macros/get_user_columns.sql", "unique_id": "macro.zendesk_source.get_user_columns", "macro_sql": "{% macro get_user_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"alias\", \"datatype\": dbt.type_string()},\n    {\"name\": \"authenticity_token\", \"datatype\": dbt.type_int()},\n    {\"name\": \"chat_only\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"details\", \"datatype\": dbt.type_int()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"external_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"last_login_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"locale_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"moderator\", \"datatype\": \"boolean\"},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"only_private_comments\", \"datatype\": \"boolean\"},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"remote_photo_url\", \"datatype\": dbt.type_int()},\n    {\"name\": \"restricted_agent\", \"datatype\": \"boolean\"},\n    {\"name\": \"role\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shared\", \"datatype\": \"boolean\"},\n    {\"name\": \"shared_agent\", \"datatype\": \"boolean\"},\n    {\"name\": \"signature\", \"datatype\": dbt.type_int()},\n    {\"name\": \"suspended\", \"datatype\": \"boolean\"},\n    {\"name\": \"ticket_restriction\", \"datatype\": dbt.type_string()},\n    {\"name\": \"time_zone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"two_factor_auth_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"verified\", \"datatype\": \"boolean\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zendesk__user_passthrough_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8223202, "supported_languages": null}, "macro.zendesk_source.get_ticket_columns": {"name": "get_ticket_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_columns.sql", "original_file_path": "macros/get_ticket_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_columns", "macro_sql": "{% macro get_ticket_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"allow_channelback\", \"datatype\": \"boolean\"},\n    {\"name\": \"assignee_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"brand_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"external_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"forum_topic_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"group_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"has_incidents\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"is_public\", \"datatype\": \"boolean\"},\n    {\"name\": \"merged_ticket_ids\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"priority\", \"datatype\": dbt.type_string()},\n    {\"name\": \"problem_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"recipient\", \"datatype\": dbt.type_int()},\n    {\"name\": \"requester_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()},\n    {\"name\": \"submitter_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"system_ccs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"system_client\", \"datatype\": dbt.type_string()},\n    {\"name\": \"system_ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"system_json_email_identifier\", \"datatype\": dbt.type_int()},\n    {\"name\": \"system_latitude\", \"datatype\": dbt.type_float()},\n    {\"name\": \"system_location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"system_longitude\", \"datatype\": dbt.type_float()},\n    {\"name\": \"system_machine_generated\", \"datatype\": dbt.type_int()},\n    {\"name\": \"system_message_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"system_raw_email_identifier\", \"datatype\": dbt.type_int()},\n    {\"name\": \"ticket_form_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"via_channel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"via_source_from_address\", \"datatype\": dbt.type_int()},\n    {\"name\": \"via_source_from_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"via_source_from_title\", \"datatype\": dbt.type_int()},\n    {\"name\": \"via_source_rel\", \"datatype\": dbt.type_int()},\n    {\"name\": \"via_source_to_address\", \"datatype\": dbt.type_int()},\n    {\"name\": \"via_source_to_name\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zendesk__ticket_passthrough_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.826734, "supported_languages": null}, "macro.zendesk_source.get_ticket_field_history_columns": {"name": "get_ticket_field_history_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_field_history_columns.sql", "original_file_path": "macros/get_ticket_field_history_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_field_history_columns", "macro_sql": "{% macro get_ticket_field_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"field_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.827515, "supported_languages": null}, "macro.zendesk_source.get_ticket_schedule_columns": {"name": "get_ticket_schedule_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_schedule_columns.sql", "original_file_path": "macros/get_ticket_schedule_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_schedule_columns", "macro_sql": "{% macro get_ticket_schedule_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"schedule_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.828096, "supported_languages": null}, "macro.zendesk_source.get_organization_columns": {"name": "get_organization_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_organization_columns.sql", "original_file_path": "macros/get_organization_columns.sql", "unique_id": "macro.zendesk_source.get_organization_columns", "macro_sql": "{% macro get_organization_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"details\", \"datatype\": dbt.type_int()},\n    {\"name\": \"external_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"group_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shared_comments\", \"datatype\": \"boolean\"},\n    {\"name\": \"shared_tickets\", \"datatype\": \"boolean\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zendesk__organization_passthrough_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.829473, "supported_languages": null}, "macro.zendesk_source.get_ticket_comment_columns": {"name": "get_ticket_comment_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_ticket_comment_columns.sql", "original_file_path": "macros/get_ticket_comment_columns.sql", "unique_id": "macro.zendesk_source.get_ticket_comment_columns", "macro_sql": "{% macro get_ticket_comment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"body\", \"datatype\": dbt.type_string()},\n    {\"name\": \"call_duration\", \"datatype\": dbt.type_int()},\n    {\"name\": \"call_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"facebook_comment\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt.type_int()},\n    {\"name\": \"public\", \"datatype\": \"boolean\"},\n    {\"name\": \"recording_url\", \"datatype\": dbt.type_int()},\n    {\"name\": \"started_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"transcription_status\", \"datatype\": dbt.type_int()},\n    {\"name\": \"transcription_text\", \"datatype\": dbt.type_int()},\n    {\"name\": \"trusted\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tweet\", \"datatype\": \"boolean\"},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"voice_comment\", \"datatype\": \"boolean\"},\n    {\"name\": \"voice_comment_transcription_visible\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.831481, "supported_languages": null}, "macro.zendesk_source.get_brand_columns": {"name": "get_brand_columns", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/get_brand_columns.sql", "original_file_path": "macros/get_brand_columns.sql", "unique_id": "macro.zendesk_source.get_brand_columns", "macro_sql": "{% macro get_brand_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"brand_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"has_help_center\", \"datatype\": \"boolean\"},\n    {\"name\": \"help_center_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_content_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logo_content_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logo_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"logo_file_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logo_height\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_inline\", \"datatype\": \"boolean\"},\n    {\"name\": \"logo_mapped_content_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logo_size\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logo_width\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subdomain\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8335638, "supported_languages": null}, "macro.zendesk_source.union_zendesk_connections": {"name": "union_zendesk_connections", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/union/union_zendesk_connections.sql", "original_file_path": "macros/union/union_zendesk_connections.sql", "unique_id": "macro.zendesk_source.union_zendesk_connections", "macro_sql": "{% macro union_zendesk_connections(connection_dictionary, single_source_name, single_table_name) %}\n\n{{ adapter.dispatch('union_zendesk_connections', 'zendesk_source') (connection_dictionary, single_source_name, single_table_name) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk_source.default__union_zendesk_connections"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.83429, "supported_languages": null}, "macro.zendesk_source.default__union_zendesk_connections": {"name": "default__union_zendesk_connections", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/union/union_zendesk_connections.sql", "original_file_path": "macros/union/union_zendesk_connections.sql", "unique_id": "macro.zendesk_source.default__union_zendesk_connections", "macro_sql": "{% macro default__union_zendesk_connections(connection_dictionary, single_source_name, single_table_name) %}\n\n{% if connection_dictionary %}\n{# For unioning #}\n    {%- set relations = [] -%}\n    {%- for connection in connection_dictionary -%}\n\n        {%- set relation=adapter.get_relation(\n                            database=source(connection.name, single_table_name).database,\n                            schema=source(connection.name, single_table_name).schema,\n                            identifier=source(connection.name, single_table_name).identifier) if var('has_defined_sources', false)\n                            \n                    else adapter.get_relation(\n                            database=connection.database if connection.database else target.database,\n                            schema=connection.schema if connection.schema else single_source_name,\n                            identifier=single_table_name\n                    ) \n        -%}\n\n        {%- if relation is not none -%}\n            {%- do relations.append(relation) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ zendesk_source.zendesk_union_relations(relations) }}\n    {%- else -%}\n        {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n        {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ single_source_name ~ \".\" ~ single_table_name ~ \" table was not found in your schema(s). The Fivetran Data Model will create a completely empty staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n        {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit {{ '0' if target.type != 'redshift' else '1' }}\n    {%- endif -%}\n\n{% else %}\n{# Not unioning #}\n\n    {% set identifier_var = \"zendesk_\" + single_table_name + \"_identifier\"%}\n\n    {%- set relation=adapter.get_relation(\n        database=source(single_source_name, single_table_name).database,\n        schema=source(single_source_name, single_table_name).schema,\n        identifier=var(identifier_var, single_table_name)\n    ) -%}\n\n    {%- if relation is not none -%}\n        select\n            {{ dbt_utils.star(from=source(single_source_name, single_table_name)) }}\n        from {{ source(single_source_name, single_table_name) }} as source_table\n    \n    {% else %}\n        {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n            {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ single_source_name|upper ~ \".\" ~ single_table_name|upper ~ \" table was not found in your schema(s). The Fivetran Data Model will create a completely empty staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n        {% endif -%}\n        \n        select \n            cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n        limit {{ '0' if target.type != 'redshift' else '1' }}\n    {%- endif -%}\n{% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk_source.zendesk_union_relations", "macro.dbt.type_string", "macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.836357, "supported_languages": null}, "macro.zendesk_source.zendesk_union_relations": {"name": "zendesk_union_relations", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/union/zendesk_union_relations.sql", "original_file_path": "macros/union/zendesk_union_relations.sql", "unique_id": "macro.zendesk_source.zendesk_union_relations", "macro_sql": "\n\n{%- macro zendesk_union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('zendesk_union_relations', 'zendesk_source')(relations, aliases, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.zendesk_source.default__zendesk_union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8376188, "supported_languages": null}, "macro.zendesk_source.default__zendesk_union_relations": {"name": "default__zendesk_union_relations", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/union/zendesk_union_relations.sql", "original_file_path": "macros/union/zendesk_union_relations.sql", "unique_id": "macro.zendesk_source.default__zendesk_union_relations", "macro_sql": "\n\n{%- macro default__zendesk_union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'zendesk_union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'zendesk_union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation.database ~ '.' ~ relation.schema) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n            \n            {# This alias is the only addition made to thr dbt_utils.union_relations() code. Avoids errors if the table is named a reserved keyword #}\n            from {{ aliases[loop.index0] if aliases else relation }} as unioned_relation_{{ loop.index }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.841077, "supported_languages": null}, "macro.zendesk_source.apply_source_relation": {"name": "apply_source_relation", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/union/zendesk_source_relation.sql", "original_file_path": "macros/union/zendesk_source_relation.sql", "unique_id": "macro.zendesk_source.apply_source_relation", "macro_sql": "{% macro apply_source_relation() -%}\n\n{{ adapter.dispatch('apply_source_relation', 'zendesk_source') () }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.zendesk_source.default__apply_source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.841374, "supported_languages": null}, "macro.zendesk_source.default__apply_source_relation": {"name": "default__apply_source_relation", "resource_type": "macro", "package_name": "zendesk_source", "path": "macros/union/zendesk_source_relation.sql", "original_file_path": "macros/union/zendesk_source_relation.sql", "unique_id": "macro.zendesk_source.default__apply_source_relation", "macro_sql": "{% macro default__apply_source_relation() -%}\n\n{% if var('zendesk_sources', []) != [] %}\n, _dbt_source_relation as source_relation\n{% else %}\n, '{{ var(\"zendesk_database\", target.database) }}' || '.'|| '{{ var(\"zendesk_schema\", \"zendesk\") }}' as source_relation\n{% endif %} \n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1751990095.8416839, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.zendesk_integration_tests.consistency_ticket_metrics": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "consistency_ticket_metrics", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "consistency/consistency_ticket_metrics.sql", "original_file_path": "tests/consistency/consistency_ticket_metrics.sql", "unique_id": "test.zendesk_integration_tests.consistency_ticket_metrics", "fqn": ["zendesk_integration_tests", "consistency", "consistency_ticket_metrics"], "alias": "consistency_ticket_metrics", "checksum": {"name": "sha256", "checksum": "5d3233535a4cb6e777c108460a5c2b50b2f8469210909a5184390c3f5356a372"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.259501, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        ticket_id,\n        first_reply_time_business_minutes, \n        first_reply_time_calendar_minutes\n    from {{ target.schema }}_zendesk_prod.zendesk__ticket_metrics\n),\n\ndev as (\n    select\n        ticket_id,\n        first_reply_time_business_minutes, \n        first_reply_time_calendar_minutes\n    from {{ target.schema }}_zendesk_dev.zendesk__ticket_metrics\n\n    {# Make sure we're only comparing one schema since this current update (v0.19.0) added mult-schema support. Can remove for future releases #}\n    {{ \"where source_relation =  '\" ~ (var(\"zendesk_database\", target.database)|lower ~ \".\" ~ var(\"zendesk_schema\", \"zendesk\")) ~ \"'\" if 'source_relation' in var(\"consistency_test_exclude_fields\", '[]') }}\n),\n\nfinal as (\n    select \n        prod.ticket_id,\n        prod.first_reply_time_business_minutes as prod_first_reply_time_business_minutes,\n        dev.first_reply_time_business_minutes as dev_first_reply_time_business_minutes,\n        prod.first_reply_time_calendar_minutes as prod_first_reply_time_calendar_minutes,\n        dev.first_reply_time_calendar_minutes as dev_first_reply_time_calendar_minutes\n    from prod\n    full outer join dev \n        on dev.ticket_id = prod.ticket_id\n)\n\nselect *\nfrom final\nwhere (abs(prod_first_reply_time_business_minutes - dev_first_reply_time_business_minutes) >= 5\n    or abs(prod_first_reply_time_calendar_minutes - dev_first_reply_time_calendar_minutes) >= 5)\n    {{ \"and ticket_id not in \" ~ var('fivetran_consistency_ticket_metrics_exclusion_tickets',[]) ~ \"\" if var('fivetran_consistency_ticket_metrics_exclusion_tickets',[]) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.consistency_ticket_field_history": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "consistency_ticket_field_history", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "consistency/consistency_ticket_field_history.sql", "original_file_path": "tests/consistency/consistency_ticket_field_history.sql", "unique_id": "test.zendesk_integration_tests.consistency_ticket_field_history", "fqn": ["zendesk_integration_tests", "consistency", "consistency_ticket_field_history"], "alias": "consistency_ticket_field_history", "checksum": {"name": "sha256", "checksum": "d9f7073e213aa66fe271ada5b676e9a1c7f1068fc049c758134f17c8666a017a"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.278896, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        {{ dbt_utils.star(from=ref('zendesk__ticket_field_history'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_zendesk_prod.zendesk__ticket_field_history\n),\n\ndev as (\n    select\n        {{ dbt_utils.star(from=ref('zendesk__ticket_field_history'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_zendesk_dev.zendesk__ticket_field_history\n\n    {# Make sure we're only comparing one schema since this current update (v0.19.0) added mult-schema support. Can remove for future releases #}\n    {{ \"where source_relation =  '\" ~ (var(\"zendesk_database\", target.database)|lower ~ \".\" ~ var(\"zendesk_schema\", \"zendesk\")) ~ \"'\" if 'source_relation' in var(\"consistency_test_exclude_fields\", '[]') }}\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final\nwhere date_day < current_date", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_field_history", "package": null, "version": null}, {"name": "zendesk__ticket_field_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.consistency_ticket_summary": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "consistency_ticket_summary", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "consistency/consistency_ticket_summary.sql", "original_file_path": "tests/consistency/consistency_ticket_summary.sql", "unique_id": "test.zendesk_integration_tests.consistency_ticket_summary", "fqn": ["zendesk_integration_tests", "consistency", "consistency_ticket_summary"], "alias": "consistency_ticket_summary", "checksum": {"name": "sha256", "checksum": "84b47efc6c0515cf8e3999e037cd30dde3b018b18bbd562edeca0fe4f1a314e1"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.293016, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        user_count,\n        active_agent_count,\n        deleted_user_count,\n        end_user_count,\n        suspended_user_count,\n        new_ticket_count,\n        on_hold_ticket_count,\n        open_ticket_count,\n        pending_ticket_count,\n        solved_ticket_count,\n        problem_ticket_count,\n        assigned_ticket_count,\n        reassigned_ticket_count,\n        reopened_ticket_count,\n        surveyed_satisfaction_ticket_count,\n        unassigned_unsolved_ticket_count,\n        unreplied_ticket_count,\n        unreplied_unsolved_ticket_count,\n        unsolved_ticket_count,\n        recovered_ticket_count,\n        deleted_ticket_count\n\n    from {{ target.schema }}_zendesk_prod.zendesk__ticket_summary\n),\n\ndev as (\n    select\n        user_count,\n        active_agent_count,\n        deleted_user_count,\n        end_user_count,\n        suspended_user_count,\n        new_ticket_count,\n        on_hold_ticket_count,\n        open_ticket_count,\n        pending_ticket_count,\n        solved_ticket_count,\n        problem_ticket_count,\n        assigned_ticket_count,\n        reassigned_ticket_count,\n        reopened_ticket_count,\n        surveyed_satisfaction_ticket_count,\n        unassigned_unsolved_ticket_count,\n        unreplied_ticket_count,\n        unreplied_unsolved_ticket_count,\n        unsolved_ticket_count,\n        recovered_ticket_count,\n        deleted_ticket_count\n\n    from {{ target.schema }}_zendesk_dev.zendesk__ticket_summary\n\n    {# Make sure we're only comparing one schema since this current update (v0.19.0) added mult-schema support. Can remove for future releases #}\n    {{ \"where source_relation =  '\" ~ (var(\"zendesk_database\", target.database)|lower ~ \".\" ~ var(\"zendesk_schema\", \"zendesk\")) ~ \"'\" if 'source_relation' in var(\"consistency_test_exclude_fields\", '[]') }}\n),\n\njoined as (\n\n    select \n        prod.user_count as prod_user_count,\n        dev.user_count as dev_user_count,\n        prod.active_agent_count as prod_active_agent_count,\n        dev.active_agent_count as dev_active_agent_count,\n        prod.deleted_user_count as prod_deleted_user_count,\n        dev.deleted_user_count as dev_deleted_user_count,\n        prod.end_user_count as prod_end_user_count,\n        dev.end_user_count as dev_end_user_count,\n        prod.suspended_user_count as prod_suspended_user_count,\n        dev.suspended_user_count as dev_suspended_user_count,\n        prod.new_ticket_count as prod_new_ticket_count,\n        dev.new_ticket_count as dev_new_ticket_count,\n        prod.on_hold_ticket_count as prod_on_hold_ticket_count,\n        dev.on_hold_ticket_count as dev_on_hold_ticket_count,\n        prod.open_ticket_count as prod_open_ticket_count,\n        dev.open_ticket_count as dev_open_ticket_count,\n        prod.pending_ticket_count as prod_pending_ticket_count,\n        dev.pending_ticket_count as dev_pending_ticket_count,\n        prod.solved_ticket_count as prod_solved_ticket_count,\n        dev.solved_ticket_count as dev_solved_ticket_count,\n        prod.problem_ticket_count as prod_problem_ticket_count,\n        dev.problem_ticket_count as dev_problem_ticket_count,\n        prod.assigned_ticket_count as prod_assigned_ticket_count,\n        dev.assigned_ticket_count as dev_assigned_ticket_count,\n        prod.reassigned_ticket_count as prod_reassigned_ticket_count,\n        dev.reassigned_ticket_count as dev_reassigned_ticket_count,\n        prod.reopened_ticket_count as prod_reopened_ticket_count,\n        dev.reopened_ticket_count as dev_reopened_ticket_count,\n        prod.surveyed_satisfaction_ticket_count as prod_surveyed_satisfaction_ticket_count,\n        dev.surveyed_satisfaction_ticket_count as dev_surveyed_satisfaction_ticket_count,\n        prod.unassigned_unsolved_ticket_count as prod_unassigned_unsolved_ticket_count,\n        dev.unassigned_unsolved_ticket_count as dev_unassigned_unsolved_ticket_count,\n        prod.unreplied_ticket_count as prod_unreplied_ticket_count,\n        dev.unreplied_ticket_count as dev_unreplied_ticket_count,\n        prod.unreplied_unsolved_ticket_count as prod_unreplied_unsolved_ticket_count,\n        dev.unreplied_unsolved_ticket_count as dev_unreplied_unsolved_ticket_count,\n        prod.unsolved_ticket_count as prod_unsolved_ticket_count,\n        dev.unsolved_ticket_count as dev_unsolved_ticket_count,\n        prod.recovered_ticket_count as prod_recovered_ticket_count,\n        dev.recovered_ticket_count as dev_recovered_ticket_count,\n        prod.deleted_ticket_count as prod_deleted_ticket_count,\n        dev.deleted_ticket_count as dev_deleted_ticket_count\n\n    from prod \n    cross join dev \n)\n\nselect *\nfrom joined \nwhere -- sometimes one of the below metrics will be off by 6-8, but let's leave 5 for now\n    abs(prod_user_count - dev_user_count) > 5\n    or abs(prod_active_agent_count - dev_active_agent_count) > 5\n    or abs(prod_deleted_user_count - dev_deleted_user_count) > 5\n    or abs(prod_end_user_count - dev_end_user_count) > 5\n    or abs(prod_suspended_user_count - dev_suspended_user_count) > 5\n    or abs(prod_new_ticket_count - dev_new_ticket_count) > 5\n    or abs(prod_on_hold_ticket_count - dev_on_hold_ticket_count) > 5\n    or abs(prod_open_ticket_count - dev_open_ticket_count) > 8\n    or abs(prod_pending_ticket_count - dev_pending_ticket_count) > 5\n    or abs(prod_solved_ticket_count - dev_solved_ticket_count) > 5\n    or abs(prod_problem_ticket_count - dev_problem_ticket_count) > 5\n    or abs(prod_assigned_ticket_count - dev_assigned_ticket_count) > 5\n    or abs(prod_reassigned_ticket_count - dev_reassigned_ticket_count) > 5\n    or abs(prod_reopened_ticket_count - dev_reopened_ticket_count) > 5\n    or abs(prod_surveyed_satisfaction_ticket_count - dev_surveyed_satisfaction_ticket_count) > 5\n    or abs(prod_unassigned_unsolved_ticket_count - dev_unassigned_unsolved_ticket_count) > 5\n    or abs(prod_unreplied_ticket_count - dev_unreplied_ticket_count) > 5\n    or abs(prod_unreplied_unsolved_ticket_count - dev_unreplied_unsolved_ticket_count) > 5\n    or abs(prod_unsolved_ticket_count - dev_unsolved_ticket_count) > 5\n    or abs(prod_recovered_ticket_count - dev_recovered_ticket_count) > 5\n    or abs(prod_deleted_ticket_count - dev_deleted_ticket_count) > 5", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.consistency_ticket_enriched": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "consistency_ticket_enriched", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "consistency/consistency_ticket_enriched.sql", "original_file_path": "tests/consistency/consistency_ticket_enriched.sql", "unique_id": "test.zendesk_integration_tests.consistency_ticket_enriched", "fqn": ["zendesk_integration_tests", "consistency", "consistency_ticket_enriched"], "alias": "consistency_ticket_enriched", "checksum": {"name": "sha256", "checksum": "4820467fc2fb5102327fa43044731f5fc6e486888ddae0371f79e8e735213218"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.297357, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        {{ dbt_utils.star(from=ref('zendesk__ticket_enriched'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_zendesk_prod.zendesk__ticket_enriched\n    where  true\n    and {{ dbt.datediff(dbt.current_timestamp(), \"updated_at\", \"minute\") }} >= 60\n),\n\ndev as (\n    select\n        {{ dbt_utils.star(from=ref('zendesk__ticket_enriched'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_zendesk_dev.zendesk__ticket_enriched\n    where true\n    and {{ dbt.datediff(dbt.current_timestamp(), \"updated_at\", \"minute\") }} >= 60\n\n    {# Make sure we're only comparing one schema since this current update (v0.19.0) added mult-schema support. Can remove for future releases #}\n    {{ \"and source_relation =  '\" ~ (var(\"zendesk_database\", target.database)|lower ~ \".\" ~ var(\"zendesk_schema\", \"zendesk\")) ~ \"'\" if 'source_relation' in var(\"consistency_test_exclude_fields\", '[]') }}\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_enriched", "package": null, "version": null}, {"name": "zendesk__ticket_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt.current_timestamp", "macro.dbt.datediff"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.consistency_ticket_backlog": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "consistency_ticket_backlog", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "consistency/consistency_ticket_backlog.sql", "original_file_path": "tests/consistency/consistency_ticket_backlog.sql", "unique_id": "test.zendesk_integration_tests.consistency_ticket_backlog", "fqn": ["zendesk_integration_tests", "consistency", "consistency_ticket_backlog"], "alias": "consistency_ticket_backlog", "checksum": {"name": "sha256", "checksum": "246eddc78cd1e353a86b49716a763479eef59dc05d5e891b984131d3526cba51"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.3055842, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        {{ dbt_utils.star(from=ref('zendesk__ticket_backlog'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_zendesk_prod.zendesk__ticket_backlog\n),\n\ndev as (\n    select\n        {{ dbt_utils.star(from=ref('zendesk__ticket_backlog'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_zendesk_dev.zendesk__ticket_backlog\n\n    {# Make sure we're only comparing one schema since this current update (v0.19.0) added mult-schema support. Can remove for future releases #}\n    {{ \"where source_relation =  '\" ~ (var(\"zendesk_database\", target.database)|lower ~ \".\" ~ var(\"zendesk_schema\", \"zendesk\")) ~ \"'\" if 'source_relation' in var(\"consistency_test_exclude_fields\", '[]') }}\n    \n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final\nwhere date_day < current_date", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_backlog", "package": null, "version": null}, {"name": "zendesk__ticket_backlog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.consistency_sla_policy_count": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "consistency_sla_policy_count", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "consistency/consistency_sla_policy_count.sql", "original_file_path": "tests/consistency/consistency_sla_policy_count.sql", "unique_id": "test.zendesk_integration_tests.consistency_sla_policy_count", "fqn": ["zendesk_integration_tests", "consistency", "consistency_sla_policy_count"], "alias": "consistency_sla_policy_count", "checksum": {"name": "sha256", "checksum": "85a103fa4d8f68db20d12d3919c97e249d93cde52ec63cd4496c70ced0bf90c9"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.310841, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        ticket_id,\n        count(*) as total_slas\n    from {{ target.schema }}_zendesk_prod.zendesk__sla_policies\n    where date(sla_applied_at) < current_date\n    {{ \"and ticket_id not in \" ~ var('fivetran_consistency_sla_policy_count_exclusion_tickets',[]) ~ \"\" if var('fivetran_consistency_sla_policy_count_exclusion_tickets',[]) }}\n    group by 1\n),\n\ndev as (\n    select\n        ticket_id,\n        count(*) as total_slas\n    from {{ target.schema }}_zendesk_dev.zendesk__sla_policies\n    where date(sla_applied_at) < current_date\n    {{ \"and ticket_id not in \" ~ var('fivetran_consistency_sla_policy_count_exclusion_tickets',[]) ~ \"\" if var('fivetran_consistency_sla_policy_count_exclusion_tickets',[]) }}\n    group by 1\n),\n\nfinal as (\n    select \n        prod.ticket_id as prod_ticket_id,\n        dev.ticket_id as dev_ticket_id,\n        prod.total_slas as prod_sla_total,\n        dev.total_slas as dev_sla_total\n    from prod\n    full outer join dev \n        on dev.ticket_id = prod.ticket_id\n)\n\nselect *\nfrom final\nwhere prod_sla_total != dev_sla_total", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.consistency_sla_policies": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "consistency_sla_policies", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "consistency/consistency_sla_policies.sql", "original_file_path": "tests/consistency/consistency_sla_policies.sql", "unique_id": "test.zendesk_integration_tests.consistency_sla_policies", "fqn": ["zendesk_integration_tests", "consistency", "consistency_sla_policies"], "alias": "consistency_sla_policies", "checksum": {"name": "sha256", "checksum": "b33861ba56895d63373da3edf17cd06d270d1799a458857966075030aace5a18"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.314379, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select \n        ticket_id,\n        sla_policy_name,\n        metric,\n        sla_applied_at,\n        target,\n        in_business_hours,\n        sla_breach_at,\n        sla_elapsed_time,\n        is_active_sla,\n        is_sla_breach\n    from {{ target.schema }}_zendesk_prod.zendesk__sla_policies\n),\n\ndev as (\n    select\n        ticket_id,\n        sla_policy_name,\n        metric,\n        sla_applied_at,\n        target,\n        in_business_hours,\n        sla_breach_at,\n        sla_elapsed_time,\n        is_active_sla,\n        is_sla_breach\n    from {{ target.schema }}_zendesk_dev.zendesk__sla_policies\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\ncombine as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n),\n\nfinal as (\n    select \n        *,\n        max(sla_elapsed_time) over (partition by ticket_id, metric, sla_applied_at) as max_sla_elapsed_time,\n        min(sla_elapsed_time) over (partition by ticket_id, metric, sla_applied_at) as min_sla_elapsed_time\n\n    from combine \n    {{ \"where ticket_id not in \" ~ var('fivetran_consistency_sla_policies_exclusion_tickets',[]) ~ \"\" if var('fivetran_consistency_sla_policies_exclusion_tickets',[]) }}\n)\n\nselect *\nfrom final\nwhere \n    {# Take differences in runtime into account #}\n    max_sla_elapsed_time - min_sla_elapsed_time > 5\n    and date(sla_applied_at) < current_date", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.metrics_count_match": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "metrics_count_match", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "integrity/metrics_count_match.sql", "original_file_path": "tests/integrity/metrics_count_match.sql", "unique_id": "test.zendesk_integration_tests.metrics_count_match", "fqn": ["zendesk_integration_tests", "integrity", "metrics_count_match"], "alias": "metrics_count_match", "checksum": {"name": "sha256", "checksum": "a8ce88f458a1fec11fda525ada45c372570c9c5a0a6bb569c761639016f25664"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.317814, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- check that all the tickets are accounted for in the metrics\nwith stg_count as (\n    select\n        source_relation,\n        count(*) as stg_ticket_count\n    from {{ ref('stg_zendesk__ticket') }}\n    group by 1\n),\n\nmetric_count as (\n    select\n        source_relation,\n        count(*) as metric_ticket_count\n    from {{ ref('zendesk__ticket_metrics') }}\n    group by 1\n)\n\nselect\n    stg_count.source_relation as stg_source_relation,\n    metric_count.source_relation as model_source_relation,\n    stg_ticket_count,\n    metric_ticket_count\nfrom stg_count\nfull join metric_count\n    using(source_relation)\nwhere coalesce(stg_ticket_count, -1) != coalesce(metric_ticket_count, -2)", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket", "package": null, "version": null}, {"name": "zendesk__ticket_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.sla_metrics_parity": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "sla_metrics_parity", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "integrity/sla_metrics_parity.sql", "original_file_path": "tests/integrity/sla_metrics_parity.sql", "unique_id": "test.zendesk_integration_tests.sla_metrics_parity", "fqn": ["zendesk_integration_tests", "integrity", "sla_metrics_parity"], "alias": "sla_metrics_parity", "checksum": {"name": "sha256", "checksum": "f0c1feaf24c0563fbd21095ed8cccb7defcb05bd544778f3f5bf499a5a6ca28a"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.320715, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n/*\nThis test is to ensure the sla_elapsed_time from zendesk__sla_policies matches the corresponding time in zendesk__ticket_metrics.\n*/\n\nwith dev_slas as (\n    select *\n    from {{ target.schema }}_zendesk_dev.zendesk__sla_policies\n    where in_business_hours\n\n), dev_metrics as (\n    select *\n    from {{ target.schema }}_zendesk_dev.zendesk__ticket_metrics\n\n), dev_compare as (\n    select \n        dev_slas.source_relation,\n        dev_slas.ticket_id,\n        dev_slas.metric,\n        cast(dev_slas.sla_elapsed_time as {{ dbt.type_int() }}) as time_from_slas,\n        case when metric = 'agent_work_time' then dev_metrics.agent_work_time_in_business_minutes\n            when metric = 'requester_wait_time' then dev_metrics.requester_wait_time_in_business_minutes\n            when metric = 'first_reply_time' then dev_metrics.first_reply_time_business_minutes\n        end as time_from_metrics\n    from dev_slas\n    left join dev_metrics\n        on dev_metrics.ticket_id = dev_slas.ticket_id\n        and dev_metrics.source_relation = dev_slas.source_relation\n)\n\nselect *\nfrom dev_compare\nwhere abs(time_from_slas - time_from_metrics) >= 5\n{{ \"and ticket_id not in \" ~ var('fivetran_integrity_sla_metric_parity_exclusion_tickets',[]) ~ \"\" if var('fivetran_integrity_sla_metric_parity_exclusion_tickets',[]) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_int"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.sla_first_reply_time_match": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "sla_first_reply_time_match", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "integrity/sla_first_reply_time_match.sql", "original_file_path": "tests/integrity/sla_first_reply_time_match.sql", "unique_id": "test.zendesk_integration_tests.sla_first_reply_time_match", "fqn": ["zendesk_integration_tests", "integrity", "sla_first_reply_time_match"], "alias": "sla_first_reply_time_match", "checksum": {"name": "sha256", "checksum": "e4e7d360e0fccc8e4b8ff2d458e86adcd8f16a13f64e1687be4aeb2e65f8a5b2"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.325728, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith ticket_metrics as (\n    select\n        ticket_id,\n        source_relation,\n        first_reply_time_business_minutes\n    from {{ ref('zendesk__ticket_metrics') }}\n),\n\nsla_policies as (\n    select\n        ticket_id,\n        source_relation,\n        sla_elapsed_time\n    from {{ ref('zendesk__sla_policies') }}\n    where metric = 'first_reply_time'\n        and in_business_hours\n),\n\nmatch_check as (\n    select \n        ticket_metrics.source_relation,\n        ticket_metrics.ticket_id,\n        ticket_metrics.first_reply_time_business_minutes,\n        sla_policies.sla_elapsed_time\n    from ticket_metrics\n    full outer join sla_policies \n        on ticket_metrics.ticket_id = sla_policies.ticket_id\n        and ticket_metrics.source_relation = sla_policies.source_relation\n)\n\nselect *\nfrom match_check\nwhere abs(round(first_reply_time_business_minutes,0) - round(sla_elapsed_time,0)) >= 2\n    {{ \"and ticket_id not in \" ~ var('fivetran_integrity_sla_first_reply_time_exclusion_tickets',[]) ~ \"\" if var('fivetran_integrity_sla_first_reply_time_exclusion_tickets',[]) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "zendesk__ticket_metrics", "package": null, "version": null}, {"name": "zendesk__sla_policies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zendesk_integration_tests.sla_count_match": [{"database": "dbt-package-testing", "schema": "zendesk_tests_dbt_test__audit", "name": "sla_count_match", "resource_type": "test", "package_name": "zendesk_integration_tests", "path": "integrity/sla_count_match.sql", "original_file_path": "tests/integrity/sla_count_match.sql", "unique_id": "test.zendesk_integration_tests.sla_count_match", "fqn": ["zendesk_integration_tests", "integrity", "sla_count_match"], "alias": "sla_count_match", "checksum": {"name": "sha256", "checksum": "56baa8085985341766a2291bf35412c57d500c77dcd4f6ae2bb15ba2812e6588"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1751990096.328992, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- The necessary source and source_filter adjustments used below originate from the int_zendesk__sla_policy_applied model\nwith source as (\n    select\n        *,\n        case when field_name = 'first_reply_time' then row_number() over (partition by ticket_id, field_name, source_relation order by valid_starting_at) else 1 end as latest_sla\n    from {{ ref('stg_zendesk__ticket_field_history') }}\n),\n\nsource_filter as (\n    select\n        ticket_id,\n        source_relation,\n        count(*) as source_row_count\n    from source\n    where field_name in ('next_reply_time', 'first_reply_time', 'agent_work_time', 'requester_wait_time')\n        and value is not null\n        and latest_sla = 1\n    group by 1,2\n),\n\nsla_policies as (\n    select\n        ticket_id,\n        source_relation,\n        count(*) as end_model_row_count\n    from {{ ref('zendesk__sla_policies') }}\n    group by 1,2\n),\n\nmatch_check as (\n    select \n        coalesce(sla_policies.source_relation, source_filter.source_relation) as source_relation,\n        sla_policies.ticket_id,\n        end_model_row_count,\n        source_row_count\n    from sla_policies\n    full outer join source_filter\n        on source_filter.ticket_id = sla_policies.ticket_id\n        and source_filter.source_relation = sla_policies.source_relation\n)\n\nselect *\nfrom match_check\nwhere end_model_row_count != source_row_count\n{{ \"and ticket_id not in \" ~ var('fivetran_integrity_sla_count_match_tickets',[]) ~ \"\" if var('fivetran_integrity_sla_count_match_tickets',[]) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_zendesk__ticket_field_history", "package": null, "version": null}, {"name": "zendesk__sla_policies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "seed.zendesk_integration_tests.organization_tag_data_snowflake": [{"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "organization_tag_data_snowflake", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "organization_tag_data_snowflake.csv", "original_file_path": "seeds/organization_tag_data_snowflake.csv", "unique_id": "seed.zendesk_integration_tests.organization_tag_data_snowflake", "fqn": ["zendesk_integration_tests", "organization_tag_data_snowflake"], "alias": "organization_tag_data", "checksum": {"name": "sha256", "checksum": "d9219b78d44b8b4620100b064a3af350fb5fa2046bdb0c376a09bade7a99f6f7"}, "config": {"enabled": false, "alias": "organization_tag_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}, "alias": "organization_tag_data", "enabled": "{{ true if target.type == 'snowflake' else false }}"}, "created_at": 1751990096.4135292, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`organization_tag_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}], "seed.zendesk_integration_tests.user_data_snowflake": [{"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "user_data_snowflake", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "user_data_snowflake.csv", "original_file_path": "seeds/user_data_snowflake.csv", "unique_id": "seed.zendesk_integration_tests.user_data_snowflake", "fqn": ["zendesk_integration_tests", "user_data_snowflake"], "alias": "user_data", "checksum": {"name": "sha256", "checksum": "1d7712839e43bb49c4fb8a2bba60a98e8c3ea558c91a3d4fb4f4db6e1425f178"}, "config": {"enabled": false, "alias": "user_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "external_id": "int64", "locale_id": "int64", "organization_id": "int64", "created_at": "timestamp", "last_login_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "external_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "locale_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "organization_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "last_login_at": "timestamp", "updated_at": "timestamp"}, "alias": "user_data", "enabled": "{{ true if target.type == 'snowflake' else false }}"}, "created_at": 1751990096.4227421, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`user_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}], "seed.zendesk_integration_tests.user_tag_data_snowflake": [{"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "user_tag_data_snowflake", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "user_tag_data_snowflake.csv", "original_file_path": "seeds/user_tag_data_snowflake.csv", "unique_id": "seed.zendesk_integration_tests.user_tag_data_snowflake", "fqn": ["zendesk_integration_tests", "user_tag_data_snowflake"], "alias": "user_tag_data", "checksum": {"name": "sha256", "checksum": "7c2274e05f81c1f9906a6a4a217c4493bf003a151402391069f49c64cf9ec5fb"}, "config": {"enabled": false, "alias": "user_tag_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}, "alias": "user_tag_data", "enabled": "{{ true if target.type == 'snowflake' else false }}"}, "created_at": 1751990096.426524, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`user_tag_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}], "seed.zendesk_integration_tests.brand_data_postgres": [{"database": "dbt-package-testing", "schema": "zendesk_tests", "name": "brand_data_postgres", "resource_type": "seed", "package_name": "zendesk_integration_tests", "path": "brand_data_postgres.csv", "original_file_path": "seeds/brand_data_postgres.csv", "unique_id": "seed.zendesk_integration_tests.brand_data_postgres", "fqn": ["zendesk_integration_tests", "brand_data_postgres"], "alias": "brand_data", "checksum": {"name": "sha256", "checksum": "aa338ab31e4a221da8a0ed5040ec921a4d39a7377ae37a7e79b49e1402e490f5"}, "config": {"enabled": false, "alias": "brand_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp"}, "alias": "brand_data", "enabled": "{{ true if target.type == 'postgres' else false }}"}, "created_at": 1751990096.43154, "relation_name": "`dbt-package-testing`.`zendesk_tests`.`brand_data`", "raw_code": "", "doc_blocks": [], "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Velocity/Zendesk/dbt_zendesk/integration_tests", "depends_on": {"macros": []}}]}, "parent_map": {"seed.zendesk_integration_tests.organization_tag_data": [], "seed.zendesk_integration_tests.ticket_comment_data": [], "seed.zendesk_integration_tests.brand_data": [], "seed.zendesk_integration_tests.schedule_holiday_data": [], "seed.zendesk_integration_tests.ticket_chat_data": [], "seed.zendesk_integration_tests.domain_name_data": [], "seed.zendesk_integration_tests.ticket_field_history_data": [], "seed.zendesk_integration_tests.audit_log_data": [], "seed.zendesk_integration_tests.ticket_data": [], "seed.zendesk_integration_tests.ticket_chat_event_data": [], "seed.zendesk_integration_tests.time_zone_data": [], "seed.zendesk_integration_tests.ticket_schedule_data": [], "seed.zendesk_integration_tests.daylight_time_data": [], "seed.zendesk_integration_tests.user_data": [], "seed.zendesk_integration_tests.schedule_data": [], "seed.zendesk_integration_tests.ticket_tag_data": [], "seed.zendesk_integration_tests.organization_data": [], "seed.zendesk_integration_tests.ticket_form_history_data": [], "seed.zendesk_integration_tests.group_data": [], "seed.zendesk_integration_tests.user_tag_data": [], "model.zendesk.zendesk__ticket_enriched": ["model.zendesk.int_zendesk__assignee_updates", "model.zendesk.int_zendesk__latest_ticket_form", "model.zendesk.int_zendesk__organization_aggregates", "model.zendesk.int_zendesk__requester_updates", "model.zendesk.int_zendesk__ticket_aggregates", "model.zendesk.int_zendesk__ticket_historical_satisfaction", "model.zendesk.int_zendesk__user_aggregates", "model.zendesk.int_zendesk__user_role_history", "model.zendesk_source.stg_zendesk__group"], "model.zendesk.zendesk__ticket_metrics": ["model.zendesk.int_zendesk__comment_metrics", "model.zendesk.int_zendesk__ticket_first_reply_time_business", "model.zendesk.int_zendesk__ticket_first_resolution_time_business", "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "model.zendesk.int_zendesk__ticket_reply_times_calendar", "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_work_time_business", "model.zendesk.int_zendesk__ticket_work_time_calendar", "model.zendesk.zendesk__ticket_enriched"], "model.zendesk.zendesk__ticket_summary": ["model.zendesk.zendesk__ticket_metrics", "model.zendesk_source.stg_zendesk__user"], "model.zendesk.zendesk__ticket_field_history": ["model.zendesk.int_zendesk__field_calendar_spine", "model.zendesk.int_zendesk__field_history_scd"], "model.zendesk.zendesk__sla_policies": ["model.zendesk.int_zendesk__agent_work_time_business_hours", "model.zendesk.int_zendesk__agent_work_time_calendar_hours", "model.zendesk.int_zendesk__reply_time_combined", "model.zendesk.int_zendesk__requester_wait_time_business_hours", "model.zendesk.int_zendesk__requester_wait_time_calendar_hours"], "model.zendesk.zendesk__ticket_backlog": ["model.zendesk.zendesk__ticket_field_history", "model.zendesk_source.stg_zendesk__brand", "model.zendesk_source.stg_zendesk__group", "model.zendesk_source.stg_zendesk__organization", "model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__user"], "model.zendesk.int_zendesk__sla_policy_applied": ["model.zendesk.int_zendesk__ticket_aggregates", "model.zendesk.int_zendesk__updates"], "model.zendesk.int_zendesk__agent_work_time_business_hours": ["model.zendesk.int_zendesk__agent_work_time_filtered_statuses", "model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_schedules"], "model.zendesk.int_zendesk__agent_work_time_calendar_hours": ["model.zendesk.int_zendesk__agent_work_time_filtered_statuses"], "model.zendesk.int_zendesk__agent_work_time_filtered_statuses": ["model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.int_zendesk__ticket_historical_status"], "model.zendesk.int_zendesk__reply_time_business_hours": ["model.zendesk.int_zendesk__commenter_reply_at", "model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.int_zendesk__ticket_schedules", "model.zendesk.int_zendesk__updates", "model.zendesk_source.stg_zendesk__schedule"], "model.zendesk.int_zendesk__reply_time_calendar_hours": ["model.zendesk.int_zendesk__sla_policy_applied"], "model.zendesk.int_zendesk__reply_time_combined": ["model.zendesk.int_zendesk__commenter_reply_at", "model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__reply_time_calendar_hours", "model.zendesk.int_zendesk__updates"], "model.zendesk.int_zendesk__commenter_reply_at": ["model.zendesk.int_zendesk__updates", "model.zendesk.int_zendesk__user_role_history"], "model.zendesk.int_zendesk__requester_wait_time_calendar_hours": ["model.zendesk.int_zendesk__requester_wait_time_filtered_statuses"], "model.zendesk.int_zendesk__requester_wait_time_business_hours": ["model.zendesk.int_zendesk__requester_wait_time_filtered_statuses", "model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_schedules"], "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses": ["model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.int_zendesk__ticket_historical_status"], "model.zendesk.int_zendesk__ticket_reply_times": ["model.zendesk.int_zendesk__comments_enriched"], "model.zendesk.int_zendesk__ticket_reply_times_calendar": ["model.zendesk.int_zendesk__ticket_reply_times", "model.zendesk_source.stg_zendesk__ticket"], "model.zendesk.int_zendesk__comments_enriched": ["model.zendesk.int_zendesk__updates", "model.zendesk.int_zendesk__user_role_history"], "model.zendesk.int_zendesk__ticket_first_reply_time_business": ["model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_reply_times", "model.zendesk.int_zendesk__ticket_schedules"], "model.zendesk.int_zendesk__field_history_enriched": ["model.zendesk.int_zendesk__updater_information", "model.zendesk_source.stg_zendesk__ticket_field_history"], "model.zendesk.int_zendesk__field_history_pivot": ["model.zendesk.int_zendesk__field_history_enriched", "model.zendesk_source.stg_zendesk__ticket_field_history"], "model.zendesk.int_zendesk__updater_information": ["model.zendesk.int_zendesk__organization_aggregates", "model.zendesk.int_zendesk__user_aggregates"], "model.zendesk.int_zendesk__field_history_scd": ["model.zendesk.int_zendesk__field_history_pivot"], "model.zendesk.int_zendesk__field_calendar_spine": ["model.zendesk.int_zendesk__calendar_spine", "model.zendesk_source.stg_zendesk__ticket"], "model.zendesk.int_zendesk__ticket_work_time_calendar": ["model.zendesk.int_zendesk__ticket_historical_status"], "model.zendesk.int_zendesk__ticket_work_time_business": ["model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_historical_status", "model.zendesk.int_zendesk__ticket_schedules"], "model.zendesk.int_zendesk__calendar_spine": ["model.zendesk_source.stg_zendesk__ticket"], "model.zendesk.int_zendesk__timezone_daylight": ["model.zendesk_source.stg_zendesk__daylight_time", "model.zendesk_source.stg_zendesk__time_zone"], "model.zendesk.int_zendesk__ticket_resolution_times_calendar": ["model.zendesk.int_zendesk__ticket_historical_assignee", "model.zendesk.int_zendesk__ticket_historical_group", "model.zendesk.int_zendesk__ticket_historical_status", "model.zendesk_source.stg_zendesk__ticket"], "model.zendesk.int_zendesk__ticket_first_resolution_time_business": ["model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_schedules"], "model.zendesk.int_zendesk__ticket_full_resolution_time_business": ["model.zendesk.int_zendesk__schedule_spine", "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_schedules"], "model.zendesk.zendesk__document": ["model.zendesk.int_zendesk__ticket_comment_documents_grouped", "model.zendesk.int_zendesk__ticket_document"], "model.zendesk.int_zendesk__ticket_comment_documents_grouped": ["model.zendesk.int_zendesk__ticket_comment_document"], "model.zendesk.int_zendesk__ticket_comment_document": ["model.zendesk_source.stg_zendesk__ticket_comment", "model.zendesk_source.stg_zendesk__user"], "model.zendesk.int_zendesk__ticket_document": ["model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__user"], "model.zendesk.int_zendesk__updates": ["model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__ticket_chat", "model.zendesk_source.stg_zendesk__ticket_chat_event", "model.zendesk_source.stg_zendesk__ticket_comment", "model.zendesk_source.stg_zendesk__ticket_field_history"], "model.zendesk.int_zendesk__ticket_historical_assignee": ["model.zendesk.int_zendesk__updates"], "model.zendesk.int_zendesk__ticket_historical_status": ["model.zendesk.int_zendesk__updates"], "model.zendesk.int_zendesk__user_role_history": ["model.zendesk_source.stg_zendesk__audit_log", "model.zendesk_source.stg_zendesk__user"], "model.zendesk.int_zendesk__user_aggregates": ["model.zendesk_source.stg_zendesk__user", "model.zendesk_source.stg_zendesk__user_tag"], "model.zendesk.int_zendesk__schedule_spine": ["model.zendesk.int_zendesk__schedule_holiday", "model.zendesk.int_zendesk__schedule_timezones"], "model.zendesk.int_zendesk__ticket_schedules": ["model.zendesk_source.stg_zendesk__schedule", "model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__ticket_schedule"], "model.zendesk.int_zendesk__assignee_updates": ["model.zendesk.int_zendesk__updates", "model.zendesk_source.stg_zendesk__ticket"], "model.zendesk.int_zendesk__comment_metrics": ["model.zendesk.int_zendesk__comments_enriched"], "model.zendesk.int_zendesk__schedule_timezones": ["model.zendesk.int_zendesk__schedule_history", "model.zendesk.int_zendesk__timezone_daylight", "model.zendesk_source.stg_zendesk__schedule"], "model.zendesk.int_zendesk__ticket_historical_group": ["model.zendesk.int_zendesk__updates"], "model.zendesk.int_zendesk__schedule_history": ["model.zendesk_source.stg_zendesk__audit_log"], "model.zendesk.int_zendesk__schedule_holiday": ["model.zendesk_source.stg_zendesk__schedule", "model.zendesk_source.stg_zendesk__schedule_holiday"], "model.zendesk.int_zendesk__requester_updates": ["model.zendesk.int_zendesk__updates", "model.zendesk_source.stg_zendesk__ticket"], "model.zendesk.int_zendesk__ticket_historical_satisfaction": ["model.zendesk.int_zendesk__updates"], "model.zendesk.int_zendesk__latest_ticket_form": ["model.zendesk_source.stg_zendesk__ticket_form_history"], "model.zendesk.int_zendesk__ticket_aggregates": ["model.zendesk_source.stg_zendesk__brand", "model.zendesk_source.stg_zendesk__ticket", "model.zendesk_source.stg_zendesk__ticket_tag"], "model.zendesk.int_zendesk__organization_aggregates": ["model.zendesk_source.stg_zendesk__domain_name", "model.zendesk_source.stg_zendesk__organization", "model.zendesk_source.stg_zendesk__organization_tag"], "operation.zendesk.zendesk-on-run-start-0": [], "model.zendesk_source.stg_zendesk__user_tag": ["model.zendesk_source.stg_zendesk__user_tag_tmp"], "model.zendesk_source.stg_zendesk__ticket_chat": ["model.zendesk_source.stg_zendesk__ticket_chat_tmp"], "model.zendesk_source.stg_zendesk__ticket_tag": ["model.zendesk_source.stg_zendesk__ticket_tag_tmp"], "model.zendesk_source.stg_zendesk__ticket_field_history": ["model.zendesk_source.stg_zendesk__ticket_field_history_tmp"], "model.zendesk_source.stg_zendesk__schedule_holiday": ["model.zendesk_source.stg_zendesk__schedule_holiday_tmp"], "model.zendesk_source.stg_zendesk__daylight_time": ["model.zendesk_source.stg_zendesk__daylight_time_tmp"], "model.zendesk_source.stg_zendesk__organization": ["model.zendesk_source.stg_zendesk__organization_tmp"], "model.zendesk_source.stg_zendesk__time_zone": ["model.zendesk_source.stg_zendesk__time_zone_tmp"], "model.zendesk_source.stg_zendesk__group": ["model.zendesk_source.stg_zendesk__group_tmp"], "model.zendesk_source.stg_zendesk__ticket_comment": ["model.zendesk_source.stg_zendesk__ticket_comment_tmp"], "model.zendesk_source.stg_zendesk__ticket_schedule": ["model.zendesk_source.stg_zendesk__ticket_schedule_tmp"], "model.zendesk_source.stg_zendesk__schedule": ["model.zendesk_source.stg_zendesk__schedule_tmp"], "model.zendesk_source.stg_zendesk__user": ["model.zendesk_source.stg_zendesk__user_tmp"], "model.zendesk_source.stg_zendesk__brand": ["model.zendesk_source.stg_zendesk__brand_tmp"], "model.zendesk_source.stg_zendesk__ticket_form_history": ["model.zendesk_source.stg_zendesk__ticket_form_history_tmp"], "model.zendesk_source.stg_zendesk__audit_log": ["model.zendesk_source.stg_zendesk__audit_log_tmp"], "model.zendesk_source.stg_zendesk__ticket_chat_event": ["model.zendesk_source.stg_zendesk__ticket_chat_event_tmp"], "model.zendesk_source.stg_zendesk__domain_name": ["model.zendesk_source.stg_zendesk__domain_name_tmp"], "model.zendesk_source.stg_zendesk__organization_tag": ["model.zendesk_source.stg_zendesk__organization_tag_tmp"], "model.zendesk_source.stg_zendesk__ticket": ["model.zendesk_source.stg_zendesk__ticket_tmp"], "model.zendesk_source.stg_zendesk__daylight_time_tmp": ["source.zendesk_source.zendesk.daylight_time"], "model.zendesk_source.stg_zendesk__user_tmp": ["source.zendesk_source.zendesk.user"], "model.zendesk_source.stg_zendesk__group_tmp": ["source.zendesk_source.zendesk.group"], "model.zendesk_source.stg_zendesk__ticket_tmp": ["source.zendesk_source.zendesk.ticket"], "model.zendesk_source.stg_zendesk__brand_tmp": ["source.zendesk_source.zendesk.brand"], "model.zendesk_source.stg_zendesk__ticket_tag_tmp": ["source.zendesk_source.zendesk.ticket_tag"], "model.zendesk_source.stg_zendesk__schedule_holiday_tmp": ["source.zendesk_source.zendesk.schedule_holiday"], "model.zendesk_source.stg_zendesk__user_tag_tmp": ["source.zendesk_source.zendesk.user_tag"], "model.zendesk_source.stg_zendesk__ticket_field_history_tmp": ["source.zendesk_source.zendesk.ticket_field_history"], "model.zendesk_source.stg_zendesk__ticket_chat_tmp": ["source.zendesk_source.zendesk.ticket_chat"], "model.zendesk_source.stg_zendesk__ticket_form_history_tmp": ["source.zendesk_source.zendesk.ticket_form_history"], "model.zendesk_source.stg_zendesk__ticket_comment_tmp": ["source.zendesk_source.zendesk.ticket_comment"], "model.zendesk_source.stg_zendesk__organization_tag_tmp": ["source.zendesk_source.zendesk.organization_tag"], "model.zendesk_source.stg_zendesk__audit_log_tmp": ["source.zendesk_source.zendesk.audit_log"], "model.zendesk_source.stg_zendesk__schedule_tmp": ["source.zendesk_source.zendesk.schedule"], "model.zendesk_source.stg_zendesk__organization_tmp": ["source.zendesk_source.zendesk.organization"], "model.zendesk_source.stg_zendesk__ticket_schedule_tmp": ["source.zendesk_source.zendesk.ticket_schedule"], "model.zendesk_source.stg_zendesk__domain_name_tmp": ["source.zendesk_source.zendesk.domain_name"], "model.zendesk_source.stg_zendesk__ticket_chat_event_tmp": ["source.zendesk_source.zendesk.ticket_chat_event"], "model.zendesk_source.stg_zendesk__time_zone_tmp": ["source.zendesk_source.zendesk.time_zone"], "test.zendesk.not_null_zendesk__ticket_enriched_ticket_id.e3efc5bf0a": ["model.zendesk.zendesk__ticket_enriched"], "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_enriched_ticket_id__source_relation.be39bf8b5c": ["model.zendesk.zendesk__ticket_enriched"], "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__sla_policies_sla_event_id__source_relation.5f9ad499dc": ["model.zendesk.zendesk__sla_policies"], "test.zendesk.not_null_zendesk__ticket_metrics_ticket_id.3466b76bbd": ["model.zendesk.zendesk__ticket_metrics"], "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_metrics_ticket_id__source_relation.6288a95671": ["model.zendesk.zendesk__ticket_metrics"], "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981": ["model.zendesk_source.stg_zendesk__ticket"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_ticket_id__source_relation.75067aca7d": ["model.zendesk_source.stg_zendesk__ticket"], "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741": ["model.zendesk_source.stg_zendesk__brand"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__brand_brand_id__source_relation.1d4af19ac3": ["model.zendesk_source.stg_zendesk__brand"], "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3": ["model.zendesk_source.stg_zendesk__domain_name"], "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec": ["model.zendesk_source.stg_zendesk__group"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__group_group_id__source_relation.5c96f83c83": ["model.zendesk_source.stg_zendesk__group"], "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a": ["model.zendesk_source.stg_zendesk__organization"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__organization_organization_id__source_relation.e8b3d0c0b4": ["model.zendesk_source.stg_zendesk__organization"], "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606": ["model.zendesk_source.stg_zendesk__ticket_comment"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_comment_ticket_comment_id__source_relation.9e0ed5e891": ["model.zendesk_source.stg_zendesk__ticket_comment"], "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926": ["model.zendesk_source.stg_zendesk__user"], "test.zendesk_source.not_null_stg_zendesk__schedule_schedule_id.fd74fb065d": ["model.zendesk_source.stg_zendesk__schedule"], "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17": ["model.zendesk_source.stg_zendesk__ticket_form_history"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year__source_relation.0621b61b9b": ["model.zendesk_source.stg_zendesk__daylight_time"], "test.zendesk_source.not_null_stg_zendesk__time_zone_time_zone.b25b3452b1": ["model.zendesk_source.stg_zendesk__time_zone"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__time_zone_time_zone__source_relation.16bb413a39": ["model.zendesk_source.stg_zendesk__time_zone"], "test.zendesk_source.not_null_stg_zendesk__schedule_holiday_holiday_id.52eb08f782": ["model.zendesk_source.stg_zendesk__schedule_holiday"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__schedule_holiday_holiday_id__source_relation.74b720785d": ["model.zendesk_source.stg_zendesk__schedule_holiday"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_chat_id__source_relation.67284fc71a": ["model.zendesk_source.stg_zendesk__ticket_chat"], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_event_chat_id__created_at__source_relation.3f64974f71": ["model.zendesk_source.stg_zendesk__ticket_chat_event"], "source.zendesk_source.zendesk.audit_log": [], "source.zendesk_source.zendesk.ticket": [], "source.zendesk_source.zendesk.brand": [], "source.zendesk_source.zendesk.domain_name": [], "source.zendesk_source.zendesk.group": [], "source.zendesk_source.zendesk.organization_tag": [], "source.zendesk_source.zendesk.organization": [], "source.zendesk_source.zendesk.ticket_comment": [], "source.zendesk_source.zendesk.user_tag": [], "source.zendesk_source.zendesk.user": [], "source.zendesk_source.zendesk.schedule": [], "source.zendesk_source.zendesk.ticket_schedule": [], "source.zendesk_source.zendesk.ticket_form_history": [], "source.zendesk_source.zendesk.ticket_tag": [], "source.zendesk_source.zendesk.ticket_field_history": [], "source.zendesk_source.zendesk.daylight_time": [], "source.zendesk_source.zendesk.time_zone": [], "source.zendesk_source.zendesk.schedule_holiday": [], "source.zendesk_source.zendesk.ticket_chat": [], "source.zendesk_source.zendesk.ticket_chat_event": []}, "child_map": {"seed.zendesk_integration_tests.organization_tag_data": [], "seed.zendesk_integration_tests.ticket_comment_data": [], "seed.zendesk_integration_tests.brand_data": [], "seed.zendesk_integration_tests.schedule_holiday_data": [], "seed.zendesk_integration_tests.ticket_chat_data": [], "seed.zendesk_integration_tests.domain_name_data": [], "seed.zendesk_integration_tests.ticket_field_history_data": [], "seed.zendesk_integration_tests.audit_log_data": [], "seed.zendesk_integration_tests.ticket_data": [], "seed.zendesk_integration_tests.ticket_chat_event_data": [], "seed.zendesk_integration_tests.time_zone_data": [], "seed.zendesk_integration_tests.ticket_schedule_data": [], "seed.zendesk_integration_tests.daylight_time_data": [], "seed.zendesk_integration_tests.user_data": [], "seed.zendesk_integration_tests.schedule_data": [], "seed.zendesk_integration_tests.ticket_tag_data": [], "seed.zendesk_integration_tests.organization_data": [], "seed.zendesk_integration_tests.ticket_form_history_data": [], "seed.zendesk_integration_tests.group_data": [], "seed.zendesk_integration_tests.user_tag_data": [], "model.zendesk.zendesk__ticket_enriched": ["model.zendesk.zendesk__ticket_metrics", "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_enriched_ticket_id__source_relation.be39bf8b5c", "test.zendesk.not_null_zendesk__ticket_enriched_ticket_id.e3efc5bf0a"], "model.zendesk.zendesk__ticket_metrics": ["model.zendesk.zendesk__ticket_summary", "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_metrics_ticket_id__source_relation.6288a95671", "test.zendesk.not_null_zendesk__ticket_metrics_ticket_id.3466b76bbd"], "model.zendesk.zendesk__ticket_summary": [], "model.zendesk.zendesk__ticket_field_history": ["model.zendesk.zendesk__ticket_backlog"], "model.zendesk.zendesk__sla_policies": ["test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__sla_policies_sla_event_id__source_relation.5f9ad499dc"], "model.zendesk.zendesk__ticket_backlog": [], "model.zendesk.int_zendesk__sla_policy_applied": ["model.zendesk.int_zendesk__agent_work_time_filtered_statuses", "model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__reply_time_calendar_hours", "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses"], "model.zendesk.int_zendesk__agent_work_time_business_hours": ["model.zendesk.zendesk__sla_policies"], "model.zendesk.int_zendesk__agent_work_time_calendar_hours": ["model.zendesk.zendesk__sla_policies"], "model.zendesk.int_zendesk__agent_work_time_filtered_statuses": ["model.zendesk.int_zendesk__agent_work_time_business_hours", "model.zendesk.int_zendesk__agent_work_time_calendar_hours"], "model.zendesk.int_zendesk__reply_time_business_hours": ["model.zendesk.int_zendesk__reply_time_combined"], "model.zendesk.int_zendesk__reply_time_calendar_hours": ["model.zendesk.int_zendesk__reply_time_combined"], "model.zendesk.int_zendesk__reply_time_combined": ["model.zendesk.zendesk__sla_policies"], "model.zendesk.int_zendesk__commenter_reply_at": ["model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__reply_time_combined"], "model.zendesk.int_zendesk__requester_wait_time_calendar_hours": ["model.zendesk.zendesk__sla_policies"], "model.zendesk.int_zendesk__requester_wait_time_business_hours": ["model.zendesk.zendesk__sla_policies"], "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses": ["model.zendesk.int_zendesk__requester_wait_time_business_hours", "model.zendesk.int_zendesk__requester_wait_time_calendar_hours"], "model.zendesk.int_zendesk__ticket_reply_times": ["model.zendesk.int_zendesk__ticket_first_reply_time_business", "model.zendesk.int_zendesk__ticket_reply_times_calendar"], "model.zendesk.int_zendesk__ticket_reply_times_calendar": ["model.zendesk.zendesk__ticket_metrics"], "model.zendesk.int_zendesk__comments_enriched": ["model.zendesk.int_zendesk__comment_metrics", "model.zendesk.int_zendesk__ticket_reply_times"], "model.zendesk.int_zendesk__ticket_first_reply_time_business": ["model.zendesk.zendesk__ticket_metrics"], "model.zendesk.int_zendesk__field_history_enriched": ["model.zendesk.int_zendesk__field_history_pivot"], "model.zendesk.int_zendesk__field_history_pivot": ["model.zendesk.int_zendesk__field_history_scd"], "model.zendesk.int_zendesk__updater_information": ["model.zendesk.int_zendesk__field_history_enriched"], "model.zendesk.int_zendesk__field_history_scd": ["model.zendesk.zendesk__ticket_field_history"], "model.zendesk.int_zendesk__field_calendar_spine": ["model.zendesk.zendesk__ticket_field_history"], "model.zendesk.int_zendesk__ticket_work_time_calendar": ["model.zendesk.zendesk__ticket_metrics"], "model.zendesk.int_zendesk__ticket_work_time_business": ["model.zendesk.zendesk__ticket_metrics"], "model.zendesk.int_zendesk__calendar_spine": ["model.zendesk.int_zendesk__field_calendar_spine"], "model.zendesk.int_zendesk__timezone_daylight": ["model.zendesk.int_zendesk__schedule_timezones"], "model.zendesk.int_zendesk__ticket_resolution_times_calendar": ["model.zendesk.int_zendesk__ticket_first_resolution_time_business", "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "model.zendesk.zendesk__ticket_metrics"], "model.zendesk.int_zendesk__ticket_first_resolution_time_business": ["model.zendesk.zendesk__ticket_metrics"], "model.zendesk.int_zendesk__ticket_full_resolution_time_business": ["model.zendesk.zendesk__ticket_metrics"], "model.zendesk.zendesk__document": [], "model.zendesk.int_zendesk__ticket_comment_documents_grouped": ["model.zendesk.zendesk__document"], "model.zendesk.int_zendesk__ticket_comment_document": ["model.zendesk.int_zendesk__ticket_comment_documents_grouped"], "model.zendesk.int_zendesk__ticket_document": ["model.zendesk.zendesk__document"], "model.zendesk.int_zendesk__updates": ["model.zendesk.int_zendesk__assignee_updates", "model.zendesk.int_zendesk__commenter_reply_at", "model.zendesk.int_zendesk__comments_enriched", "model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__reply_time_combined", "model.zendesk.int_zendesk__requester_updates", "model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.int_zendesk__ticket_historical_assignee", "model.zendesk.int_zendesk__ticket_historical_group", "model.zendesk.int_zendesk__ticket_historical_satisfaction", "model.zendesk.int_zendesk__ticket_historical_status"], "model.zendesk.int_zendesk__ticket_historical_assignee": ["model.zendesk.int_zendesk__ticket_resolution_times_calendar"], "model.zendesk.int_zendesk__ticket_historical_status": ["model.zendesk.int_zendesk__agent_work_time_filtered_statuses", "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses", "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_work_time_business", "model.zendesk.int_zendesk__ticket_work_time_calendar"], "model.zendesk.int_zendesk__user_role_history": ["model.zendesk.int_zendesk__commenter_reply_at", "model.zendesk.int_zendesk__comments_enriched", "model.zendesk.zendesk__ticket_enriched"], "model.zendesk.int_zendesk__user_aggregates": ["model.zendesk.int_zendesk__updater_information", "model.zendesk.zendesk__ticket_enriched"], "model.zendesk.int_zendesk__schedule_spine": ["model.zendesk.int_zendesk__agent_work_time_business_hours", "model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__requester_wait_time_business_hours", "model.zendesk.int_zendesk__ticket_first_reply_time_business", "model.zendesk.int_zendesk__ticket_first_resolution_time_business", "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "model.zendesk.int_zendesk__ticket_work_time_business"], "model.zendesk.int_zendesk__ticket_schedules": ["model.zendesk.int_zendesk__agent_work_time_business_hours", "model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__requester_wait_time_business_hours", "model.zendesk.int_zendesk__ticket_first_reply_time_business", "model.zendesk.int_zendesk__ticket_first_resolution_time_business", "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "model.zendesk.int_zendesk__ticket_work_time_business"], "model.zendesk.int_zendesk__assignee_updates": ["model.zendesk.zendesk__ticket_enriched"], "model.zendesk.int_zendesk__comment_metrics": ["model.zendesk.zendesk__ticket_metrics"], "model.zendesk.int_zendesk__schedule_timezones": ["model.zendesk.int_zendesk__schedule_spine"], "model.zendesk.int_zendesk__ticket_historical_group": ["model.zendesk.int_zendesk__ticket_resolution_times_calendar"], "model.zendesk.int_zendesk__schedule_history": ["model.zendesk.int_zendesk__schedule_timezones"], "model.zendesk.int_zendesk__schedule_holiday": ["model.zendesk.int_zendesk__schedule_spine"], "model.zendesk.int_zendesk__requester_updates": ["model.zendesk.zendesk__ticket_enriched"], "model.zendesk.int_zendesk__ticket_historical_satisfaction": ["model.zendesk.zendesk__ticket_enriched"], "model.zendesk.int_zendesk__latest_ticket_form": ["model.zendesk.zendesk__ticket_enriched"], "model.zendesk.int_zendesk__ticket_aggregates": ["model.zendesk.int_zendesk__sla_policy_applied", "model.zendesk.zendesk__ticket_enriched"], "model.zendesk.int_zendesk__organization_aggregates": ["model.zendesk.int_zendesk__updater_information", "model.zendesk.zendesk__ticket_enriched"], "operation.zendesk.zendesk-on-run-start-0": [], "model.zendesk_source.stg_zendesk__user_tag": ["model.zendesk.int_zendesk__user_aggregates"], "model.zendesk_source.stg_zendesk__ticket_chat": ["model.zendesk.int_zendesk__updates", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_chat_id__source_relation.67284fc71a"], "model.zendesk_source.stg_zendesk__ticket_tag": ["model.zendesk.int_zendesk__ticket_aggregates"], "model.zendesk_source.stg_zendesk__ticket_field_history": ["model.zendesk.int_zendesk__field_history_enriched", "model.zendesk.int_zendesk__field_history_pivot", "model.zendesk.int_zendesk__updates"], "model.zendesk_source.stg_zendesk__schedule_holiday": ["model.zendesk.int_zendesk__schedule_holiday", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__schedule_holiday_holiday_id__source_relation.74b720785d", "test.zendesk_source.not_null_stg_zendesk__schedule_holiday_holiday_id.52eb08f782"], "model.zendesk_source.stg_zendesk__daylight_time": ["model.zendesk.int_zendesk__timezone_daylight", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year__source_relation.0621b61b9b"], "model.zendesk_source.stg_zendesk__organization": ["model.zendesk.int_zendesk__organization_aggregates", "model.zendesk.zendesk__ticket_backlog", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__organization_organization_id__source_relation.e8b3d0c0b4", "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a"], "model.zendesk_source.stg_zendesk__time_zone": ["model.zendesk.int_zendesk__timezone_daylight", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__time_zone_time_zone__source_relation.16bb413a39", "test.zendesk_source.not_null_stg_zendesk__time_zone_time_zone.b25b3452b1"], "model.zendesk_source.stg_zendesk__group": ["model.zendesk.zendesk__ticket_backlog", "model.zendesk.zendesk__ticket_enriched", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__group_group_id__source_relation.5c96f83c83", "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec"], "model.zendesk_source.stg_zendesk__ticket_comment": ["model.zendesk.int_zendesk__ticket_comment_document", "model.zendesk.int_zendesk__updates", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_comment_ticket_comment_id__source_relation.9e0ed5e891", "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606"], "model.zendesk_source.stg_zendesk__ticket_schedule": ["model.zendesk.int_zendesk__ticket_schedules"], "model.zendesk_source.stg_zendesk__schedule": ["model.zendesk.int_zendesk__reply_time_business_hours", "model.zendesk.int_zendesk__schedule_holiday", "model.zendesk.int_zendesk__schedule_timezones", "model.zendesk.int_zendesk__ticket_schedules", "test.zendesk_source.not_null_stg_zendesk__schedule_schedule_id.fd74fb065d"], "model.zendesk_source.stg_zendesk__user": ["model.zendesk.int_zendesk__ticket_comment_document", "model.zendesk.int_zendesk__ticket_document", "model.zendesk.int_zendesk__user_aggregates", "model.zendesk.int_zendesk__user_role_history", "model.zendesk.zendesk__ticket_backlog", "model.zendesk.zendesk__ticket_summary", "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926"], "model.zendesk_source.stg_zendesk__brand": ["model.zendesk.int_zendesk__ticket_aggregates", "model.zendesk.zendesk__ticket_backlog", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__brand_brand_id__source_relation.1d4af19ac3", "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741"], "model.zendesk_source.stg_zendesk__ticket_form_history": ["model.zendesk.int_zendesk__latest_ticket_form", "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17"], "model.zendesk_source.stg_zendesk__audit_log": ["model.zendesk.int_zendesk__schedule_history", "model.zendesk.int_zendesk__user_role_history"], "model.zendesk_source.stg_zendesk__ticket_chat_event": ["model.zendesk.int_zendesk__updates", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_event_chat_id__created_at__source_relation.3f64974f71"], "model.zendesk_source.stg_zendesk__domain_name": ["model.zendesk.int_zendesk__organization_aggregates", "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3"], "model.zendesk_source.stg_zendesk__organization_tag": ["model.zendesk.int_zendesk__organization_aggregates"], "model.zendesk_source.stg_zendesk__ticket": ["model.zendesk.int_zendesk__assignee_updates", "model.zendesk.int_zendesk__calendar_spine", "model.zendesk.int_zendesk__field_calendar_spine", "model.zendesk.int_zendesk__requester_updates", "model.zendesk.int_zendesk__ticket_aggregates", "model.zendesk.int_zendesk__ticket_document", "model.zendesk.int_zendesk__ticket_reply_times_calendar", "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "model.zendesk.int_zendesk__ticket_schedules", "model.zendesk.int_zendesk__updates", "model.zendesk.zendesk__ticket_backlog", "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_ticket_id__source_relation.75067aca7d", "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981"], "model.zendesk_source.stg_zendesk__daylight_time_tmp": ["model.zendesk_source.stg_zendesk__daylight_time"], "model.zendesk_source.stg_zendesk__user_tmp": ["model.zendesk_source.stg_zendesk__user"], "model.zendesk_source.stg_zendesk__group_tmp": ["model.zendesk_source.stg_zendesk__group"], "model.zendesk_source.stg_zendesk__ticket_tmp": ["model.zendesk_source.stg_zendesk__ticket"], "model.zendesk_source.stg_zendesk__brand_tmp": ["model.zendesk_source.stg_zendesk__brand"], "model.zendesk_source.stg_zendesk__ticket_tag_tmp": ["model.zendesk_source.stg_zendesk__ticket_tag"], "model.zendesk_source.stg_zendesk__schedule_holiday_tmp": ["model.zendesk_source.stg_zendesk__schedule_holiday"], "model.zendesk_source.stg_zendesk__user_tag_tmp": ["model.zendesk_source.stg_zendesk__user_tag"], "model.zendesk_source.stg_zendesk__ticket_field_history_tmp": ["model.zendesk_source.stg_zendesk__ticket_field_history"], "model.zendesk_source.stg_zendesk__ticket_chat_tmp": ["model.zendesk_source.stg_zendesk__ticket_chat"], "model.zendesk_source.stg_zendesk__ticket_form_history_tmp": ["model.zendesk_source.stg_zendesk__ticket_form_history"], "model.zendesk_source.stg_zendesk__ticket_comment_tmp": ["model.zendesk_source.stg_zendesk__ticket_comment"], "model.zendesk_source.stg_zendesk__organization_tag_tmp": ["model.zendesk_source.stg_zendesk__organization_tag"], "model.zendesk_source.stg_zendesk__audit_log_tmp": ["model.zendesk_source.stg_zendesk__audit_log"], "model.zendesk_source.stg_zendesk__schedule_tmp": ["model.zendesk_source.stg_zendesk__schedule"], "model.zendesk_source.stg_zendesk__organization_tmp": ["model.zendesk_source.stg_zendesk__organization"], "model.zendesk_source.stg_zendesk__ticket_schedule_tmp": ["model.zendesk_source.stg_zendesk__ticket_schedule"], "model.zendesk_source.stg_zendesk__domain_name_tmp": ["model.zendesk_source.stg_zendesk__domain_name"], "model.zendesk_source.stg_zendesk__ticket_chat_event_tmp": ["model.zendesk_source.stg_zendesk__ticket_chat_event"], "model.zendesk_source.stg_zendesk__time_zone_tmp": ["model.zendesk_source.stg_zendesk__time_zone"], "test.zendesk.not_null_zendesk__ticket_enriched_ticket_id.e3efc5bf0a": [], "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_enriched_ticket_id__source_relation.be39bf8b5c": [], "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__sla_policies_sla_event_id__source_relation.5f9ad499dc": [], "test.zendesk.not_null_zendesk__ticket_metrics_ticket_id.3466b76bbd": [], "test.zendesk.dbt_utils_unique_combination_of_columns_zendesk__ticket_metrics_ticket_id__source_relation.6288a95671": [], "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_ticket_id__source_relation.75067aca7d": [], "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__brand_brand_id__source_relation.1d4af19ac3": [], "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3": [], "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__group_group_id__source_relation.5c96f83c83": [], "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__organization_organization_id__source_relation.e8b3d0c0b4": [], "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_comment_ticket_comment_id__source_relation.9e0ed5e891": [], "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926": [], "test.zendesk_source.not_null_stg_zendesk__schedule_schedule_id.fd74fb065d": [], "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year__source_relation.0621b61b9b": [], "test.zendesk_source.not_null_stg_zendesk__time_zone_time_zone.b25b3452b1": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__time_zone_time_zone__source_relation.16bb413a39": [], "test.zendesk_source.not_null_stg_zendesk__schedule_holiday_holiday_id.52eb08f782": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__schedule_holiday_holiday_id__source_relation.74b720785d": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_chat_id__source_relation.67284fc71a": [], "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__ticket_chat_event_chat_id__created_at__source_relation.3f64974f71": [], "source.zendesk_source.zendesk.audit_log": ["model.zendesk_source.stg_zendesk__audit_log_tmp"], "source.zendesk_source.zendesk.ticket": ["model.zendesk_source.stg_zendesk__ticket_tmp"], "source.zendesk_source.zendesk.brand": ["model.zendesk_source.stg_zendesk__brand_tmp"], "source.zendesk_source.zendesk.domain_name": ["model.zendesk_source.stg_zendesk__domain_name_tmp"], "source.zendesk_source.zendesk.group": ["model.zendesk_source.stg_zendesk__group_tmp"], "source.zendesk_source.zendesk.organization_tag": ["model.zendesk_source.stg_zendesk__organization_tag_tmp"], "source.zendesk_source.zendesk.organization": ["model.zendesk_source.stg_zendesk__organization_tmp"], "source.zendesk_source.zendesk.ticket_comment": ["model.zendesk_source.stg_zendesk__ticket_comment_tmp"], "source.zendesk_source.zendesk.user_tag": ["model.zendesk_source.stg_zendesk__user_tag_tmp"], "source.zendesk_source.zendesk.user": ["model.zendesk_source.stg_zendesk__user_tmp"], "source.zendesk_source.zendesk.schedule": ["model.zendesk_source.stg_zendesk__schedule_tmp"], "source.zendesk_source.zendesk.ticket_schedule": ["model.zendesk_source.stg_zendesk__ticket_schedule_tmp"], "source.zendesk_source.zendesk.ticket_form_history": ["model.zendesk_source.stg_zendesk__ticket_form_history_tmp"], "source.zendesk_source.zendesk.ticket_tag": ["model.zendesk_source.stg_zendesk__ticket_tag_tmp"], "source.zendesk_source.zendesk.ticket_field_history": ["model.zendesk_source.stg_zendesk__ticket_field_history_tmp"], "source.zendesk_source.zendesk.daylight_time": ["model.zendesk_source.stg_zendesk__daylight_time_tmp"], "source.zendesk_source.zendesk.time_zone": ["model.zendesk_source.stg_zendesk__time_zone_tmp"], "source.zendesk_source.zendesk.schedule_holiday": ["model.zendesk_source.stg_zendesk__schedule_holiday_tmp"], "source.zendesk_source.zendesk.ticket_chat": ["model.zendesk_source.stg_zendesk__ticket_chat_tmp"], "source.zendesk_source.zendesk.ticket_chat_event": ["model.zendesk_source.stg_zendesk__ticket_chat_event_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}